
opdracht 4.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000008f8  0000096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f30  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a8d  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f1  00000000  00000000  00002485  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000543  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000463  00000000  00000000  0000326f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000036d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c1       	rjmp	.+630    	; 0x29c <__vector_9>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	11 d1       	rcall	.+546    	; 0x2d6 <main>
  b4:	1f c4       	rjmp	.+2110   	; 0x8f4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <sbi_porta>:
void cbi_portc(int index){
	PORTC &= ~(1<<index);
}

void sbi_porta(int index){
	PORTA |= (1<<index);
  b8:	9b b3       	in	r25, 0x1b	; 27
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <sbi_porta+0xc>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <sbi_porta+0x8>
  c8:	29 2b       	or	r18, r25
  ca:	2b bb       	out	0x1b, r18	; 27
  cc:	08 95       	ret

000000ce <cbi_porta>:
}


void cbi_porta(int index){
	PORTA &= ~(1<<index);
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <cbi_porta+0xc>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <cbi_porta+0x8>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	2b bb       	out	0x1b, r18	; 27
  e4:	08 95       	ret

000000e6 <lcd_strobe_lcd_e>:
	lcd_write_command (0x80);						//Cursor terug naar start
}

void lcd_strobe_lcd_e(void) {
	
	sbi_porta(LCD_E);	// E high
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	e6 df       	rcall	.-52     	; 0xb8 <sbi_porta>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_strobe_lcd_e+0xa>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_strobe_lcd_e+0x10>
  f6:	00 00       	nop
	_delay_ms(1);
	cbi_porta(LCD_E);  	// E low
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e8 df       	rcall	.-48     	; 0xce <cbi_porta>
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_strobe_lcd_e+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_strobe_lcd_e+0x22>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <lcd_write_character>:
	char str[length + 1];
	snprintf(str, length + 1, "%d", number);
	lcd_write_string(str);
}

void lcd_write_character(unsigned char byte){
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
	
	
	//upper nibble
	PORTC = byte;
 110:	85 bb       	out	0x15, r24	; 21
	sbi_porta(LCD_RS);
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	d0 df       	rcall	.-96     	; 0xb8 <sbi_porta>
	lcd_strobe_lcd_e();
 118:	e6 df       	rcall	.-52     	; 0xe6 <lcd_strobe_lcd_e>
 11a:	c2 95       	swap	r28
	
	//lower nibble
	PORTC = (byte<<4);
 11c:	c0 7f       	andi	r28, 0xF0	; 240
 11e:	c5 bb       	out	0x15, r28	; 21
 120:	84 e0       	ldi	r24, 0x04	; 4
	sbi_porta(LCD_RS);
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	c9 df       	rcall	.-110    	; 0xb8 <sbi_porta>
	lcd_strobe_lcd_e();
 126:	df df       	rcall	.-66     	; 0xe6 <lcd_strobe_lcd_e>
 128:	cf 91       	pop	r28
	
}
 12a:	08 95       	ret

0000012c <lcd_write_command>:
 12c:	cf 93       	push	r28

void lcd_write_command(unsigned char byte){
 12e:	c8 2f       	mov	r28, r24
	
	//upper nibble
	PORTC = byte;
 130:	85 bb       	out	0x15, r24	; 21
	cbi_porta(LCD_RS);
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	cb df       	rcall	.-106    	; 0xce <cbi_porta>
	lcd_strobe_lcd_e();
 138:	d6 df       	rcall	.-84     	; 0xe6 <lcd_strobe_lcd_e>
 13a:	c2 95       	swap	r28
	
	//lower nibble
	PORTC = (byte<<4);
 13c:	c0 7f       	andi	r28, 0xF0	; 240
 13e:	c5 bb       	out	0x15, r28	; 21
 140:	84 e0       	ldi	r24, 0x04	; 4
	cbi_porta(LCD_RS);
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	c4 df       	rcall	.-120    	; 0xce <cbi_porta>
	lcd_strobe_lcd_e();
 146:	cf df       	rcall	.-98     	; 0xe6 <lcd_strobe_lcd_e>
 148:	cf 91       	pop	r28

}
 14a:	08 95       	ret

0000014c <lcd_clear>:
 14c:	81 e0       	ldi	r24, 0x01	; 1
#include "lcd_control.h"

void _delay_ms(double __ms);

void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 14e:	ee df       	rcall	.-36     	; 0x12c <lcd_write_command>
 150:	83 ef       	ldi	r24, 0xF3	; 243
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_clear+0x8>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_clear+0xe>
 15a:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	e6 cf       	rjmp	.-52     	; 0x12c <lcd_write_command>
 160:	08 95       	ret

00000162 <init_4bits_mode>:

void cbi_porta(int index){
	PORTA &= ~(1<<index);
}

void init_4bits_mode(void) {
 162:	cf 93       	push	r28
	
	// PORTC output mode and all low (also E and RS pin)
	
	// Init I/O
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 168:	85 bb       	out	0x15, r24	; 21
	
	DDRA = 0xFF;
 16a:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 16c:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 16e:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = 0x20;	// function for 4-bit 1 row
 170:	c0 e2       	ldi	r28, 0x20	; 32
 172:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 174:	b8 df       	rcall	.-144    	; 0xe6 <lcd_strobe_lcd_e>

	PORTC = 0x20;   // function high nibble 4-bit 2 row
	lcd_strobe_lcd_e();
 176:	c5 bb       	out	0x15, r28	; 21
 178:	b6 df       	rcall	.-148    	; 0xe6 <lcd_strobe_lcd_e>
	PORTC = 0x80;	// function low nibble 4-bit 2 row
 17a:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
 17c:	85 bb       	out	0x15, r24	; 21

	PORTC = 0x00;   // function high nibble turn on visible blinking-block cursor
 17e:	b3 df       	rcall	.-154    	; 0xe6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 180:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;   // function low nibble turn on visible blinking-block cursor
 182:	b1 df       	rcall	.-158    	; 0xe6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 184:	80 ef       	ldi	r24, 0xF0	; 240

	PORTC = 0x00;   // Entry mode set high nibble
 186:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 188:	ae df       	rcall	.-164    	; 0xe6 <lcd_strobe_lcd_e>
	PORTC = 0x60;	// Entry mode set low nibble
 18a:	15 ba       	out	0x15, r1	; 21
 18c:	ac df       	rcall	.-168    	; 0xe6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 18e:	80 e6       	ldi	r24, 0x60	; 96
 190:	85 bb       	out	0x15, r24	; 21
	
	// return home
	lcd_write_command(0x02);
 192:	a9 df       	rcall	.-174    	; 0xe6 <lcd_strobe_lcd_e>
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	ca df       	rcall	.-108    	; 0x12c <lcd_write_command>
	lcd_strobe_lcd_e();
 198:	a6 df       	rcall	.-180    	; 0xe6 <lcd_strobe_lcd_e>
 19a:	cf 91       	pop	r28
}
 19c:	08 95       	ret

0000019e <lcd_write_string>:
 19e:	cf 93       	push	r28
	cbi_porta(LCD_RS);
	lcd_strobe_lcd_e();

}

void lcd_write_string(const char *str) {
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
	
	for(;*str; str++){
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <lcd_write_string+0xc>
		lcd_write_character(*str);
 1a6:	b2 df       	rcall	.-156    	; 0x10c <lcd_write_character>

}

void lcd_write_string(const char *str) {
	
	for(;*str; str++){
 1a8:	21 96       	adiw	r28, 0x01	; 1
 1aa:	88 81       	ld	r24, Y
 1ac:	81 11       	cpse	r24, r1
 1ae:	fb cf       	rjmp	.-10     	; 0x1a6 <lcd_write_string+0x8>
		lcd_write_character(*str);
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd_write_integer>:
	// return home
	lcd_write_command(0x02);
	lcd_strobe_lcd_e();
}

void lcd_write_integer(int number){
 1b6:	af 92       	push	r10
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	6c 01       	movw	r12, r24
	int length = snprintf(NULL, 0, "%d", number + 1);
	char str[length + 1];
	snprintf(str, length + 1, "%d", number);
	lcd_write_string(str);
}
 1d0:	ad b6       	in	r10, 0x3d	; 61
 1d2:	be b6       	in	r11, 0x3e	; 62
	lcd_write_command(0x02);
	lcd_strobe_lcd_e();
}

void lcd_write_integer(int number){
	int length = snprintf(NULL, 0, "%d", number + 1);
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	9f 93       	push	r25
 1d8:	8f 93       	push	r24
 1da:	0f 2e       	mov	r0, r31
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ef 2e       	mov	r14, r31
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	ff 2e       	mov	r15, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	ff 92       	push	r15
 1e8:	ef 92       	push	r14
 1ea:	1f 92       	push	r1
 1ec:	1f 92       	push	r1
 1ee:	1f 92       	push	r1
 1f0:	1f 92       	push	r1
 1f2:	97 d0       	rcall	.+302    	; 0x322 <snprintf>
	char str[length + 1];
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	2d b7       	in	r18, 0x3d	; 61
 1f8:	3e b7       	in	r19, 0x3e	; 62
 1fa:	28 5f       	subi	r18, 0xF8	; 248
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	3e bf       	out	0x3e, r19	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	2d bf       	out	0x3d, r18	; 61
 208:	28 1b       	sub	r18, r24
 20a:	39 0b       	sbc	r19, r25
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	3e bf       	out	0x3e, r19	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	2d bf       	out	0x3d, r18	; 61
 216:	0d b7       	in	r16, 0x3d	; 61
 218:	1e b7       	in	r17, 0x3e	; 62
 21a:	0f 5f       	subi	r16, 0xFF	; 255
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
	snprintf(str, length + 1, "%d", number);
 21e:	df 92       	push	r13
 220:	cf 92       	push	r12
 222:	ff 92       	push	r15
 224:	ef 92       	push	r14
 226:	9f 93       	push	r25
 228:	8f 93       	push	r24
 22a:	1f 93       	push	r17
 22c:	0f 93       	push	r16
 22e:	79 d0       	rcall	.+242    	; 0x322 <snprintf>
	lcd_write_string(str);
 230:	80 2f       	mov	r24, r16
 232:	91 2f       	mov	r25, r17
 234:	b4 df       	rcall	.-152    	; 0x19e <lcd_write_string>
}
 236:	8d b7       	in	r24, 0x3d	; 61
 238:	9e b7       	in	r25, 0x3e	; 62
 23a:	08 96       	adiw	r24, 0x08	; 8
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	9e bf       	out	0x3e, r25	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	8d bf       	out	0x3d, r24	; 61
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	be be       	out	0x3e, r11	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	ad be       	out	0x3d, r10	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
 260:	bf 90       	pop	r11
 262:	af 90       	pop	r10
 264:	08 95       	ret

00000266 <wait>:
#include <avr/interrupt.h>
#include "lcd_control.h"
#define BIT(x)			(1 << (x))

void wait( int ms ) {
	for (int tms=0; tms<ms; tms++) {
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	08 c0       	rjmp	.+16     	; 0x27c <wait+0x16>
 26c:	ef ec       	ldi	r30, 0xCF	; 207
 26e:	f7 e0       	ldi	r31, 0x07	; 7
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <wait+0xa>
 274:	00 c0       	rjmp	.+0      	; 0x276 <wait+0x10>
 276:	00 00       	nop
 278:	2f 5f       	subi	r18, 0xFF	; 255
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
 27c:	28 17       	cp	r18, r24
 27e:	39 07       	cpc	r19, r25
 280:	ac f3       	brlt	.-22     	; 0x26c <wait+0x6>
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
 282:	08 95       	ret

00000284 <adcInit>:

void adcInit(){
	ADMUX = 0b11100000; // internal reference: 2.56V and SEI on ADC0 and left-adjusted.
 284:	80 ee       	ldi	r24, 0xE0	; 224
 286:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110; // enable ADC. No free-run. Clock 64 D-factor.
 288:	86 e8       	ldi	r24, 0x86	; 134
 28a:	86 b9       	out	0x06, r24	; 6
 28c:	08 95       	ret

0000028e <timer2Init>:
}

void timer2Init( void ) {
	TIMSK |= BIT(7);		// T2 compare match interrupt enable
 28e:	87 b7       	in	r24, 0x37	; 55
 290:	80 68       	ori	r24, 0x80	; 128
 292:	87 bf       	out	0x37, r24	; 55
	sei();					// turn_on interrupt all
 294:	78 94       	sei
	TCCR2 = 0b00000011;		// Initialize T2: timer, pre-scaler=64
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	85 bd       	out	0x25, r24	; 37
 29a:	08 95       	ret

0000029c <__vector_9>:
}

ISR( TIMER2_COMP_vect ) {
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	8f 93       	push	r24
	ADCSRA |= BIT(6);
 2a8:	86 b1       	in	r24, 0x06	; 6
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	86 b9       	out	0x06, r24	; 6
}
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <getADCValue>:

int getADCValue(){
	int value = 0;
	value = ADCH;
 2ba:	85 b1       	in	r24, 0x05	; 5
 2bc:	90 e0       	ldi	r25, 0x00	; 0
	value <<= 2;
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
	value += (ADCL >> 6);
 2c6:	24 b1       	in	r18, 0x04	; 4
 2c8:	22 95       	swap	r18
 2ca:	26 95       	lsr	r18
 2cc:	26 95       	lsr	r18
 2ce:	23 70       	andi	r18, 0x03	; 3
	return value;
}
 2d0:	82 0f       	add	r24, r18
 2d2:	91 1d       	adc	r25, r1
 2d4:	08 95       	ret

000002d6 <main>:

int main(void)
{
	int previousValue = 0;
    /* Replace with your application code */
	DDRF = 0x00; // set port F input.
 2d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRE = 0xFF; // all port A output.
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	82 b9       	out	0x02, r24	; 2
	adcInit();
 2de:	d2 df       	rcall	.-92     	; 0x284 <adcInit>
	
	init_4bits_mode();
 2e0:	40 df       	rcall	.-384    	; 0x162 <init_4bits_mode>
 2e2:	8f e1       	ldi	r24, 0x1F	; 31
 2e4:	9e e4       	ldi	r25, 0x4E	; 78
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x10>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x16>
 2ec:	00 00       	nop
	_delay_ms(10);
	lcd_clear();
 2ee:	2e df       	rcall	.-420    	; 0x14c <lcd_clear>
 2f0:	ce df       	rcall	.-100    	; 0x28e <timer2Init>

	timer2Init();
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0



int main(void)
{
	int previousValue = 0;
 2f6:	25 b1       	in	r18, 0x05	; 5
 2f8:	22 bb       	out	0x12, r18	; 18
	lcd_clear();

	timer2Init();
    while (1) 
    {
		PORTD = ADCH;
 2fa:	24 b1       	in	r18, 0x04	; 4
 2fc:	23 b9       	out	0x03, r18	; 3
		PORTE = ADCL;
 2fe:	c5 b1       	in	r28, 0x05	; 5
 300:	d0 e0       	ldi	r29, 0x00	; 0
		
		int number = ADCH;
 302:	8c 17       	cp	r24, r28

		if(previousValue != number){
 304:	9d 07       	cpc	r25, r29
 306:	41 f0       	breq	.+16     	; 0x318 <main+0x42>
			
			lcd_clear();
 308:	21 df       	rcall	.-446    	; 0x14c <lcd_clear>
			
			wait(10);
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ab df       	rcall	.-170    	; 0x266 <wait>
			
			lcd_write_integer((getADCValue() >> 1));
 310:	d4 df       	rcall	.-88     	; 0x2ba <getADCValue>
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	4f df       	rcall	.-354    	; 0x1b6 <lcd_write_integer>
 318:	84 e6       	ldi	r24, 0x64	; 100
		}
		
		previousValue = number;
		
		wait(100);
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a4 df       	rcall	.-184    	; 0x266 <wait>
 31e:	ce 01       	movw	r24, r28
 320:	ea cf       	rjmp	.-44     	; 0x2f6 <main+0x20>

00000322 <snprintf>:
			wait(10);
			
			lcd_write_integer((getADCValue() >> 1));
		}
		
		previousValue = number;
 322:	0f 93       	push	r16
		
		wait(100);
    }
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	2e 97       	sbiw	r28, 0x0e	; 14
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
 33a:	0d 89       	ldd	r16, Y+21	; 0x15
 33c:	1e 89       	ldd	r17, Y+22	; 0x16
 33e:	8f 89       	ldd	r24, Y+23	; 0x17
 340:	98 8d       	ldd	r25, Y+24	; 0x18
 342:	26 e0       	ldi	r18, 0x06	; 6
 344:	2c 83       	std	Y+4, r18	; 0x04
 346:	1a 83       	std	Y+2, r17	; 0x02
 348:	09 83       	std	Y+1, r16	; 0x01
 34a:	97 ff       	sbrs	r25, 7
 34c:	02 c0       	rjmp	.+4      	; 0x352 <snprintf+0x30>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e8       	ldi	r25, 0x80	; 128
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	9e 83       	std	Y+6, r25	; 0x06
 356:	8d 83       	std	Y+5, r24	; 0x05
 358:	ae 01       	movw	r20, r28
 35a:	45 5e       	subi	r20, 0xE5	; 229
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	69 8d       	ldd	r22, Y+25	; 0x19
 360:	7a 8d       	ldd	r23, Y+26	; 0x1a
 362:	ce 01       	movw	r24, r28
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	19 d0       	rcall	.+50     	; 0x39a <vfprintf>
 368:	4d 81       	ldd	r20, Y+5	; 0x05
 36a:	5e 81       	ldd	r21, Y+6	; 0x06
 36c:	57 fd       	sbrc	r21, 7
 36e:	0a c0       	rjmp	.+20     	; 0x384 <snprintf+0x62>
 370:	2f 81       	ldd	r18, Y+7	; 0x07
 372:	38 85       	ldd	r19, Y+8	; 0x08
 374:	42 17       	cp	r20, r18
 376:	53 07       	cpc	r21, r19
 378:	0c f4       	brge	.+2      	; 0x37c <snprintf+0x5a>
 37a:	9a 01       	movw	r18, r20
 37c:	f8 01       	movw	r30, r16
 37e:	e2 0f       	add	r30, r18
 380:	f3 1f       	adc	r31, r19
 382:	10 82       	st	Z, r1
 384:	2e 96       	adiw	r28, 0x0e	; 14
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <vfprintf>:
 39a:	2f 92       	push	r2
 39c:	3f 92       	push	r3
 39e:	4f 92       	push	r4
 3a0:	5f 92       	push	r5
 3a2:	6f 92       	push	r6
 3a4:	7f 92       	push	r7
 3a6:	8f 92       	push	r8
 3a8:	9f 92       	push	r9
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	2b 97       	sbiw	r28, 0x0b	; 11
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	6c 01       	movw	r12, r24
 3d0:	7b 01       	movw	r14, r22
 3d2:	8a 01       	movw	r16, r20
 3d4:	fc 01       	movw	r30, r24
 3d6:	17 82       	std	Z+7, r1	; 0x07
 3d8:	16 82       	std	Z+6, r1	; 0x06
 3da:	83 81       	ldd	r24, Z+3	; 0x03
 3dc:	81 ff       	sbrs	r24, 1
 3de:	bf c1       	rjmp	.+894    	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	3c 01       	movw	r6, r24
 3e6:	f6 01       	movw	r30, r12
 3e8:	93 81       	ldd	r25, Z+3	; 0x03
 3ea:	f7 01       	movw	r30, r14
 3ec:	93 fd       	sbrc	r25, 3
 3ee:	85 91       	lpm	r24, Z+
 3f0:	93 ff       	sbrs	r25, 3
 3f2:	81 91       	ld	r24, Z+
 3f4:	7f 01       	movw	r14, r30
 3f6:	88 23       	and	r24, r24
 3f8:	09 f4       	brne	.+2      	; 0x3fc <vfprintf+0x62>
 3fa:	ad c1       	rjmp	.+858    	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 3fc:	85 32       	cpi	r24, 0x25	; 37
 3fe:	39 f4       	brne	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 400:	93 fd       	sbrc	r25, 3
 402:	85 91       	lpm	r24, Z+
 404:	93 ff       	sbrs	r25, 3
 406:	81 91       	ld	r24, Z+
 408:	7f 01       	movw	r14, r30
 40a:	85 32       	cpi	r24, 0x25	; 37
 40c:	21 f4       	brne	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40e:	b6 01       	movw	r22, r12
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	d6 d1       	rcall	.+940    	; 0x7c0 <fputc>
 414:	e8 cf       	rjmp	.-48     	; 0x3e6 <vfprintf+0x4c>
 416:	91 2c       	mov	r9, r1
 418:	21 2c       	mov	r2, r1
 41a:	31 2c       	mov	r3, r1
 41c:	ff e1       	ldi	r31, 0x1F	; 31
 41e:	f3 15       	cp	r31, r3
 420:	d8 f0       	brcs	.+54     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 422:	8b 32       	cpi	r24, 0x2B	; 43
 424:	79 f0       	breq	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 426:	38 f4       	brcc	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 428:	80 32       	cpi	r24, 0x20	; 32
 42a:	79 f0       	breq	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42c:	83 32       	cpi	r24, 0x23	; 35
 42e:	a1 f4       	brne	.+40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 430:	23 2d       	mov	r18, r3
 432:	20 61       	ori	r18, 0x10	; 16
 434:	1d c0       	rjmp	.+58     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 436:	8d 32       	cpi	r24, 0x2D	; 45
 438:	61 f0       	breq	.+24     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 43a:	80 33       	cpi	r24, 0x30	; 48
 43c:	69 f4       	brne	.+26     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 43e:	23 2d       	mov	r18, r3
 440:	21 60       	ori	r18, 0x01	; 1
 442:	16 c0       	rjmp	.+44     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 444:	83 2d       	mov	r24, r3
 446:	82 60       	ori	r24, 0x02	; 2
 448:	38 2e       	mov	r3, r24
 44a:	e3 2d       	mov	r30, r3
 44c:	e4 60       	ori	r30, 0x04	; 4
 44e:	3e 2e       	mov	r3, r30
 450:	2a c0       	rjmp	.+84     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 452:	f3 2d       	mov	r31, r3
 454:	f8 60       	ori	r31, 0x08	; 8
 456:	1d c0       	rjmp	.+58     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 458:	37 fc       	sbrc	r3, 7
 45a:	2d c0       	rjmp	.+90     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 45c:	20 ed       	ldi	r18, 0xD0	; 208
 45e:	28 0f       	add	r18, r24
 460:	2a 30       	cpi	r18, 0x0A	; 10
 462:	40 f0       	brcs	.+16     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 464:	8e 32       	cpi	r24, 0x2E	; 46
 466:	b9 f4       	brne	.+46     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 468:	36 fc       	sbrc	r3, 6
 46a:	75 c1       	rjmp	.+746    	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 46c:	23 2d       	mov	r18, r3
 46e:	20 64       	ori	r18, 0x40	; 64
 470:	32 2e       	mov	r3, r18
 472:	19 c0       	rjmp	.+50     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 474:	36 fe       	sbrs	r3, 6
 476:	06 c0       	rjmp	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 478:	8a e0       	ldi	r24, 0x0A	; 10
 47a:	98 9e       	mul	r9, r24
 47c:	20 0d       	add	r18, r0
 47e:	11 24       	eor	r1, r1
 480:	92 2e       	mov	r9, r18
 482:	11 c0       	rjmp	.+34     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 484:	ea e0       	ldi	r30, 0x0A	; 10
 486:	2e 9e       	mul	r2, r30
 488:	20 0d       	add	r18, r0
 48a:	11 24       	eor	r1, r1
 48c:	22 2e       	mov	r2, r18
 48e:	f3 2d       	mov	r31, r3
 490:	f0 62       	ori	r31, 0x20	; 32
 492:	3f 2e       	mov	r3, r31
 494:	08 c0       	rjmp	.+16     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 496:	8c 36       	cpi	r24, 0x6C	; 108
 498:	21 f4       	brne	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49a:	83 2d       	mov	r24, r3
 49c:	80 68       	ori	r24, 0x80	; 128
 49e:	38 2e       	mov	r3, r24
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	88 36       	cpi	r24, 0x68	; 104
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4a6:	f7 01       	movw	r30, r14
 4a8:	93 fd       	sbrc	r25, 3
 4aa:	85 91       	lpm	r24, Z+
 4ac:	93 ff       	sbrs	r25, 3
 4ae:	81 91       	ld	r24, Z+
 4b0:	7f 01       	movw	r14, r30
 4b2:	81 11       	cpse	r24, r1
 4b4:	b3 cf       	rjmp	.-154    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 4b6:	98 2f       	mov	r25, r24
 4b8:	9f 7d       	andi	r25, 0xDF	; 223
 4ba:	95 54       	subi	r25, 0x45	; 69
 4bc:	93 30       	cpi	r25, 0x03	; 3
 4be:	28 f4       	brcc	.+10     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c0:	0c 5f       	subi	r16, 0xFC	; 252
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	9f e3       	ldi	r25, 0x3F	; 63
 4c6:	99 83       	std	Y+1, r25	; 0x01
 4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ca:	83 36       	cpi	r24, 0x63	; 99
 4cc:	31 f0       	breq	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ce:	83 37       	cpi	r24, 0x73	; 115
 4d0:	71 f0       	breq	.+28     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4d2:	83 35       	cpi	r24, 0x53	; 83
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d6:	55 c0       	rjmp	.+170    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 4d8:	20 c0       	rjmp	.+64     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4da:	f8 01       	movw	r30, r16
 4dc:	80 81       	ld	r24, Z
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	0e 5f       	subi	r16, 0xFE	; 254
 4e2:	1f 4f       	sbci	r17, 0xFF	; 255
 4e4:	88 24       	eor	r8, r8
 4e6:	83 94       	inc	r8
 4e8:	91 2c       	mov	r9, r1
 4ea:	53 01       	movw	r10, r6
 4ec:	12 c0       	rjmp	.+36     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4ee:	28 01       	movw	r4, r16
 4f0:	f2 e0       	ldi	r31, 0x02	; 2
 4f2:	4f 0e       	add	r4, r31
 4f4:	51 1c       	adc	r5, r1
 4f6:	f8 01       	movw	r30, r16
 4f8:	a0 80       	ld	r10, Z
 4fa:	b1 80       	ldd	r11, Z+1	; 0x01
 4fc:	36 fe       	sbrs	r3, 6
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 500:	69 2d       	mov	r22, r9
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 506:	6f ef       	ldi	r22, 0xFF	; 255
 508:	7f ef       	ldi	r23, 0xFF	; 255
 50a:	c5 01       	movw	r24, r10
 50c:	4e d1       	rcall	.+668    	; 0x7aa <strnlen>
 50e:	4c 01       	movw	r8, r24
 510:	82 01       	movw	r16, r4
 512:	f3 2d       	mov	r31, r3
 514:	ff 77       	andi	r31, 0x7F	; 127
 516:	3f 2e       	mov	r3, r31
 518:	15 c0       	rjmp	.+42     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 51a:	28 01       	movw	r4, r16
 51c:	22 e0       	ldi	r18, 0x02	; 2
 51e:	42 0e       	add	r4, r18
 520:	51 1c       	adc	r5, r1
 522:	f8 01       	movw	r30, r16
 524:	a0 80       	ld	r10, Z
 526:	b1 80       	ldd	r11, Z+1	; 0x01
 528:	36 fe       	sbrs	r3, 6
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52c:	69 2d       	mov	r22, r9
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 532:	6f ef       	ldi	r22, 0xFF	; 255
 534:	7f ef       	ldi	r23, 0xFF	; 255
 536:	c5 01       	movw	r24, r10
 538:	2d d1       	rcall	.+602    	; 0x794 <strnlen_P>
 53a:	4c 01       	movw	r8, r24
 53c:	f3 2d       	mov	r31, r3
 53e:	f0 68       	ori	r31, 0x80	; 128
 540:	3f 2e       	mov	r3, r31
 542:	82 01       	movw	r16, r4
 544:	33 fc       	sbrc	r3, 3
 546:	19 c0       	rjmp	.+50     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 548:	82 2d       	mov	r24, r2
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	88 16       	cp	r8, r24
 54e:	99 06       	cpc	r9, r25
 550:	a0 f4       	brcc	.+40     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 552:	b6 01       	movw	r22, r12
 554:	80 e2       	ldi	r24, 0x20	; 32
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	33 d1       	rcall	.+614    	; 0x7c0 <fputc>
 55a:	2a 94       	dec	r2
 55c:	f5 cf       	rjmp	.-22     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 55e:	f5 01       	movw	r30, r10
 560:	37 fc       	sbrc	r3, 7
 562:	85 91       	lpm	r24, Z+
 564:	37 fe       	sbrs	r3, 7
 566:	81 91       	ld	r24, Z+
 568:	5f 01       	movw	r10, r30
 56a:	b6 01       	movw	r22, r12
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	28 d1       	rcall	.+592    	; 0x7c0 <fputc>
 570:	21 10       	cpse	r2, r1
 572:	2a 94       	dec	r2
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	82 1a       	sub	r8, r18
 578:	91 08       	sbc	r9, r1
 57a:	81 14       	cp	r8, r1
 57c:	91 04       	cpc	r9, r1
 57e:	79 f7       	brne	.-34     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 580:	e1 c0       	rjmp	.+450    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 582:	84 36       	cpi	r24, 0x64	; 100
 584:	11 f0       	breq	.+4      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 586:	89 36       	cpi	r24, 0x69	; 105
 588:	39 f5       	brne	.+78     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 58a:	f8 01       	movw	r30, r16
 58c:	37 fe       	sbrs	r3, 7
 58e:	07 c0       	rjmp	.+14     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 590:	60 81       	ld	r22, Z
 592:	71 81       	ldd	r23, Z+1	; 0x01
 594:	82 81       	ldd	r24, Z+2	; 0x02
 596:	93 81       	ldd	r25, Z+3	; 0x03
 598:	0c 5f       	subi	r16, 0xFC	; 252
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 59e:	60 81       	ld	r22, Z
 5a0:	71 81       	ldd	r23, Z+1	; 0x01
 5a2:	07 2e       	mov	r0, r23
 5a4:	00 0c       	add	r0, r0
 5a6:	88 0b       	sbc	r24, r24
 5a8:	99 0b       	sbc	r25, r25
 5aa:	0e 5f       	subi	r16, 0xFE	; 254
 5ac:	1f 4f       	sbci	r17, 0xFF	; 255
 5ae:	f3 2d       	mov	r31, r3
 5b0:	ff 76       	andi	r31, 0x6F	; 111
 5b2:	3f 2e       	mov	r3, r31
 5b4:	97 ff       	sbrs	r25, 7
 5b6:	09 c0       	rjmp	.+18     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5b8:	90 95       	com	r25
 5ba:	80 95       	com	r24
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	f0 68       	ori	r31, 0x80	; 128
 5c8:	3f 2e       	mov	r3, r31
 5ca:	2a e0       	ldi	r18, 0x0A	; 10
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	a3 01       	movw	r20, r6
 5d0:	33 d1       	rcall	.+614    	; 0x838 <__ultoa_invert>
 5d2:	88 2e       	mov	r8, r24
 5d4:	86 18       	sub	r8, r6
 5d6:	44 c0       	rjmp	.+136    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 5d8:	85 37       	cpi	r24, 0x75	; 117
 5da:	31 f4       	brne	.+12     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5dc:	23 2d       	mov	r18, r3
 5de:	2f 7e       	andi	r18, 0xEF	; 239
 5e0:	b2 2e       	mov	r11, r18
 5e2:	2a e0       	ldi	r18, 0x0A	; 10
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	25 c0       	rjmp	.+74     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 5e8:	93 2d       	mov	r25, r3
 5ea:	99 7f       	andi	r25, 0xF9	; 249
 5ec:	b9 2e       	mov	r11, r25
 5ee:	8f 36       	cpi	r24, 0x6F	; 111
 5f0:	c1 f0       	breq	.+48     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 5f2:	18 f4       	brcc	.+6      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5f4:	88 35       	cpi	r24, 0x58	; 88
 5f6:	79 f0       	breq	.+30     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 5f8:	ae c0       	rjmp	.+348    	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 5fa:	80 37       	cpi	r24, 0x70	; 112
 5fc:	19 f0       	breq	.+6      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5fe:	88 37       	cpi	r24, 0x78	; 120
 600:	21 f0       	breq	.+8      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 602:	a9 c0       	rjmp	.+338    	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 604:	e9 2f       	mov	r30, r25
 606:	e0 61       	ori	r30, 0x10	; 16
 608:	be 2e       	mov	r11, r30
 60a:	b4 fe       	sbrs	r11, 4
 60c:	0d c0       	rjmp	.+26     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 60e:	fb 2d       	mov	r31, r11
 610:	f4 60       	ori	r31, 0x04	; 4
 612:	bf 2e       	mov	r11, r31
 614:	09 c0       	rjmp	.+18     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 616:	34 fe       	sbrs	r3, 4
 618:	0a c0       	rjmp	.+20     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 61a:	29 2f       	mov	r18, r25
 61c:	26 60       	ori	r18, 0x06	; 6
 61e:	b2 2e       	mov	r11, r18
 620:	06 c0       	rjmp	.+12     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 622:	28 e0       	ldi	r18, 0x08	; 8
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	20 e1       	ldi	r18, 0x10	; 16
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	20 e1       	ldi	r18, 0x10	; 16
 630:	32 e0       	ldi	r19, 0x02	; 2
 632:	f8 01       	movw	r30, r16
 634:	b7 fe       	sbrs	r11, 7
 636:	07 c0       	rjmp	.+14     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 638:	60 81       	ld	r22, Z
 63a:	71 81       	ldd	r23, Z+1	; 0x01
 63c:	82 81       	ldd	r24, Z+2	; 0x02
 63e:	93 81       	ldd	r25, Z+3	; 0x03
 640:	0c 5f       	subi	r16, 0xFC	; 252
 642:	1f 4f       	sbci	r17, 0xFF	; 255
 644:	06 c0       	rjmp	.+12     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 646:	60 81       	ld	r22, Z
 648:	71 81       	ldd	r23, Z+1	; 0x01
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 5f       	subi	r16, 0xFE	; 254
 650:	1f 4f       	sbci	r17, 0xFF	; 255
 652:	a3 01       	movw	r20, r6
 654:	f1 d0       	rcall	.+482    	; 0x838 <__ultoa_invert>
 656:	88 2e       	mov	r8, r24
 658:	86 18       	sub	r8, r6
 65a:	fb 2d       	mov	r31, r11
 65c:	ff 77       	andi	r31, 0x7F	; 127
 65e:	3f 2e       	mov	r3, r31
 660:	36 fe       	sbrs	r3, 6
 662:	0d c0       	rjmp	.+26     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 664:	23 2d       	mov	r18, r3
 666:	2e 7f       	andi	r18, 0xFE	; 254
 668:	a2 2e       	mov	r10, r18
 66a:	89 14       	cp	r8, r9
 66c:	58 f4       	brcc	.+22     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 66e:	34 fe       	sbrs	r3, 4
 670:	0b c0       	rjmp	.+22     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 672:	32 fc       	sbrc	r3, 2
 674:	09 c0       	rjmp	.+18     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 676:	83 2d       	mov	r24, r3
 678:	8e 7e       	andi	r24, 0xEE	; 238
 67a:	a8 2e       	mov	r10, r24
 67c:	05 c0       	rjmp	.+10     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 67e:	b8 2c       	mov	r11, r8
 680:	a3 2c       	mov	r10, r3
 682:	03 c0       	rjmp	.+6      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 684:	b8 2c       	mov	r11, r8
 686:	01 c0       	rjmp	.+2      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 688:	b9 2c       	mov	r11, r9
 68a:	a4 fe       	sbrs	r10, 4
 68c:	0f c0       	rjmp	.+30     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 68e:	fe 01       	movw	r30, r28
 690:	e8 0d       	add	r30, r8
 692:	f1 1d       	adc	r31, r1
 694:	80 81       	ld	r24, Z
 696:	80 33       	cpi	r24, 0x30	; 48
 698:	21 f4       	brne	.+8      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 69a:	9a 2d       	mov	r25, r10
 69c:	99 7e       	andi	r25, 0xE9	; 233
 69e:	a9 2e       	mov	r10, r25
 6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6a2:	a2 fe       	sbrs	r10, 2
 6a4:	06 c0       	rjmp	.+12     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6a6:	b3 94       	inc	r11
 6a8:	b3 94       	inc	r11
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6ac:	8a 2d       	mov	r24, r10
 6ae:	86 78       	andi	r24, 0x86	; 134
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6b2:	b3 94       	inc	r11
 6b4:	a3 fc       	sbrc	r10, 3
 6b6:	10 c0       	rjmp	.+32     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
 6b8:	a0 fe       	sbrs	r10, 0
 6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6bc:	b2 14       	cp	r11, r2
 6be:	80 f4       	brcc	.+32     	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6c0:	28 0c       	add	r2, r8
 6c2:	92 2c       	mov	r9, r2
 6c4:	9b 18       	sub	r9, r11
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6c8:	b2 14       	cp	r11, r2
 6ca:	58 f4       	brcc	.+22     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6cc:	b6 01       	movw	r22, r12
 6ce:	80 e2       	ldi	r24, 0x20	; 32
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	76 d0       	rcall	.+236    	; 0x7c0 <fputc>
 6d4:	b3 94       	inc	r11
 6d6:	f8 cf       	rjmp	.-16     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6d8:	b2 14       	cp	r11, r2
 6da:	18 f4       	brcc	.+6      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6dc:	2b 18       	sub	r2, r11
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
 6e0:	98 2c       	mov	r9, r8
 6e2:	21 2c       	mov	r2, r1
 6e4:	a4 fe       	sbrs	r10, 4
 6e6:	0f c0       	rjmp	.+30     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 6e8:	b6 01       	movw	r22, r12
 6ea:	80 e3       	ldi	r24, 0x30	; 48
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	68 d0       	rcall	.+208    	; 0x7c0 <fputc>
 6f0:	a2 fe       	sbrs	r10, 2
 6f2:	16 c0       	rjmp	.+44     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 6f4:	a1 fc       	sbrc	r10, 1
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 6f8:	88 e7       	ldi	r24, 0x78	; 120
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6fe:	88 e5       	ldi	r24, 0x58	; 88
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	b6 01       	movw	r22, r12
 704:	0c c0       	rjmp	.+24     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 706:	8a 2d       	mov	r24, r10
 708:	86 78       	andi	r24, 0x86	; 134
 70a:	51 f0       	breq	.+20     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 70c:	a1 fe       	sbrs	r10, 1
 70e:	02 c0       	rjmp	.+4      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
 710:	8b e2       	ldi	r24, 0x2B	; 43
 712:	01 c0       	rjmp	.+2      	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
 714:	80 e2       	ldi	r24, 0x20	; 32
 716:	a7 fc       	sbrc	r10, 7
 718:	8d e2       	ldi	r24, 0x2D	; 45
 71a:	b6 01       	movw	r22, r12
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	50 d0       	rcall	.+160    	; 0x7c0 <fputc>
 720:	89 14       	cp	r8, r9
 722:	30 f4       	brcc	.+12     	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 724:	b6 01       	movw	r22, r12
 726:	80 e3       	ldi	r24, 0x30	; 48
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	4a d0       	rcall	.+148    	; 0x7c0 <fputc>
 72c:	9a 94       	dec	r9
 72e:	f8 cf       	rjmp	.-16     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 730:	8a 94       	dec	r8
 732:	f3 01       	movw	r30, r6
 734:	e8 0d       	add	r30, r8
 736:	f1 1d       	adc	r31, r1
 738:	80 81       	ld	r24, Z
 73a:	b6 01       	movw	r22, r12
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	40 d0       	rcall	.+128    	; 0x7c0 <fputc>
 740:	81 10       	cpse	r8, r1
 742:	f6 cf       	rjmp	.-20     	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 744:	22 20       	and	r2, r2
 746:	09 f4       	brne	.+2      	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
 748:	4e ce       	rjmp	.-868    	; 0x3e6 <vfprintf+0x4c>
 74a:	b6 01       	movw	r22, r12
 74c:	80 e2       	ldi	r24, 0x20	; 32
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	37 d0       	rcall	.+110    	; 0x7c0 <fputc>
 752:	2a 94       	dec	r2
 754:	f7 cf       	rjmp	.-18     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 756:	f6 01       	movw	r30, r12
 758:	86 81       	ldd	r24, Z+6	; 0x06
 75a:	97 81       	ldd	r25, Z+7	; 0x07
 75c:	02 c0       	rjmp	.+4      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	9f ef       	ldi	r25, 0xFF	; 255
 762:	2b 96       	adiw	r28, 0x0b	; 11
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	f8 94       	cli
 768:	de bf       	out	0x3e, r29	; 62
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	cd bf       	out	0x3d, r28	; 61
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	df 90       	pop	r13
 77c:	cf 90       	pop	r12
 77e:	bf 90       	pop	r11
 780:	af 90       	pop	r10
 782:	9f 90       	pop	r9
 784:	8f 90       	pop	r8
 786:	7f 90       	pop	r7
 788:	6f 90       	pop	r6
 78a:	5f 90       	pop	r5
 78c:	4f 90       	pop	r4
 78e:	3f 90       	pop	r3
 790:	2f 90       	pop	r2
 792:	08 95       	ret

00000794 <strnlen_P>:
 794:	fc 01       	movw	r30, r24
 796:	05 90       	lpm	r0, Z+
 798:	61 50       	subi	r22, 0x01	; 1
 79a:	70 40       	sbci	r23, 0x00	; 0
 79c:	01 10       	cpse	r0, r1
 79e:	d8 f7       	brcc	.-10     	; 0x796 <strnlen_P+0x2>
 7a0:	80 95       	com	r24
 7a2:	90 95       	com	r25
 7a4:	8e 0f       	add	r24, r30
 7a6:	9f 1f       	adc	r25, r31
 7a8:	08 95       	ret

000007aa <strnlen>:
 7aa:	fc 01       	movw	r30, r24
 7ac:	61 50       	subi	r22, 0x01	; 1
 7ae:	70 40       	sbci	r23, 0x00	; 0
 7b0:	01 90       	ld	r0, Z+
 7b2:	01 10       	cpse	r0, r1
 7b4:	d8 f7       	brcc	.-10     	; 0x7ac <strnlen+0x2>
 7b6:	80 95       	com	r24
 7b8:	90 95       	com	r25
 7ba:	8e 0f       	add	r24, r30
 7bc:	9f 1f       	adc	r25, r31
 7be:	08 95       	ret

000007c0 <fputc>:
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	fb 01       	movw	r30, r22
 7ca:	23 81       	ldd	r18, Z+3	; 0x03
 7cc:	21 fd       	sbrc	r18, 1
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <fputc+0x16>
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	9f ef       	ldi	r25, 0xFF	; 255
 7d4:	2c c0       	rjmp	.+88     	; 0x82e <fputc+0x6e>
 7d6:	22 ff       	sbrs	r18, 2
 7d8:	16 c0       	rjmp	.+44     	; 0x806 <fputc+0x46>
 7da:	46 81       	ldd	r20, Z+6	; 0x06
 7dc:	57 81       	ldd	r21, Z+7	; 0x07
 7de:	24 81       	ldd	r18, Z+4	; 0x04
 7e0:	35 81       	ldd	r19, Z+5	; 0x05
 7e2:	42 17       	cp	r20, r18
 7e4:	53 07       	cpc	r21, r19
 7e6:	44 f4       	brge	.+16     	; 0x7f8 <fputc+0x38>
 7e8:	a0 81       	ld	r26, Z
 7ea:	b1 81       	ldd	r27, Z+1	; 0x01
 7ec:	9d 01       	movw	r18, r26
 7ee:	2f 5f       	subi	r18, 0xFF	; 255
 7f0:	3f 4f       	sbci	r19, 0xFF	; 255
 7f2:	31 83       	std	Z+1, r19	; 0x01
 7f4:	20 83       	st	Z, r18
 7f6:	8c 93       	st	X, r24
 7f8:	26 81       	ldd	r18, Z+6	; 0x06
 7fa:	37 81       	ldd	r19, Z+7	; 0x07
 7fc:	2f 5f       	subi	r18, 0xFF	; 255
 7fe:	3f 4f       	sbci	r19, 0xFF	; 255
 800:	37 83       	std	Z+7, r19	; 0x07
 802:	26 83       	std	Z+6, r18	; 0x06
 804:	14 c0       	rjmp	.+40     	; 0x82e <fputc+0x6e>
 806:	8b 01       	movw	r16, r22
 808:	ec 01       	movw	r28, r24
 80a:	fb 01       	movw	r30, r22
 80c:	00 84       	ldd	r0, Z+8	; 0x08
 80e:	f1 85       	ldd	r31, Z+9	; 0x09
 810:	e0 2d       	mov	r30, r0
 812:	09 95       	icall
 814:	89 2b       	or	r24, r25
 816:	e1 f6       	brne	.-72     	; 0x7d0 <fputc+0x10>
 818:	d8 01       	movw	r26, r16
 81a:	16 96       	adiw	r26, 0x06	; 6
 81c:	8d 91       	ld	r24, X+
 81e:	9c 91       	ld	r25, X
 820:	17 97       	sbiw	r26, 0x07	; 7
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	17 96       	adiw	r26, 0x07	; 7
 826:	9c 93       	st	X, r25
 828:	8e 93       	st	-X, r24
 82a:	16 97       	sbiw	r26, 0x06	; 6
 82c:	ce 01       	movw	r24, r28
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	08 95       	ret

00000838 <__ultoa_invert>:
 838:	fa 01       	movw	r30, r20
 83a:	aa 27       	eor	r26, r26
 83c:	28 30       	cpi	r18, 0x08	; 8
 83e:	51 f1       	breq	.+84     	; 0x894 <__ultoa_invert+0x5c>
 840:	20 31       	cpi	r18, 0x10	; 16
 842:	81 f1       	breq	.+96     	; 0x8a4 <__ultoa_invert+0x6c>
 844:	e8 94       	clt
 846:	6f 93       	push	r22
 848:	6e 7f       	andi	r22, 0xFE	; 254
 84a:	6e 5f       	subi	r22, 0xFE	; 254
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	af 4f       	sbci	r26, 0xFF	; 255
 854:	b1 e0       	ldi	r27, 0x01	; 1
 856:	3e d0       	rcall	.+124    	; 0x8d4 <__ultoa_invert+0x9c>
 858:	b4 e0       	ldi	r27, 0x04	; 4
 85a:	3c d0       	rcall	.+120    	; 0x8d4 <__ultoa_invert+0x9c>
 85c:	67 0f       	add	r22, r23
 85e:	78 1f       	adc	r23, r24
 860:	89 1f       	adc	r24, r25
 862:	9a 1f       	adc	r25, r26
 864:	a1 1d       	adc	r26, r1
 866:	68 0f       	add	r22, r24
 868:	79 1f       	adc	r23, r25
 86a:	8a 1f       	adc	r24, r26
 86c:	91 1d       	adc	r25, r1
 86e:	a1 1d       	adc	r26, r1
 870:	6a 0f       	add	r22, r26
 872:	71 1d       	adc	r23, r1
 874:	81 1d       	adc	r24, r1
 876:	91 1d       	adc	r25, r1
 878:	a1 1d       	adc	r26, r1
 87a:	20 d0       	rcall	.+64     	; 0x8bc <__ultoa_invert+0x84>
 87c:	09 f4       	brne	.+2      	; 0x880 <__ultoa_invert+0x48>
 87e:	68 94       	set
 880:	3f 91       	pop	r19
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	26 9f       	mul	r18, r22
 886:	11 24       	eor	r1, r1
 888:	30 19       	sub	r19, r0
 88a:	30 5d       	subi	r19, 0xD0	; 208
 88c:	31 93       	st	Z+, r19
 88e:	de f6       	brtc	.-74     	; 0x846 <__ultoa_invert+0xe>
 890:	cf 01       	movw	r24, r30
 892:	08 95       	ret
 894:	46 2f       	mov	r20, r22
 896:	47 70       	andi	r20, 0x07	; 7
 898:	40 5d       	subi	r20, 0xD0	; 208
 89a:	41 93       	st	Z+, r20
 89c:	b3 e0       	ldi	r27, 0x03	; 3
 89e:	0f d0       	rcall	.+30     	; 0x8be <__ultoa_invert+0x86>
 8a0:	c9 f7       	brne	.-14     	; 0x894 <__ultoa_invert+0x5c>
 8a2:	f6 cf       	rjmp	.-20     	; 0x890 <__ultoa_invert+0x58>
 8a4:	46 2f       	mov	r20, r22
 8a6:	4f 70       	andi	r20, 0x0F	; 15
 8a8:	40 5d       	subi	r20, 0xD0	; 208
 8aa:	4a 33       	cpi	r20, 0x3A	; 58
 8ac:	18 f0       	brcs	.+6      	; 0x8b4 <__ultoa_invert+0x7c>
 8ae:	49 5d       	subi	r20, 0xD9	; 217
 8b0:	31 fd       	sbrc	r19, 1
 8b2:	40 52       	subi	r20, 0x20	; 32
 8b4:	41 93       	st	Z+, r20
 8b6:	02 d0       	rcall	.+4      	; 0x8bc <__ultoa_invert+0x84>
 8b8:	a9 f7       	brne	.-22     	; 0x8a4 <__ultoa_invert+0x6c>
 8ba:	ea cf       	rjmp	.-44     	; 0x890 <__ultoa_invert+0x58>
 8bc:	b4 e0       	ldi	r27, 0x04	; 4
 8be:	a6 95       	lsr	r26
 8c0:	97 95       	ror	r25
 8c2:	87 95       	ror	r24
 8c4:	77 95       	ror	r23
 8c6:	67 95       	ror	r22
 8c8:	ba 95       	dec	r27
 8ca:	c9 f7       	brne	.-14     	; 0x8be <__ultoa_invert+0x86>
 8cc:	00 97       	sbiw	r24, 0x00	; 0
 8ce:	61 05       	cpc	r22, r1
 8d0:	71 05       	cpc	r23, r1
 8d2:	08 95       	ret
 8d4:	9b 01       	movw	r18, r22
 8d6:	ac 01       	movw	r20, r24
 8d8:	0a 2e       	mov	r0, r26
 8da:	06 94       	lsr	r0
 8dc:	57 95       	ror	r21
 8de:	47 95       	ror	r20
 8e0:	37 95       	ror	r19
 8e2:	27 95       	ror	r18
 8e4:	ba 95       	dec	r27
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__ultoa_invert+0xa2>
 8e8:	62 0f       	add	r22, r18
 8ea:	73 1f       	adc	r23, r19
 8ec:	84 1f       	adc	r24, r20
 8ee:	95 1f       	adc	r25, r21
 8f0:	a0 1d       	adc	r26, r0
 8f2:	08 95       	ret

000008f4 <_exit>:
 8f4:	f8 94       	cli

000008f6 <__stop_program>:
 8f6:	ff cf       	rjmp	.-2      	; 0x8f6 <__stop_program>
