
opdracht 4.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000008e8  0000095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f27  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a8d  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006eb  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056a  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000463  00000000  00000000  00003276  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000036d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	36 c1       	rjmp	.+620    	; 0x292 <__vector_9>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0c d1       	rcall	.+536    	; 0x2cc <main>
  b4:	17 c4       	rjmp	.+2094   	; 0x8e4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <sbi_porta>:
void cbi_portc(int index){
	PORTC &= ~(1<<index);
}

void sbi_porta(int index){
	PORTA |= (1<<index);
  b8:	9b b3       	in	r25, 0x1b	; 27
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <sbi_porta+0xc>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <sbi_porta+0x8>
  c8:	29 2b       	or	r18, r25
  ca:	2b bb       	out	0x1b, r18	; 27
  cc:	08 95       	ret

000000ce <cbi_porta>:
}


void cbi_porta(int index){
	PORTA &= ~(1<<index);
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <cbi_porta+0xc>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <cbi_porta+0x8>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	2b bb       	out	0x1b, r18	; 27
  e4:	08 95       	ret

000000e6 <lcd_strobe_lcd_e>:
	lcd_write_command (0x80);						//Cursor terug naar start
}

void lcd_strobe_lcd_e(void) {
	
	sbi_porta(LCD_E);	// E high
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	e6 df       	rcall	.-52     	; 0xb8 <sbi_porta>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_strobe_lcd_e+0xa>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_strobe_lcd_e+0x10>
  f6:	00 00       	nop
	_delay_ms(1);
	cbi_porta(LCD_E);  	// E low
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e8 df       	rcall	.-48     	; 0xce <cbi_porta>
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_strobe_lcd_e+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_strobe_lcd_e+0x22>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <lcd_write_character>:
	char str[length + 1];
	snprintf(str, length + 1, "%d", number);
	lcd_write_string(str);
}

void lcd_write_character(unsigned char byte){
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
	
	
	//upper nibble
	PORTC = byte;
 110:	85 bb       	out	0x15, r24	; 21
	sbi_porta(LCD_RS);
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	d0 df       	rcall	.-96     	; 0xb8 <sbi_porta>
	lcd_strobe_lcd_e();
 118:	e6 df       	rcall	.-52     	; 0xe6 <lcd_strobe_lcd_e>
 11a:	c2 95       	swap	r28
	
	//lower nibble
	PORTC = (byte<<4);
 11c:	c0 7f       	andi	r28, 0xF0	; 240
 11e:	c5 bb       	out	0x15, r28	; 21
 120:	84 e0       	ldi	r24, 0x04	; 4
	sbi_porta(LCD_RS);
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	c9 df       	rcall	.-110    	; 0xb8 <sbi_porta>
	lcd_strobe_lcd_e();
 126:	df df       	rcall	.-66     	; 0xe6 <lcd_strobe_lcd_e>
 128:	cf 91       	pop	r28
	
}
 12a:	08 95       	ret

0000012c <lcd_write_command>:
 12c:	cf 93       	push	r28

void lcd_write_command(unsigned char byte){
 12e:	c8 2f       	mov	r28, r24
	
	//upper nibble
	PORTC = byte;
 130:	85 bb       	out	0x15, r24	; 21
	cbi_porta(LCD_RS);
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	cb df       	rcall	.-106    	; 0xce <cbi_porta>
	lcd_strobe_lcd_e();
 138:	d6 df       	rcall	.-84     	; 0xe6 <lcd_strobe_lcd_e>
 13a:	c2 95       	swap	r28
	
	//lower nibble
	PORTC = (byte<<4);
 13c:	c0 7f       	andi	r28, 0xF0	; 240
 13e:	c5 bb       	out	0x15, r28	; 21
 140:	84 e0       	ldi	r24, 0x04	; 4
	cbi_porta(LCD_RS);
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	c4 df       	rcall	.-120    	; 0xce <cbi_porta>
	lcd_strobe_lcd_e();
 146:	cf df       	rcall	.-98     	; 0xe6 <lcd_strobe_lcd_e>
 148:	cf 91       	pop	r28

}
 14a:	08 95       	ret

0000014c <lcd_clear>:
 14c:	81 e0       	ldi	r24, 0x01	; 1
#include "lcd_control.h"

void _delay_ms(double __ms);

void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 14e:	ee df       	rcall	.-36     	; 0x12c <lcd_write_command>
 150:	83 ef       	ldi	r24, 0xF3	; 243
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_clear+0x8>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_clear+0xe>
 15a:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	e6 cf       	rjmp	.-52     	; 0x12c <lcd_write_command>
 160:	08 95       	ret

00000162 <init_4bits_mode>:

void cbi_porta(int index){
	PORTA &= ~(1<<index);
}

void init_4bits_mode(void) {
 162:	cf 93       	push	r28
	
	// PORTC output mode and all low (also E and RS pin)
	
	// Init I/O
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 168:	85 bb       	out	0x15, r24	; 21
	
	DDRA = 0xFF;
 16a:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 16c:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 16e:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = 0x20;	// function for 4-bit 1 row
 170:	c0 e2       	ldi	r28, 0x20	; 32
 172:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 174:	b8 df       	rcall	.-144    	; 0xe6 <lcd_strobe_lcd_e>

	PORTC = 0x20;   // function high nibble 4-bit 2 row
	lcd_strobe_lcd_e();
 176:	c5 bb       	out	0x15, r28	; 21
 178:	b6 df       	rcall	.-148    	; 0xe6 <lcd_strobe_lcd_e>
	PORTC = 0x80;	// function low nibble 4-bit 2 row
 17a:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
 17c:	85 bb       	out	0x15, r24	; 21

	PORTC = 0x00;   // function high nibble turn on visible blinking-block cursor
 17e:	b3 df       	rcall	.-154    	; 0xe6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 180:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;   // function low nibble turn on visible blinking-block cursor
 182:	b1 df       	rcall	.-158    	; 0xe6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 184:	80 ef       	ldi	r24, 0xF0	; 240

	PORTC = 0x00;   // Entry mode set high nibble
 186:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 188:	ae df       	rcall	.-164    	; 0xe6 <lcd_strobe_lcd_e>
	PORTC = 0x60;	// Entry mode set low nibble
 18a:	15 ba       	out	0x15, r1	; 21
 18c:	ac df       	rcall	.-168    	; 0xe6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 18e:	80 e6       	ldi	r24, 0x60	; 96
 190:	85 bb       	out	0x15, r24	; 21
	
	// return home
	lcd_write_command(0x02);
 192:	a9 df       	rcall	.-174    	; 0xe6 <lcd_strobe_lcd_e>
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	ca df       	rcall	.-108    	; 0x12c <lcd_write_command>
	lcd_strobe_lcd_e();
 198:	a6 df       	rcall	.-180    	; 0xe6 <lcd_strobe_lcd_e>
 19a:	cf 91       	pop	r28
}
 19c:	08 95       	ret

0000019e <lcd_write_string>:
 19e:	cf 93       	push	r28
	cbi_porta(LCD_RS);
	lcd_strobe_lcd_e();

}

void lcd_write_string(const char *str) {
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
	
	for(;*str; str++){
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <lcd_write_string+0xc>
		lcd_write_character(*str);
 1a6:	b2 df       	rcall	.-156    	; 0x10c <lcd_write_character>

}

void lcd_write_string(const char *str) {
	
	for(;*str; str++){
 1a8:	21 96       	adiw	r28, 0x01	; 1
 1aa:	88 81       	ld	r24, Y
 1ac:	81 11       	cpse	r24, r1
 1ae:	fb cf       	rjmp	.-10     	; 0x1a6 <lcd_write_string+0x8>
		lcd_write_character(*str);
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd_write_integer>:
	// return home
	lcd_write_command(0x02);
	lcd_strobe_lcd_e();
}

void lcd_write_integer(int number){
 1b6:	af 92       	push	r10
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	6c 01       	movw	r12, r24
	int length = snprintf(NULL, 0, "%d", number + 1);
	char str[length + 1];
	snprintf(str, length + 1, "%d", number);
	lcd_write_string(str);
}
 1d0:	ad b6       	in	r10, 0x3d	; 61
 1d2:	be b6       	in	r11, 0x3e	; 62
	lcd_write_command(0x02);
	lcd_strobe_lcd_e();
}

void lcd_write_integer(int number){
	int length = snprintf(NULL, 0, "%d", number + 1);
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	9f 93       	push	r25
 1d8:	8f 93       	push	r24
 1da:	0f 2e       	mov	r0, r31
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ef 2e       	mov	r14, r31
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	ff 2e       	mov	r15, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	ff 92       	push	r15
 1e8:	ef 92       	push	r14
 1ea:	1f 92       	push	r1
 1ec:	1f 92       	push	r1
 1ee:	1f 92       	push	r1
 1f0:	1f 92       	push	r1
 1f2:	8f d0       	rcall	.+286    	; 0x312 <snprintf>
	char str[length + 1];
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	2d b7       	in	r18, 0x3d	; 61
 1f8:	3e b7       	in	r19, 0x3e	; 62
 1fa:	28 5f       	subi	r18, 0xF8	; 248
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	3e bf       	out	0x3e, r19	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	2d bf       	out	0x3d, r18	; 61
 208:	28 1b       	sub	r18, r24
 20a:	39 0b       	sbc	r19, r25
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	3e bf       	out	0x3e, r19	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	2d bf       	out	0x3d, r18	; 61
 216:	0d b7       	in	r16, 0x3d	; 61
 218:	1e b7       	in	r17, 0x3e	; 62
 21a:	0f 5f       	subi	r16, 0xFF	; 255
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
	snprintf(str, length + 1, "%d", number);
 21e:	df 92       	push	r13
 220:	cf 92       	push	r12
 222:	ff 92       	push	r15
 224:	ef 92       	push	r14
 226:	9f 93       	push	r25
 228:	8f 93       	push	r24
 22a:	1f 93       	push	r17
 22c:	0f 93       	push	r16
 22e:	71 d0       	rcall	.+226    	; 0x312 <snprintf>
	lcd_write_string(str);
 230:	80 2f       	mov	r24, r16
 232:	91 2f       	mov	r25, r17
 234:	b4 df       	rcall	.-152    	; 0x19e <lcd_write_string>
}
 236:	8d b7       	in	r24, 0x3d	; 61
 238:	9e b7       	in	r25, 0x3e	; 62
 23a:	08 96       	adiw	r24, 0x08	; 8
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	9e bf       	out	0x3e, r25	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	8d bf       	out	0x3d, r24	; 61
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	be be       	out	0x3e, r11	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	ad be       	out	0x3d, r10	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
 260:	bf 90       	pop	r11
 262:	af 90       	pop	r10
 264:	08 95       	ret

00000266 <wait>:
	}
}

void adcInit(){
	ADMUX = 0b11100000; // internal reference: 2.56V and SEI on ADC0 and left-adjusted.
	ADCSRA = 0b10000110; // enable ADC. No free-run. Clock 64 D-factor.
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	08 c0       	rjmp	.+16     	; 0x27c <wait+0x16>
 26c:	ef ec       	ldi	r30, 0xCF	; 207
 26e:	f7 e0       	ldi	r31, 0x07	; 7
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <wait+0xa>
 274:	00 c0       	rjmp	.+0      	; 0x276 <wait+0x10>
 276:	00 00       	nop
 278:	2f 5f       	subi	r18, 0xFF	; 255
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
 27c:	28 17       	cp	r18, r24
 27e:	39 07       	cpc	r19, r25
 280:	ac f3       	brlt	.-22     	; 0x26c <wait+0x6>
 282:	08 95       	ret

00000284 <timer2Init>:
}

void timer2Init( void ) {
	TIMSK |= BIT(7);		// T2 compare match interrupt enable
 284:	87 b7       	in	r24, 0x37	; 55
 286:	80 68       	ori	r24, 0x80	; 128
 288:	87 bf       	out	0x37, r24	; 55
	sei();					// turn_on interrupt all
 28a:	78 94       	sei
	TCCR2 = 0b00000011;		// Initialize T2: timer, pre-scaler=64
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	85 bd       	out	0x25, r24	; 37
 290:	08 95       	ret

00000292 <__vector_9>:
}

ISR( TIMER2_COMP_vect ) {
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
	ADCSRA |= BIT(6);
 29e:	86 b1       	in	r24, 0x06	; 6
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	86 b9       	out	0x06, r24	; 6
}
 2a4:	8f 91       	pop	r24
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <getADCValue>:

int getADCValue(){
	int value = 0;
	value = ADCH;
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	90 e0       	ldi	r25, 0x00	; 0
	value <<= 2;
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
	value += (ADCL >> 6);
 2bc:	24 b1       	in	r18, 0x04	; 4
 2be:	22 95       	swap	r18
 2c0:	26 95       	lsr	r18
 2c2:	26 95       	lsr	r18
 2c4:	23 70       	andi	r18, 0x03	; 3
	return value;
}
 2c6:	82 0f       	add	r24, r18
 2c8:	91 1d       	adc	r25, r1
 2ca:	08 95       	ret

000002cc <main>:

int main(void)
{
	int previousValue = 0;
    /* Replace with your application code */
	DDRF = 0x00; // set port F input.
 2cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRE = 0xFF; // all port A output.
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	82 b9       	out	0x02, r24	; 2
	
	
	init_4bits_mode();
 2d4:	46 df       	rcall	.-372    	; 0x162 <init_4bits_mode>
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0xe>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x14>
	_delay_ms(10);
	lcd_clear();
 2e0:	00 00       	nop

	timer2Init();
 2e2:	34 df       	rcall	.-408    	; 0x14c <lcd_clear>
 2e4:	cf df       	rcall	.-98     	; 0x284 <timer2Init>



int main(void)
{
	int previousValue = 0;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
	lcd_clear();

	timer2Init();
    while (1) 
    {
		PORTD = ADCH;
 2ea:	25 b1       	in	r18, 0x05	; 5
 2ec:	22 bb       	out	0x12, r18	; 18
		PORTE = ADCL;
 2ee:	24 b1       	in	r18, 0x04	; 4
 2f0:	23 b9       	out	0x03, r18	; 3
		
		int number = ADCH;
 2f2:	c5 b1       	in	r28, 0x05	; 5
 2f4:	d0 e0       	ldi	r29, 0x00	; 0

		if(previousValue != number){
 2f6:	8c 17       	cp	r24, r28
 2f8:	9d 07       	cpc	r25, r29
			
			lcd_clear();
 2fa:	31 f0       	breq	.+12     	; 0x308 <main+0x3c>
			
			wait(10);
 2fc:	27 df       	rcall	.-434    	; 0x14c <lcd_clear>
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	90 e0       	ldi	r25, 0x00	; 0
			
			lcd_write_integer((getADCValue()));
 302:	b1 df       	rcall	.-158    	; 0x266 <wait>
 304:	d5 df       	rcall	.-86     	; 0x2b0 <getADCValue>
 306:	57 df       	rcall	.-338    	; 0x1b6 <lcd_write_integer>
 308:	84 e6       	ldi	r24, 0x64	; 100
		}
		
		previousValue = number;
		
		wait(100);
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ac df       	rcall	.-168    	; 0x266 <wait>
 30e:	ce 01       	movw	r24, r28
 310:	ec cf       	rjmp	.-40     	; 0x2ea <main+0x1e>

00000312 <snprintf>:
			wait(10);
			
			lcd_write_integer((getADCValue()));
		}
		
		previousValue = number;
 312:	0f 93       	push	r16
		
		wait(100);
    }
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	2e 97       	sbiw	r28, 0x0e	; 14
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	0d 89       	ldd	r16, Y+21	; 0x15
 32c:	1e 89       	ldd	r17, Y+22	; 0x16
 32e:	8f 89       	ldd	r24, Y+23	; 0x17
 330:	98 8d       	ldd	r25, Y+24	; 0x18
 332:	26 e0       	ldi	r18, 0x06	; 6
 334:	2c 83       	std	Y+4, r18	; 0x04
 336:	1a 83       	std	Y+2, r17	; 0x02
 338:	09 83       	std	Y+1, r16	; 0x01
 33a:	97 ff       	sbrs	r25, 7
 33c:	02 c0       	rjmp	.+4      	; 0x342 <snprintf+0x30>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e8       	ldi	r25, 0x80	; 128
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	9e 83       	std	Y+6, r25	; 0x06
 346:	8d 83       	std	Y+5, r24	; 0x05
 348:	ae 01       	movw	r20, r28
 34a:	45 5e       	subi	r20, 0xE5	; 229
 34c:	5f 4f       	sbci	r21, 0xFF	; 255
 34e:	69 8d       	ldd	r22, Y+25	; 0x19
 350:	7a 8d       	ldd	r23, Y+26	; 0x1a
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	19 d0       	rcall	.+50     	; 0x38a <vfprintf>
 358:	4d 81       	ldd	r20, Y+5	; 0x05
 35a:	5e 81       	ldd	r21, Y+6	; 0x06
 35c:	57 fd       	sbrc	r21, 7
 35e:	0a c0       	rjmp	.+20     	; 0x374 <snprintf+0x62>
 360:	2f 81       	ldd	r18, Y+7	; 0x07
 362:	38 85       	ldd	r19, Y+8	; 0x08
 364:	42 17       	cp	r20, r18
 366:	53 07       	cpc	r21, r19
 368:	0c f4       	brge	.+2      	; 0x36c <snprintf+0x5a>
 36a:	9a 01       	movw	r18, r20
 36c:	f8 01       	movw	r30, r16
 36e:	e2 0f       	add	r30, r18
 370:	f3 1f       	adc	r31, r19
 372:	10 82       	st	Z, r1
 374:	2e 96       	adiw	r28, 0x0e	; 14
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	08 95       	ret

0000038a <vfprintf>:
 38a:	2f 92       	push	r2
 38c:	3f 92       	push	r3
 38e:	4f 92       	push	r4
 390:	5f 92       	push	r5
 392:	6f 92       	push	r6
 394:	7f 92       	push	r7
 396:	8f 92       	push	r8
 398:	9f 92       	push	r9
 39a:	af 92       	push	r10
 39c:	bf 92       	push	r11
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	2b 97       	sbiw	r28, 0x0b	; 11
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	6c 01       	movw	r12, r24
 3c0:	7b 01       	movw	r14, r22
 3c2:	8a 01       	movw	r16, r20
 3c4:	fc 01       	movw	r30, r24
 3c6:	17 82       	std	Z+7, r1	; 0x07
 3c8:	16 82       	std	Z+6, r1	; 0x06
 3ca:	83 81       	ldd	r24, Z+3	; 0x03
 3cc:	81 ff       	sbrs	r24, 1
 3ce:	bf c1       	rjmp	.+894    	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	3c 01       	movw	r6, r24
 3d6:	f6 01       	movw	r30, r12
 3d8:	93 81       	ldd	r25, Z+3	; 0x03
 3da:	f7 01       	movw	r30, r14
 3dc:	93 fd       	sbrc	r25, 3
 3de:	85 91       	lpm	r24, Z+
 3e0:	93 ff       	sbrs	r25, 3
 3e2:	81 91       	ld	r24, Z+
 3e4:	7f 01       	movw	r14, r30
 3e6:	88 23       	and	r24, r24
 3e8:	09 f4       	brne	.+2      	; 0x3ec <vfprintf+0x62>
 3ea:	ad c1       	rjmp	.+858    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 3ec:	85 32       	cpi	r24, 0x25	; 37
 3ee:	39 f4       	brne	.+14     	; 0x3fe <vfprintf+0x74>
 3f0:	93 fd       	sbrc	r25, 3
 3f2:	85 91       	lpm	r24, Z+
 3f4:	93 ff       	sbrs	r25, 3
 3f6:	81 91       	ld	r24, Z+
 3f8:	7f 01       	movw	r14, r30
 3fa:	85 32       	cpi	r24, 0x25	; 37
 3fc:	21 f4       	brne	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	b6 01       	movw	r22, r12
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	d6 d1       	rcall	.+940    	; 0x7b0 <fputc>
 404:	e8 cf       	rjmp	.-48     	; 0x3d6 <vfprintf+0x4c>
 406:	91 2c       	mov	r9, r1
 408:	21 2c       	mov	r2, r1
 40a:	31 2c       	mov	r3, r1
 40c:	ff e1       	ldi	r31, 0x1F	; 31
 40e:	f3 15       	cp	r31, r3
 410:	d8 f0       	brcs	.+54     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 412:	8b 32       	cpi	r24, 0x2B	; 43
 414:	79 f0       	breq	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 416:	38 f4       	brcc	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	80 32       	cpi	r24, 0x20	; 32
 41a:	79 f0       	breq	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41c:	83 32       	cpi	r24, 0x23	; 35
 41e:	a1 f4       	brne	.+40     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 420:	23 2d       	mov	r18, r3
 422:	20 61       	ori	r18, 0x10	; 16
 424:	1d c0       	rjmp	.+58     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 426:	8d 32       	cpi	r24, 0x2D	; 45
 428:	61 f0       	breq	.+24     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 42a:	80 33       	cpi	r24, 0x30	; 48
 42c:	69 f4       	brne	.+26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 42e:	23 2d       	mov	r18, r3
 430:	21 60       	ori	r18, 0x01	; 1
 432:	16 c0       	rjmp	.+44     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 434:	83 2d       	mov	r24, r3
 436:	82 60       	ori	r24, 0x02	; 2
 438:	38 2e       	mov	r3, r24
 43a:	e3 2d       	mov	r30, r3
 43c:	e4 60       	ori	r30, 0x04	; 4
 43e:	3e 2e       	mov	r3, r30
 440:	2a c0       	rjmp	.+84     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 442:	f3 2d       	mov	r31, r3
 444:	f8 60       	ori	r31, 0x08	; 8
 446:	1d c0       	rjmp	.+58     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 448:	37 fc       	sbrc	r3, 7
 44a:	2d c0       	rjmp	.+90     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 44c:	20 ed       	ldi	r18, 0xD0	; 208
 44e:	28 0f       	add	r18, r24
 450:	2a 30       	cpi	r18, 0x0A	; 10
 452:	40 f0       	brcs	.+16     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 454:	8e 32       	cpi	r24, 0x2E	; 46
 456:	b9 f4       	brne	.+46     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 458:	36 fc       	sbrc	r3, 6
 45a:	75 c1       	rjmp	.+746    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 45c:	23 2d       	mov	r18, r3
 45e:	20 64       	ori	r18, 0x40	; 64
 460:	32 2e       	mov	r3, r18
 462:	19 c0       	rjmp	.+50     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 464:	36 fe       	sbrs	r3, 6
 466:	06 c0       	rjmp	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 468:	8a e0       	ldi	r24, 0x0A	; 10
 46a:	98 9e       	mul	r9, r24
 46c:	20 0d       	add	r18, r0
 46e:	11 24       	eor	r1, r1
 470:	92 2e       	mov	r9, r18
 472:	11 c0       	rjmp	.+34     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 474:	ea e0       	ldi	r30, 0x0A	; 10
 476:	2e 9e       	mul	r2, r30
 478:	20 0d       	add	r18, r0
 47a:	11 24       	eor	r1, r1
 47c:	22 2e       	mov	r2, r18
 47e:	f3 2d       	mov	r31, r3
 480:	f0 62       	ori	r31, 0x20	; 32
 482:	3f 2e       	mov	r3, r31
 484:	08 c0       	rjmp	.+16     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 486:	8c 36       	cpi	r24, 0x6C	; 108
 488:	21 f4       	brne	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48a:	83 2d       	mov	r24, r3
 48c:	80 68       	ori	r24, 0x80	; 128
 48e:	38 2e       	mov	r3, r24
 490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 492:	88 36       	cpi	r24, 0x68	; 104
 494:	41 f4       	brne	.+16     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 496:	f7 01       	movw	r30, r14
 498:	93 fd       	sbrc	r25, 3
 49a:	85 91       	lpm	r24, Z+
 49c:	93 ff       	sbrs	r25, 3
 49e:	81 91       	ld	r24, Z+
 4a0:	7f 01       	movw	r14, r30
 4a2:	81 11       	cpse	r24, r1
 4a4:	b3 cf       	rjmp	.-154    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 4a6:	98 2f       	mov	r25, r24
 4a8:	9f 7d       	andi	r25, 0xDF	; 223
 4aa:	95 54       	subi	r25, 0x45	; 69
 4ac:	93 30       	cpi	r25, 0x03	; 3
 4ae:	28 f4       	brcc	.+10     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b0:	0c 5f       	subi	r16, 0xFC	; 252
 4b2:	1f 4f       	sbci	r17, 0xFF	; 255
 4b4:	9f e3       	ldi	r25, 0x3F	; 63
 4b6:	99 83       	std	Y+1, r25	; 0x01
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ba:	83 36       	cpi	r24, 0x63	; 99
 4bc:	31 f0       	breq	.+12     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4be:	83 37       	cpi	r24, 0x73	; 115
 4c0:	71 f0       	breq	.+28     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c2:	83 35       	cpi	r24, 0x53	; 83
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c6:	55 c0       	rjmp	.+170    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 4c8:	20 c0       	rjmp	.+64     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4ca:	f8 01       	movw	r30, r16
 4cc:	80 81       	ld	r24, Z
 4ce:	89 83       	std	Y+1, r24	; 0x01
 4d0:	0e 5f       	subi	r16, 0xFE	; 254
 4d2:	1f 4f       	sbci	r17, 0xFF	; 255
 4d4:	88 24       	eor	r8, r8
 4d6:	83 94       	inc	r8
 4d8:	91 2c       	mov	r9, r1
 4da:	53 01       	movw	r10, r6
 4dc:	12 c0       	rjmp	.+36     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4de:	28 01       	movw	r4, r16
 4e0:	f2 e0       	ldi	r31, 0x02	; 2
 4e2:	4f 0e       	add	r4, r31
 4e4:	51 1c       	adc	r5, r1
 4e6:	f8 01       	movw	r30, r16
 4e8:	a0 80       	ld	r10, Z
 4ea:	b1 80       	ldd	r11, Z+1	; 0x01
 4ec:	36 fe       	sbrs	r3, 6
 4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f0:	69 2d       	mov	r22, r9
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f6:	6f ef       	ldi	r22, 0xFF	; 255
 4f8:	7f ef       	ldi	r23, 0xFF	; 255
 4fa:	c5 01       	movw	r24, r10
 4fc:	4e d1       	rcall	.+668    	; 0x79a <strnlen>
 4fe:	4c 01       	movw	r8, r24
 500:	82 01       	movw	r16, r4
 502:	f3 2d       	mov	r31, r3
 504:	ff 77       	andi	r31, 0x7F	; 127
 506:	3f 2e       	mov	r3, r31
 508:	15 c0       	rjmp	.+42     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 50a:	28 01       	movw	r4, r16
 50c:	22 e0       	ldi	r18, 0x02	; 2
 50e:	42 0e       	add	r4, r18
 510:	51 1c       	adc	r5, r1
 512:	f8 01       	movw	r30, r16
 514:	a0 80       	ld	r10, Z
 516:	b1 80       	ldd	r11, Z+1	; 0x01
 518:	36 fe       	sbrs	r3, 6
 51a:	03 c0       	rjmp	.+6      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 51c:	69 2d       	mov	r22, r9
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 522:	6f ef       	ldi	r22, 0xFF	; 255
 524:	7f ef       	ldi	r23, 0xFF	; 255
 526:	c5 01       	movw	r24, r10
 528:	2d d1       	rcall	.+602    	; 0x784 <strnlen_P>
 52a:	4c 01       	movw	r8, r24
 52c:	f3 2d       	mov	r31, r3
 52e:	f0 68       	ori	r31, 0x80	; 128
 530:	3f 2e       	mov	r3, r31
 532:	82 01       	movw	r16, r4
 534:	33 fc       	sbrc	r3, 3
 536:	19 c0       	rjmp	.+50     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 538:	82 2d       	mov	r24, r2
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	88 16       	cp	r8, r24
 53e:	99 06       	cpc	r9, r25
 540:	a0 f4       	brcc	.+40     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 542:	b6 01       	movw	r22, r12
 544:	80 e2       	ldi	r24, 0x20	; 32
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	33 d1       	rcall	.+614    	; 0x7b0 <fputc>
 54a:	2a 94       	dec	r2
 54c:	f5 cf       	rjmp	.-22     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 54e:	f5 01       	movw	r30, r10
 550:	37 fc       	sbrc	r3, 7
 552:	85 91       	lpm	r24, Z+
 554:	37 fe       	sbrs	r3, 7
 556:	81 91       	ld	r24, Z+
 558:	5f 01       	movw	r10, r30
 55a:	b6 01       	movw	r22, r12
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	28 d1       	rcall	.+592    	; 0x7b0 <fputc>
 560:	21 10       	cpse	r2, r1
 562:	2a 94       	dec	r2
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	82 1a       	sub	r8, r18
 568:	91 08       	sbc	r9, r1
 56a:	81 14       	cp	r8, r1
 56c:	91 04       	cpc	r9, r1
 56e:	79 f7       	brne	.-34     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 570:	e1 c0       	rjmp	.+450    	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 572:	84 36       	cpi	r24, 0x64	; 100
 574:	11 f0       	breq	.+4      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 576:	89 36       	cpi	r24, 0x69	; 105
 578:	39 f5       	brne	.+78     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 57a:	f8 01       	movw	r30, r16
 57c:	37 fe       	sbrs	r3, 7
 57e:	07 c0       	rjmp	.+14     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 580:	60 81       	ld	r22, Z
 582:	71 81       	ldd	r23, Z+1	; 0x01
 584:	82 81       	ldd	r24, Z+2	; 0x02
 586:	93 81       	ldd	r25, Z+3	; 0x03
 588:	0c 5f       	subi	r16, 0xFC	; 252
 58a:	1f 4f       	sbci	r17, 0xFF	; 255
 58c:	08 c0       	rjmp	.+16     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 58e:	60 81       	ld	r22, Z
 590:	71 81       	ldd	r23, Z+1	; 0x01
 592:	07 2e       	mov	r0, r23
 594:	00 0c       	add	r0, r0
 596:	88 0b       	sbc	r24, r24
 598:	99 0b       	sbc	r25, r25
 59a:	0e 5f       	subi	r16, 0xFE	; 254
 59c:	1f 4f       	sbci	r17, 0xFF	; 255
 59e:	f3 2d       	mov	r31, r3
 5a0:	ff 76       	andi	r31, 0x6F	; 111
 5a2:	3f 2e       	mov	r3, r31
 5a4:	97 ff       	sbrs	r25, 7
 5a6:	09 c0       	rjmp	.+18     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5a8:	90 95       	com	r25
 5aa:	80 95       	com	r24
 5ac:	70 95       	com	r23
 5ae:	61 95       	neg	r22
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	8f 4f       	sbci	r24, 0xFF	; 255
 5b4:	9f 4f       	sbci	r25, 0xFF	; 255
 5b6:	f0 68       	ori	r31, 0x80	; 128
 5b8:	3f 2e       	mov	r3, r31
 5ba:	2a e0       	ldi	r18, 0x0A	; 10
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	a3 01       	movw	r20, r6
 5c0:	33 d1       	rcall	.+614    	; 0x828 <__ultoa_invert>
 5c2:	88 2e       	mov	r8, r24
 5c4:	86 18       	sub	r8, r6
 5c6:	44 c0       	rjmp	.+136    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 5c8:	85 37       	cpi	r24, 0x75	; 117
 5ca:	31 f4       	brne	.+12     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5cc:	23 2d       	mov	r18, r3
 5ce:	2f 7e       	andi	r18, 0xEF	; 239
 5d0:	b2 2e       	mov	r11, r18
 5d2:	2a e0       	ldi	r18, 0x0A	; 10
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	25 c0       	rjmp	.+74     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 5d8:	93 2d       	mov	r25, r3
 5da:	99 7f       	andi	r25, 0xF9	; 249
 5dc:	b9 2e       	mov	r11, r25
 5de:	8f 36       	cpi	r24, 0x6F	; 111
 5e0:	c1 f0       	breq	.+48     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5e2:	18 f4       	brcc	.+6      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e4:	88 35       	cpi	r24, 0x58	; 88
 5e6:	79 f0       	breq	.+30     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5e8:	ae c0       	rjmp	.+348    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 5ea:	80 37       	cpi	r24, 0x70	; 112
 5ec:	19 f0       	breq	.+6      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5ee:	88 37       	cpi	r24, 0x78	; 120
 5f0:	21 f0       	breq	.+8      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5f2:	a9 c0       	rjmp	.+338    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 5f4:	e9 2f       	mov	r30, r25
 5f6:	e0 61       	ori	r30, 0x10	; 16
 5f8:	be 2e       	mov	r11, r30
 5fa:	b4 fe       	sbrs	r11, 4
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 5fe:	fb 2d       	mov	r31, r11
 600:	f4 60       	ori	r31, 0x04	; 4
 602:	bf 2e       	mov	r11, r31
 604:	09 c0       	rjmp	.+18     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 606:	34 fe       	sbrs	r3, 4
 608:	0a c0       	rjmp	.+20     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 60a:	29 2f       	mov	r18, r25
 60c:	26 60       	ori	r18, 0x06	; 6
 60e:	b2 2e       	mov	r11, r18
 610:	06 c0       	rjmp	.+12     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 612:	28 e0       	ldi	r18, 0x08	; 8
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	05 c0       	rjmp	.+10     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 618:	20 e1       	ldi	r18, 0x10	; 16
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 61e:	20 e1       	ldi	r18, 0x10	; 16
 620:	32 e0       	ldi	r19, 0x02	; 2
 622:	f8 01       	movw	r30, r16
 624:	b7 fe       	sbrs	r11, 7
 626:	07 c0       	rjmp	.+14     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 628:	60 81       	ld	r22, Z
 62a:	71 81       	ldd	r23, Z+1	; 0x01
 62c:	82 81       	ldd	r24, Z+2	; 0x02
 62e:	93 81       	ldd	r25, Z+3	; 0x03
 630:	0c 5f       	subi	r16, 0xFC	; 252
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	06 c0       	rjmp	.+12     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 636:	60 81       	ld	r22, Z
 638:	71 81       	ldd	r23, Z+1	; 0x01
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 5f       	subi	r16, 0xFE	; 254
 640:	1f 4f       	sbci	r17, 0xFF	; 255
 642:	a3 01       	movw	r20, r6
 644:	f1 d0       	rcall	.+482    	; 0x828 <__ultoa_invert>
 646:	88 2e       	mov	r8, r24
 648:	86 18       	sub	r8, r6
 64a:	fb 2d       	mov	r31, r11
 64c:	ff 77       	andi	r31, 0x7F	; 127
 64e:	3f 2e       	mov	r3, r31
 650:	36 fe       	sbrs	r3, 6
 652:	0d c0       	rjmp	.+26     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 654:	23 2d       	mov	r18, r3
 656:	2e 7f       	andi	r18, 0xFE	; 254
 658:	a2 2e       	mov	r10, r18
 65a:	89 14       	cp	r8, r9
 65c:	58 f4       	brcc	.+22     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 65e:	34 fe       	sbrs	r3, 4
 660:	0b c0       	rjmp	.+22     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 662:	32 fc       	sbrc	r3, 2
 664:	09 c0       	rjmp	.+18     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 666:	83 2d       	mov	r24, r3
 668:	8e 7e       	andi	r24, 0xEE	; 238
 66a:	a8 2e       	mov	r10, r24
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 66e:	b8 2c       	mov	r11, r8
 670:	a3 2c       	mov	r10, r3
 672:	03 c0       	rjmp	.+6      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 674:	b8 2c       	mov	r11, r8
 676:	01 c0       	rjmp	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 678:	b9 2c       	mov	r11, r9
 67a:	a4 fe       	sbrs	r10, 4
 67c:	0f c0       	rjmp	.+30     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 67e:	fe 01       	movw	r30, r28
 680:	e8 0d       	add	r30, r8
 682:	f1 1d       	adc	r31, r1
 684:	80 81       	ld	r24, Z
 686:	80 33       	cpi	r24, 0x30	; 48
 688:	21 f4       	brne	.+8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 68a:	9a 2d       	mov	r25, r10
 68c:	99 7e       	andi	r25, 0xE9	; 233
 68e:	a9 2e       	mov	r10, r25
 690:	09 c0       	rjmp	.+18     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 692:	a2 fe       	sbrs	r10, 2
 694:	06 c0       	rjmp	.+12     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 696:	b3 94       	inc	r11
 698:	b3 94       	inc	r11
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 69c:	8a 2d       	mov	r24, r10
 69e:	86 78       	andi	r24, 0x86	; 134
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6a2:	b3 94       	inc	r11
 6a4:	a3 fc       	sbrc	r10, 3
 6a6:	10 c0       	rjmp	.+32     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6a8:	a0 fe       	sbrs	r10, 0
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6ac:	b2 14       	cp	r11, r2
 6ae:	80 f4       	brcc	.+32     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6b0:	28 0c       	add	r2, r8
 6b2:	92 2c       	mov	r9, r2
 6b4:	9b 18       	sub	r9, r11
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6b8:	b2 14       	cp	r11, r2
 6ba:	58 f4       	brcc	.+22     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6bc:	b6 01       	movw	r22, r12
 6be:	80 e2       	ldi	r24, 0x20	; 32
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	76 d0       	rcall	.+236    	; 0x7b0 <fputc>
 6c4:	b3 94       	inc	r11
 6c6:	f8 cf       	rjmp	.-16     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6c8:	b2 14       	cp	r11, r2
 6ca:	18 f4       	brcc	.+6      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6cc:	2b 18       	sub	r2, r11
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6d0:	98 2c       	mov	r9, r8
 6d2:	21 2c       	mov	r2, r1
 6d4:	a4 fe       	sbrs	r10, 4
 6d6:	0f c0       	rjmp	.+30     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6d8:	b6 01       	movw	r22, r12
 6da:	80 e3       	ldi	r24, 0x30	; 48
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	68 d0       	rcall	.+208    	; 0x7b0 <fputc>
 6e0:	a2 fe       	sbrs	r10, 2
 6e2:	16 c0       	rjmp	.+44     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 6e4:	a1 fc       	sbrc	r10, 1
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6e8:	88 e7       	ldi	r24, 0x78	; 120
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6ee:	88 e5       	ldi	r24, 0x58	; 88
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	b6 01       	movw	r22, r12
 6f4:	0c c0       	rjmp	.+24     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 6f6:	8a 2d       	mov	r24, r10
 6f8:	86 78       	andi	r24, 0x86	; 134
 6fa:	51 f0       	breq	.+20     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 6fc:	a1 fe       	sbrs	r10, 1
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 700:	8b e2       	ldi	r24, 0x2B	; 43
 702:	01 c0       	rjmp	.+2      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 704:	80 e2       	ldi	r24, 0x20	; 32
 706:	a7 fc       	sbrc	r10, 7
 708:	8d e2       	ldi	r24, 0x2D	; 45
 70a:	b6 01       	movw	r22, r12
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	50 d0       	rcall	.+160    	; 0x7b0 <fputc>
 710:	89 14       	cp	r8, r9
 712:	30 f4       	brcc	.+12     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 714:	b6 01       	movw	r22, r12
 716:	80 e3       	ldi	r24, 0x30	; 48
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	4a d0       	rcall	.+148    	; 0x7b0 <fputc>
 71c:	9a 94       	dec	r9
 71e:	f8 cf       	rjmp	.-16     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 720:	8a 94       	dec	r8
 722:	f3 01       	movw	r30, r6
 724:	e8 0d       	add	r30, r8
 726:	f1 1d       	adc	r31, r1
 728:	80 81       	ld	r24, Z
 72a:	b6 01       	movw	r22, r12
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	40 d0       	rcall	.+128    	; 0x7b0 <fputc>
 730:	81 10       	cpse	r8, r1
 732:	f6 cf       	rjmp	.-20     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 734:	22 20       	and	r2, r2
 736:	09 f4       	brne	.+2      	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 738:	4e ce       	rjmp	.-868    	; 0x3d6 <vfprintf+0x4c>
 73a:	b6 01       	movw	r22, r12
 73c:	80 e2       	ldi	r24, 0x20	; 32
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	37 d0       	rcall	.+110    	; 0x7b0 <fputc>
 742:	2a 94       	dec	r2
 744:	f7 cf       	rjmp	.-18     	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 746:	f6 01       	movw	r30, r12
 748:	86 81       	ldd	r24, Z+6	; 0x06
 74a:	97 81       	ldd	r25, Z+7	; 0x07
 74c:	02 c0       	rjmp	.+4      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	9f ef       	ldi	r25, 0xFF	; 255
 752:	2b 96       	adiw	r28, 0x0b	; 11
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	bf 90       	pop	r11
 770:	af 90       	pop	r10
 772:	9f 90       	pop	r9
 774:	8f 90       	pop	r8
 776:	7f 90       	pop	r7
 778:	6f 90       	pop	r6
 77a:	5f 90       	pop	r5
 77c:	4f 90       	pop	r4
 77e:	3f 90       	pop	r3
 780:	2f 90       	pop	r2
 782:	08 95       	ret

00000784 <strnlen_P>:
 784:	fc 01       	movw	r30, r24
 786:	05 90       	lpm	r0, Z+
 788:	61 50       	subi	r22, 0x01	; 1
 78a:	70 40       	sbci	r23, 0x00	; 0
 78c:	01 10       	cpse	r0, r1
 78e:	d8 f7       	brcc	.-10     	; 0x786 <strnlen_P+0x2>
 790:	80 95       	com	r24
 792:	90 95       	com	r25
 794:	8e 0f       	add	r24, r30
 796:	9f 1f       	adc	r25, r31
 798:	08 95       	ret

0000079a <strnlen>:
 79a:	fc 01       	movw	r30, r24
 79c:	61 50       	subi	r22, 0x01	; 1
 79e:	70 40       	sbci	r23, 0x00	; 0
 7a0:	01 90       	ld	r0, Z+
 7a2:	01 10       	cpse	r0, r1
 7a4:	d8 f7       	brcc	.-10     	; 0x79c <strnlen+0x2>
 7a6:	80 95       	com	r24
 7a8:	90 95       	com	r25
 7aa:	8e 0f       	add	r24, r30
 7ac:	9f 1f       	adc	r25, r31
 7ae:	08 95       	ret

000007b0 <fputc>:
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	fb 01       	movw	r30, r22
 7ba:	23 81       	ldd	r18, Z+3	; 0x03
 7bc:	21 fd       	sbrc	r18, 1
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <fputc+0x16>
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
 7c2:	9f ef       	ldi	r25, 0xFF	; 255
 7c4:	2c c0       	rjmp	.+88     	; 0x81e <fputc+0x6e>
 7c6:	22 ff       	sbrs	r18, 2
 7c8:	16 c0       	rjmp	.+44     	; 0x7f6 <fputc+0x46>
 7ca:	46 81       	ldd	r20, Z+6	; 0x06
 7cc:	57 81       	ldd	r21, Z+7	; 0x07
 7ce:	24 81       	ldd	r18, Z+4	; 0x04
 7d0:	35 81       	ldd	r19, Z+5	; 0x05
 7d2:	42 17       	cp	r20, r18
 7d4:	53 07       	cpc	r21, r19
 7d6:	44 f4       	brge	.+16     	; 0x7e8 <fputc+0x38>
 7d8:	a0 81       	ld	r26, Z
 7da:	b1 81       	ldd	r27, Z+1	; 0x01
 7dc:	9d 01       	movw	r18, r26
 7de:	2f 5f       	subi	r18, 0xFF	; 255
 7e0:	3f 4f       	sbci	r19, 0xFF	; 255
 7e2:	31 83       	std	Z+1, r19	; 0x01
 7e4:	20 83       	st	Z, r18
 7e6:	8c 93       	st	X, r24
 7e8:	26 81       	ldd	r18, Z+6	; 0x06
 7ea:	37 81       	ldd	r19, Z+7	; 0x07
 7ec:	2f 5f       	subi	r18, 0xFF	; 255
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	37 83       	std	Z+7, r19	; 0x07
 7f2:	26 83       	std	Z+6, r18	; 0x06
 7f4:	14 c0       	rjmp	.+40     	; 0x81e <fputc+0x6e>
 7f6:	8b 01       	movw	r16, r22
 7f8:	ec 01       	movw	r28, r24
 7fa:	fb 01       	movw	r30, r22
 7fc:	00 84       	ldd	r0, Z+8	; 0x08
 7fe:	f1 85       	ldd	r31, Z+9	; 0x09
 800:	e0 2d       	mov	r30, r0
 802:	09 95       	icall
 804:	89 2b       	or	r24, r25
 806:	e1 f6       	brne	.-72     	; 0x7c0 <fputc+0x10>
 808:	d8 01       	movw	r26, r16
 80a:	16 96       	adiw	r26, 0x06	; 6
 80c:	8d 91       	ld	r24, X+
 80e:	9c 91       	ld	r25, X
 810:	17 97       	sbiw	r26, 0x07	; 7
 812:	01 96       	adiw	r24, 0x01	; 1
 814:	17 96       	adiw	r26, 0x07	; 7
 816:	9c 93       	st	X, r25
 818:	8e 93       	st	-X, r24
 81a:	16 97       	sbiw	r26, 0x06	; 6
 81c:	ce 01       	movw	r24, r28
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	08 95       	ret

00000828 <__ultoa_invert>:
 828:	fa 01       	movw	r30, r20
 82a:	aa 27       	eor	r26, r26
 82c:	28 30       	cpi	r18, 0x08	; 8
 82e:	51 f1       	breq	.+84     	; 0x884 <__ultoa_invert+0x5c>
 830:	20 31       	cpi	r18, 0x10	; 16
 832:	81 f1       	breq	.+96     	; 0x894 <__ultoa_invert+0x6c>
 834:	e8 94       	clt
 836:	6f 93       	push	r22
 838:	6e 7f       	andi	r22, 0xFE	; 254
 83a:	6e 5f       	subi	r22, 0xFE	; 254
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	af 4f       	sbci	r26, 0xFF	; 255
 844:	b1 e0       	ldi	r27, 0x01	; 1
 846:	3e d0       	rcall	.+124    	; 0x8c4 <__ultoa_invert+0x9c>
 848:	b4 e0       	ldi	r27, 0x04	; 4
 84a:	3c d0       	rcall	.+120    	; 0x8c4 <__ultoa_invert+0x9c>
 84c:	67 0f       	add	r22, r23
 84e:	78 1f       	adc	r23, r24
 850:	89 1f       	adc	r24, r25
 852:	9a 1f       	adc	r25, r26
 854:	a1 1d       	adc	r26, r1
 856:	68 0f       	add	r22, r24
 858:	79 1f       	adc	r23, r25
 85a:	8a 1f       	adc	r24, r26
 85c:	91 1d       	adc	r25, r1
 85e:	a1 1d       	adc	r26, r1
 860:	6a 0f       	add	r22, r26
 862:	71 1d       	adc	r23, r1
 864:	81 1d       	adc	r24, r1
 866:	91 1d       	adc	r25, r1
 868:	a1 1d       	adc	r26, r1
 86a:	20 d0       	rcall	.+64     	; 0x8ac <__ultoa_invert+0x84>
 86c:	09 f4       	brne	.+2      	; 0x870 <__ultoa_invert+0x48>
 86e:	68 94       	set
 870:	3f 91       	pop	r19
 872:	2a e0       	ldi	r18, 0x0A	; 10
 874:	26 9f       	mul	r18, r22
 876:	11 24       	eor	r1, r1
 878:	30 19       	sub	r19, r0
 87a:	30 5d       	subi	r19, 0xD0	; 208
 87c:	31 93       	st	Z+, r19
 87e:	de f6       	brtc	.-74     	; 0x836 <__ultoa_invert+0xe>
 880:	cf 01       	movw	r24, r30
 882:	08 95       	ret
 884:	46 2f       	mov	r20, r22
 886:	47 70       	andi	r20, 0x07	; 7
 888:	40 5d       	subi	r20, 0xD0	; 208
 88a:	41 93       	st	Z+, r20
 88c:	b3 e0       	ldi	r27, 0x03	; 3
 88e:	0f d0       	rcall	.+30     	; 0x8ae <__ultoa_invert+0x86>
 890:	c9 f7       	brne	.-14     	; 0x884 <__ultoa_invert+0x5c>
 892:	f6 cf       	rjmp	.-20     	; 0x880 <__ultoa_invert+0x58>
 894:	46 2f       	mov	r20, r22
 896:	4f 70       	andi	r20, 0x0F	; 15
 898:	40 5d       	subi	r20, 0xD0	; 208
 89a:	4a 33       	cpi	r20, 0x3A	; 58
 89c:	18 f0       	brcs	.+6      	; 0x8a4 <__ultoa_invert+0x7c>
 89e:	49 5d       	subi	r20, 0xD9	; 217
 8a0:	31 fd       	sbrc	r19, 1
 8a2:	40 52       	subi	r20, 0x20	; 32
 8a4:	41 93       	st	Z+, r20
 8a6:	02 d0       	rcall	.+4      	; 0x8ac <__ultoa_invert+0x84>
 8a8:	a9 f7       	brne	.-22     	; 0x894 <__ultoa_invert+0x6c>
 8aa:	ea cf       	rjmp	.-44     	; 0x880 <__ultoa_invert+0x58>
 8ac:	b4 e0       	ldi	r27, 0x04	; 4
 8ae:	a6 95       	lsr	r26
 8b0:	97 95       	ror	r25
 8b2:	87 95       	ror	r24
 8b4:	77 95       	ror	r23
 8b6:	67 95       	ror	r22
 8b8:	ba 95       	dec	r27
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <__ultoa_invert+0x86>
 8bc:	00 97       	sbiw	r24, 0x00	; 0
 8be:	61 05       	cpc	r22, r1
 8c0:	71 05       	cpc	r23, r1
 8c2:	08 95       	ret
 8c4:	9b 01       	movw	r18, r22
 8c6:	ac 01       	movw	r20, r24
 8c8:	0a 2e       	mov	r0, r26
 8ca:	06 94       	lsr	r0
 8cc:	57 95       	ror	r21
 8ce:	47 95       	ror	r20
 8d0:	37 95       	ror	r19
 8d2:	27 95       	ror	r18
 8d4:	ba 95       	dec	r27
 8d6:	c9 f7       	brne	.-14     	; 0x8ca <__ultoa_invert+0xa2>
 8d8:	62 0f       	add	r22, r18
 8da:	73 1f       	adc	r23, r19
 8dc:	84 1f       	adc	r24, r20
 8de:	95 1f       	adc	r25, r21
 8e0:	a0 1d       	adc	r26, r0
 8e2:	08 95       	ret

000008e4 <_exit>:
 8e4:	f8 94       	cli

000008e6 <__stop_program>:
 8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <__stop_program>
