
ultrasonicSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000017c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a15  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a7  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000498  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013d  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	47 d0       	rcall	.+142    	; 0x142 <main>
  b4:	61 c0       	rjmp	.+194    	; 0x178 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait_us>:
	
static enum interrupt_status int_stat = INTERRUPT_RISING;

void wait_us(unsigned int us)
{
	for(int i = 0; i < us; i++)
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	06 c0       	rjmp	.+12     	; 0xca <wait_us+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	46 e0       	ldi	r20, 0x06	; 6
  c0:	4a 95       	dec	r20
  c2:	f1 f7       	brne	.-4      	; 0xc0 <wait_us+0x8>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <wait_us+0xe>
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	b8 f3       	brcs	.-18     	; 0xbe <wait_us+0x6>
	{
		_delay_us(1);
	}
}
  d0:	08 95       	ret

000000d2 <wait_ms>:

void wait_ms(unsigned int ms)
{
	
	for(int i = 0; i < ms; i++)
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <wait_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	e7 e8       	ldi	r30, 0x87	; 135
  da:	f3 e1       	ldi	r31, 0x13	; 19
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <wait_ms+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <wait_ms+0x10>
  e2:	00 00       	nop
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	28 17       	cp	r18, r24
  ea:	39 07       	cpc	r19, r25
  ec:	a8 f3       	brcs	.-22     	; 0xd8 <wait_ms+0x6>
	{
		_delay_ms(1);
	}
}
  ee:	08 95       	ret

000000f0 <ultrasonic_send_pulse>:

void ultrasonic_send_pulse()
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	PORTG = 0x00; // 10 us low pulse
  f4:	c5 e6       	ldi	r28, 0x65	; 101
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	18 82       	st	Y, r1
	wait_us(10);
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	dc df       	rcall	.-72     	; 0xb8 <wait_us>
	PORTG = 0x01;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	88 83       	st	Y, r24
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <__vector_1>:

ISR(INT0_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
	
	// if the interrupt was generated on a rising edge (start sending echo)
	if (int_stat == INTERRUPT_RISING)
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	31 f4       	brne	.+12     	; 0x12a <__vector_1+0x20>
	{
		// set interrupt pin 0 on PORTD to falling edge
		EICRA = 0x02;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		
		// set interrupt status
		int_stat = INTERRUPT_FALLING;
 124:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	06 c0       	rjmp	.+12     	; 0x136 <__vector_1+0x2c>
	} else 
	// else if it was generated on a falling edge (end sending echo)
	{
		// set interrupt pin 0 on PORTD to rising edge
		EICRA = 0x03;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		
		// set interrupt status
		int_stat = INTERRUPT_RISING;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
}
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <main>:


int main(void)
{
	DDRG = 0xFF; // port g all output. pin 0 is trig, the rest is for debug
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0x00; // port D pin 0 on input. 0 is echo and also interrupt
 148:	11 ba       	out	0x11, r1	; 17
	
	DDRA = 0xFF;
 14a:	8a bb       	out	0x1a, r24	; 26
	
	EICRA |= 0x03; // interrupt PORTD on pin 0, rising edge
 14c:	ea e6       	ldi	r30, 0x6A	; 106
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	83 60       	ori	r24, 0x03	; 3
 154:	80 83       	st	Z, r24
	
	EIMSK |= 0x01; // enable interrupt on pin 0 (INT0)
 156:	89 b7       	in	r24, 0x39	; 57
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	89 bf       	out	0x39, r24	; 57
	
	sei(); // turn on interrupt system
 15c:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		ultrasonic_send_pulse();
 15e:	c8 df       	rcall	.-112    	; 0xf0 <ultrasonic_send_pulse>
		if (int_stat == INTERRUPT_FALLING)
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	81 11       	cpse	r24, r1
 166:	03 c0       	rjmp	.+6      	; 0x16e <main+0x2c>
		{
			PORTA = 0xFF;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	8b bb       	out	0x1b, r24	; 27
 16c:	01 c0       	rjmp	.+2      	; 0x170 <main+0x2e>
		} else {
			PORTA = 0x00;
 16e:	1b ba       	out	0x1b, r1	; 27
		}
		
		wait_ms(1000);
 170:	88 ee       	ldi	r24, 0xE8	; 232
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	ae df       	rcall	.-164    	; 0xd2 <wait_ms>
    }
 176:	f3 cf       	rjmp	.-26     	; 0x15e <main+0x1c>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
