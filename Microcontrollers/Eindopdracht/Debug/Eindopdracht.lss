
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000aec  00000b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800122  00800122  00000ba2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015b4  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d50  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae5  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000831  00000000  00000000  00004666  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004e97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	45 c1       	rjmp	.+650    	; 0x298 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	92 c1       	rjmp	.+804    	; 0x34a <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	11 d1       	rcall	.+546    	; 0x2e6 <main>
  c4:	11 c5       	rjmp	.+2594   	; 0xae8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <sbi_porta>:
	}
}

void lcd_move_right(void){
	
	lcd_write_command(0x1E);
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <sbi_porta+0xc>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <sbi_porta+0x8>
  d8:	29 2b       	or	r18, r25
  da:	2b bb       	out	0x1b, r18	; 27
  dc:	08 95       	ret

000000de <cbi_porta>:
  de:	9b b3       	in	r25, 0x1b	; 27
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <cbi_porta+0xc>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <cbi_porta+0x8>
  ee:	20 95       	com	r18
  f0:	29 23       	and	r18, r25
  f2:	2b bb       	out	0x1b, r18	; 27
  f4:	08 95       	ret

000000f6 <lcd_strobe_lcd_e>:
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	e6 df       	rcall	.-52     	; 0xc8 <sbi_porta>
  fc:	83 ec       	ldi	r24, 0xC3	; 195
  fe:	99 e0       	ldi	r25, 0x09	; 9
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_strobe_lcd_e+0xa>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_strobe_lcd_e+0x10>
 106:	00 00       	nop
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	e8 df       	rcall	.-48     	; 0xde <cbi_porta>
 10e:	87 e8       	ldi	r24, 0x87	; 135
 110:	93 e1       	ldi	r25, 0x13	; 19
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_strobe_lcd_e+0x1c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_strobe_lcd_e+0x22>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <lcd_write_character>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	85 bb       	out	0x15, r24	; 21
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	d0 df       	rcall	.-96     	; 0xc8 <sbi_porta>
 128:	e6 df       	rcall	.-52     	; 0xf6 <lcd_strobe_lcd_e>
 12a:	c2 95       	swap	r28
 12c:	c0 7f       	andi	r28, 0xF0	; 240
 12e:	c5 bb       	out	0x15, r28	; 21
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	c9 df       	rcall	.-110    	; 0xc8 <sbi_porta>
 136:	df df       	rcall	.-66     	; 0xf6 <lcd_strobe_lcd_e>
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <lcd_write_command>:
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
 140:	85 bb       	out	0x15, r24	; 21
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	cb df       	rcall	.-106    	; 0xde <cbi_porta>
 148:	d6 df       	rcall	.-84     	; 0xf6 <lcd_strobe_lcd_e>
 14a:	c2 95       	swap	r28
 14c:	c0 7f       	andi	r28, 0xF0	; 240
 14e:	c5 bb       	out	0x15, r28	; 21
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	c4 df       	rcall	.-120    	; 0xde <cbi_porta>
 156:	cf df       	rcall	.-98     	; 0xf6 <lcd_strobe_lcd_e>
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_clear>:
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	ee df       	rcall	.-36     	; 0x13c <lcd_write_command>
 160:	87 e8       	ldi	r24, 0x87	; 135
 162:	93 e1       	ldi	r25, 0x13	; 19
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_clear+0x8>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_clear+0xe>
 16a:	00 00       	nop
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	e6 cf       	rjmp	.-52     	; 0x13c <lcd_write_command>
 170:	08 95       	ret

00000172 <init_4bits_mode>:
 172:	cf 93       	push	r28
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	84 bb       	out	0x14, r24	; 20
 178:	85 bb       	out	0x15, r24	; 21
 17a:	8a bb       	out	0x1a, r24	; 26
 17c:	15 ba       	out	0x15, r1	; 21
 17e:	1b ba       	out	0x1b, r1	; 27
 180:	c0 e2       	ldi	r28, 0x20	; 32
 182:	c5 bb       	out	0x15, r28	; 21
 184:	b8 df       	rcall	.-144    	; 0xf6 <lcd_strobe_lcd_e>
 186:	c5 bb       	out	0x15, r28	; 21
 188:	b6 df       	rcall	.-148    	; 0xf6 <lcd_strobe_lcd_e>
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	b3 df       	rcall	.-154    	; 0xf6 <lcd_strobe_lcd_e>
 190:	15 ba       	out	0x15, r1	; 21
 192:	b1 df       	rcall	.-158    	; 0xf6 <lcd_strobe_lcd_e>
 194:	80 ef       	ldi	r24, 0xF0	; 240
 196:	85 bb       	out	0x15, r24	; 21
 198:	ae df       	rcall	.-164    	; 0xf6 <lcd_strobe_lcd_e>
 19a:	15 ba       	out	0x15, r1	; 21
 19c:	ac df       	rcall	.-168    	; 0xf6 <lcd_strobe_lcd_e>
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	a9 df       	rcall	.-174    	; 0xf6 <lcd_strobe_lcd_e>
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	ca df       	rcall	.-108    	; 0x13c <lcd_write_command>
 1a8:	a6 df       	rcall	.-180    	; 0xf6 <lcd_strobe_lcd_e>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_write_string>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd_write_string+0xc>
 1b6:	b2 df       	rcall	.-156    	; 0x11c <lcd_write_character>
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	88 81       	ld	r24, Y
 1bc:	81 11       	cpse	r24, r1
 1be:	fb cf       	rjmp	.-10     	; 0x1b6 <lcd_write_string+0x8>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_write_int>:
}

void lcd_write_int(int number)
{
 1c6:	af 92       	push	r10
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	d8 2e       	mov	r13, r24
 1e0:	c9 2e       	mov	r12, r25
	int length = snprintf(NULL, 0, "%d", number);
	char str[length + 1];
	snprintf(str, length + 1, "%d", number);
	lcd_write_string(str);
}
 1e2:	ad b6       	in	r10, 0x3d	; 61
 1e4:	be b6       	in	r11, 0x3e	; 62
	lcd_write_command(0x1E);
}

void lcd_write_int(int number)
{
	int length = snprintf(NULL, 0, "%d", number);
 1e6:	9f 93       	push	r25
 1e8:	8f 93       	push	r24
 1ea:	0f 2e       	mov	r0, r31
 1ec:	f2 e1       	ldi	r31, 0x12	; 18
 1ee:	ef 2e       	mov	r14, r31
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	ff 2e       	mov	r15, r31
 1f4:	f0 2d       	mov	r31, r0
 1f6:	ff 92       	push	r15
 1f8:	ef 92       	push	r14
 1fa:	1f 92       	push	r1
 1fc:	1f 92       	push	r1
 1fe:	1f 92       	push	r1
 200:	1f 92       	push	r1
 202:	89 d1       	rcall	.+786    	; 0x516 <snprintf>
	char str[length + 1];
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	2d b7       	in	r18, 0x3d	; 61
 208:	3e b7       	in	r19, 0x3e	; 62
 20a:	28 5f       	subi	r18, 0xF8	; 248
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	3e bf       	out	0x3e, r19	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	2d bf       	out	0x3d, r18	; 61
 218:	28 1b       	sub	r18, r24
 21a:	39 0b       	sbc	r19, r25
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	3e bf       	out	0x3e, r19	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	2d bf       	out	0x3d, r18	; 61
 226:	0d b7       	in	r16, 0x3d	; 61
 228:	1e b7       	in	r17, 0x3e	; 62
 22a:	0f 5f       	subi	r16, 0xFF	; 255
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
	snprintf(str, length + 1, "%d", number);
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ff 92       	push	r15
 234:	ef 92       	push	r14
 236:	9f 93       	push	r25
 238:	8f 93       	push	r24
 23a:	1f 93       	push	r17
 23c:	0f 93       	push	r16
 23e:	6b d1       	rcall	.+726    	; 0x516 <snprintf>
	lcd_write_string(str);
 240:	80 2f       	mov	r24, r16
 242:	91 2f       	mov	r25, r17
 244:	b4 df       	rcall	.-152    	; 0x1ae <lcd_write_string>
}
 246:	8d b7       	in	r24, 0x3d	; 61
 248:	9e b7       	in	r25, 0x3e	; 62
 24a:	08 96       	adiw	r24, 0x08	; 8
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	9e bf       	out	0x3e, r25	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	8d bf       	out	0x3d, r24	; 61
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	be be       	out	0x3e, r11	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	ad be       	out	0x3d, r10	; 61
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	df 90       	pop	r13
 26e:	cf 90       	pop	r12
 270:	bf 90       	pop	r11
 272:	af 90       	pop	r10
 274:	08 95       	ret

00000276 <ultrasoon_value_set_event>:
	ultrasonic_send_pulse();
}

static void ultrasoon_value_set_event(uint16_t value){
	// if the SODAR is initialising, then look for close start object.
	if(initialising){
 276:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27a:	22 23       	and	r18, r18
 27c:	51 f0       	breq	.+20     	; 0x292 <ultrasoon_value_set_event+0x1c>
		if(value > 0  && value < MAX_DISTANCE_INIT){
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	43 97       	sbiw	r24, 0x13	; 19
 282:	38 f4       	brcc	.+14     	; 0x292 <ultrasoon_value_set_event+0x1c>
			stepper_rotate_stop();
 284:	d1 d0       	rcall	.+418    	; 0x428 <stepper_rotate_stop>
			initialising = false;
 286:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			// when found, set the initial rotation.
			stepper_rotate_angle(ROTAITION_ANGLE, CounterClockWise);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	be c0       	rjmp	.+380    	; 0x40e <stepper_rotate_angle>
 292:	08 95       	ret

00000294 <snap_event_trigger>:
	ultrasonic_handle_interrupt();
}

static void snap_event_trigger(uint8_t rotation){
	// when X amount of steps are taken, do pulse.
	ultrasonic_send_pulse();
 294:	04 c1       	rjmp	.+520    	; 0x49e <ultrasonic_send_pulse>
 296:	08 95       	ret

00000298 <__vector_3>:

// if true: in init mode, looking for starting point.
bool initialising = true;

ISR(INT2_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	0b b6       	in	r0, 0x3b	; 59
 2a4:	0f 92       	push	r0
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	ultrasonic_handle_interrupt();
 2be:	fc d0       	rcall	.+504    	; 0x4b8 <ultrasonic_handle_interrupt>
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0b be       	out	0x3b, r0	; 59
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <main>:
}

int main(void)
{
	// initialize ultrasonic sensor driver.
	ultrasonic_init();
 2e6:	cc d0       	rcall	.+408    	; 0x480 <ultrasonic_init>
	// initialize LCD display in 4 bit mode.
	init_4bits_mode();
 2e8:	44 df       	rcall	.-376    	; 0x172 <init_4bits_mode>
	// initialize stepper driver.
	init_stepper_driver();
 2ea:	a0 d0       	rcall	.+320    	; 0x42c <init_stepper_driver>
	// set the event when a pulse must be sent.
	set_snap_event(&snap_event_trigger);
 2ec:	8a e4       	ldi	r24, 0x4A	; 74
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	27 d0       	rcall	.+78     	; 0x340 <set_snap_event>
	// set a event for when a value has been set from the ultrasonic sensor.
	set_value_trigger_event(&ultrasoon_value_set_event);
 2f2:	8b e3       	ldi	r24, 0x3B	; 59
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	fe d0       	rcall	.+508    	; 0x4f4 <set_value_trigger_event>
 2f8:	87 ea       	ldi	r24, 0xA7	; 167
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	91 e6       	ldi	r25, 0x61	; 97
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x16>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x1c>
 302:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 304:	2b df       	rcall	.-426    	; 0x15c <lcd_clear>
	
	stepper_rotate_angle(INIT_ROTAITION_ANGLE, ClockWise);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	88 e5       	ldi	r24, 0x58	; 88
 30a:	92 e0       	ldi	r25, 0x02	; 2
    while (1) 
    {
		lcd_clear();
 30c:	80 d0       	rcall	.+256    	; 0x40e <stepper_rotate_angle>
 30e:	26 df       	rcall	.-436    	; 0x15c <lcd_clear>
		// set the ultrasonic value to the lcd.
		lcd_write_int(ultrasonic_get_timer_dist());
 310:	f6 d0       	rcall	.+492    	; 0x4fe <ultrasonic_get_timer_dist>
 312:	59 df       	rcall	.-334    	; 0x1c6 <lcd_write_int>
 314:	84 e6       	ldi	r24, 0x64	; 100
 316:	90 e0       	ldi	r25, 0x00	; 0
		
		wait_ms(LCD_SET_DELAY);
 318:	a4 d0       	rcall	.+328    	; 0x462 <wait_ms>
 31a:	f9 cf       	rjmp	.-14     	; 0x30e <main+0x28>

0000031c <set_stepper_state>:

void stepper_rotate_full_rotation_CW();
void stepper_rotate_full_rotation_CCW();

void set_stepper_state(uint8_t count){
	if(rotation == ClockWise){
 31c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <rotation>
 320:	91 11       	cpse	r25, r1
 322:	07 c0       	rjmp	.+14     	; 0x332 <set_stepper_state+0x16>
		PORTE = CW[count];
 324:	e8 2f       	mov	r30, r24
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ef 5f       	subi	r30, 0xFF	; 255
 32a:	fe 4f       	sbci	r31, 0xFE	; 254
 32c:	80 81       	ld	r24, Z
 32e:	83 b9       	out	0x03, r24	; 3
 330:	08 95       	ret
	} else {
		PORTE = CCW[count];
 332:	e8 2f       	mov	r30, r24
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	e7 5f       	subi	r30, 0xF7	; 247
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	80 81       	ld	r24, Z
 33c:	83 b9       	out	0x03, r24	; 3
 33e:	08 95       	ret

00000340 <set_snap_event>:
}

void (*snap_event)(uint8_t);

void set_snap_event(void (*snap_event_p)(uint8_t)){
	snap_event = snap_event_p;
 340:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <snap_event+0x1>
 344:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <snap_event>
 348:	08 95       	ret

0000034a <__vector_9>:
}

ISR( TIMER2_COMP_vect ){
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	0b b6       	in	r0, 0x3b	; 59
 356:	0f 92       	push	r0
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
	
	TCNT2 = 0;
 370:	14 bc       	out	0x24, r1	; 36
	
	set_stepper_state(stepper_state);
 372:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 376:	d2 df       	rcall	.-92     	; 0x31c <set_stepper_state>
		
	if(stepper_state < 7){
 378:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 37c:	87 30       	cpi	r24, 0x07	; 7
 37e:	20 f4       	brcc	.+8      	; 0x388 <__vector_9+0x3e>
		stepper_state++;
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 386:	30 c0       	rjmp	.+96     	; 0x3e8 <__vector_9+0x9e>
	} else {
		
		stepper_state = 0;
 388:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
		
		if(steps_to_do == 0){
 38c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <steps_to_do>
 390:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <steps_to_do+0x1>
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	99 f4       	brne	.+38     	; 0x3be <__vector_9+0x74>
			
			// change rotation if the steps todo is 0.
			if(rotation == ClockWise){
 398:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <rotation>
 39c:	81 11       	cpse	r24, r1
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <__vector_9+0x5e>
				rotation = CounterClockWise;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <rotation>
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <__vector_9+0x62>
			} else {
				rotation = ClockWise;
 3a8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <rotation>
			}
			
			// set the steps to do again.
			steps_to_do = steps_each_turn;
 3ac:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <steps_each_turn>
 3b0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <steps_each_turn+0x1>
 3b4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <steps_to_do+0x1>
 3b8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <steps_to_do>
 3bc:	15 c0       	rjmp	.+42     	; 0x3e8 <__vector_9+0x9e>
			
		} else {
			
			// if the stepper step value is at a multiplier of 32 then make snap event.
			if(steps_to_do % STEPS_EACH_PULSE == 0){
 3be:	9c 01       	movw	r18, r24
 3c0:	2f 71       	andi	r18, 0x1F	; 31
 3c2:	33 27       	eor	r19, r19
 3c4:	23 2b       	or	r18, r19
 3c6:	39 f4       	brne	.+14     	; 0x3d6 <__vector_9+0x8c>
				
				if(snap_event != NULL)
 3c8:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <snap_event>
 3cc:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <snap_event+0x1>
 3d0:	30 97       	sbiw	r30, 0x00	; 0
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <__vector_9+0x8c>
					snap_event(steps_to_do);
 3d4:	09 95       	icall
			}
			
			steps_to_do--;
 3d6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <steps_to_do>
 3da:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <steps_to_do+0x1>
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <steps_to_do+0x1>
 3e4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <steps_to_do>
		}
	}
}
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0b be       	out	0x3b, r0	; 59
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <stepper_rotate_angle>:

void stepper_rotate_angle(uint16_t steps, enum rotation_wise rot){
	steps_to_do = steps;
 40e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <steps_to_do+0x1>
 412:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <steps_to_do>
	steps_each_turn = steps;
 416:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <steps_each_turn+0x1>
 41a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <steps_each_turn>
	rotation = rot;
 41e:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <rotation>
	TCCR2 = 0b00001100;
 422:	8c e0       	ldi	r24, 0x0C	; 12
 424:	85 bd       	out	0x25, r24	; 37
 426:	08 95       	ret

00000428 <stepper_rotate_stop>:
}

void stepper_rotate_stop(){
	TCCR2 = 0b00000000;
 428:	15 bc       	out	0x25, r1	; 37
 42a:	08 95       	ret

0000042c <init_stepper_driver>:
}

void init_stepper_driver(){
	DDRE = 0xff;
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	82 b9       	out	0x02, r24	; 2
	DDRG = 0xff;
 430:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTG = 0x01;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	PORTE = 0x00;
 43a:	13 b8       	out	0x03, r1	; 3
	OCR2 = 150;
 43c:	86 e9       	ldi	r24, 0x96	; 150
 43e:	83 bd       	out	0x23, r24	; 35
	TIMSK = BIT(7);
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	87 bf       	out	0x37, r24	; 55
	sei();
 444:	78 94       	sei
 446:	08 95       	ret

00000448 <wait_us>:

void (*value_set_event)(uint16_t);

void wait_us(unsigned int us)
{
	for(int i = 0; i < us; i++)
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	06 c0       	rjmp	.+12     	; 0x45a <wait_us+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44e:	43 e0       	ldi	r20, 0x03	; 3
 450:	4a 95       	dec	r20
 452:	f1 f7       	brne	.-4      	; 0x450 <wait_us+0x8>
 454:	00 00       	nop
 456:	2f 5f       	subi	r18, 0xFF	; 255
 458:	3f 4f       	sbci	r19, 0xFF	; 255
 45a:	28 17       	cp	r18, r24
 45c:	39 07       	cpc	r19, r25
 45e:	b8 f3       	brcs	.-18     	; 0x44e <wait_us+0x6>
	{
		_delay_us(1);
	}
}
 460:	08 95       	ret

00000462 <wait_ms>:

void wait_ms(unsigned int ms)
{
	
	for(int i = 0; i < ms; i++)
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	08 c0       	rjmp	.+16     	; 0x478 <wait_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	e3 ec       	ldi	r30, 0xC3	; 195
 46a:	f9 e0       	ldi	r31, 0x09	; 9
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <wait_ms+0xa>
 470:	00 c0       	rjmp	.+0      	; 0x472 <wait_ms+0x10>
 472:	00 00       	nop
 474:	2f 5f       	subi	r18, 0xFF	; 255
 476:	3f 4f       	sbci	r19, 0xFF	; 255
 478:	28 17       	cp	r18, r24
 47a:	39 07       	cpc	r19, r25
 47c:	a8 f3       	brcs	.-22     	; 0x468 <wait_ms+0x6>
	{
		_delay_ms(1);
	}
}
 47e:	08 95       	ret

00000480 <ultrasonic_init>:
void ultrasonic_init()
{
	DDRG = 0xFF; // port g all output. pin 0 is trig, the rest is for debug
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0x00; // port D pin 0 on input. 0 is echo and also interrupt
 486:	11 ba       	out	0x11, r1	; 17
	
	EICRA = 0x30; // interrupt PORTD on pin 2, rising edge
 488:	80 e3       	ldi	r24, 0x30	; 48
 48a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	
	EIMSK |= 0x04; // enable interrupt on pin 2 (INT2)
 48e:	89 b7       	in	r24, 0x39	; 57
 490:	84 60       	ori	r24, 0x04	; 4
 492:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = 0b00000000; // initialize timer1, prescaler=256
 494:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // CTC compare A, RUN
 496:	8c e0       	ldi	r24, 0x0C	; 12
 498:	8e bd       	out	0x2e, r24	; 46
	
	sei(); // turn on interrupt system
 49a:	78 94       	sei
 49c:	08 95       	ret

0000049e <ultrasonic_send_pulse>:
}

void ultrasonic_send_pulse()
{
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
	PORTG = 0x00; // 10 us low pulse
 4a2:	c5 e6       	ldi	r28, 0x65	; 101
 4a4:	d0 e0       	ldi	r29, 0x00	; 0
 4a6:	18 82       	st	Y, r1
	wait_us(10);
 4a8:	8a e0       	ldi	r24, 0x0A	; 10
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	cd df       	rcall	.-102    	; 0x448 <wait_us>
	PORTG = 0x01;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	88 83       	st	Y, r24
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <ultrasonic_handle_interrupt>:

void ultrasonic_handle_interrupt()
{
	// if the interrupt was generated on a rising edge (start sending echo)
	if (int_stat == INTERRUPT_RISING)
 4b8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <int_stat>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	41 f4       	brne	.+16     	; 0x4d0 <ultrasonic_handle_interrupt+0x18>
	{
		// set interrupt pin 2 on PORTD to falling edge
		EICRA = 0x20;
 4c0:	80 e2       	ldi	r24, 0x20	; 32
 4c2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		
		// reset the time in timer1
		TCNT1 = 0x00;
 4c6:	1d bc       	out	0x2d, r1	; 45
 4c8:	1c bc       	out	0x2c, r1	; 44
		
		// set interrupt status
		int_stat = INTERRUPT_FALLING;
 4ca:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <int_stat>
 4ce:	08 95       	ret
	} else
	// else if it was generated on a falling edge (end sending echo)
	{
		// set interrupt pin 0 on PORTD to rising edge
		EICRA = 0x30; // interrupt PORTD on pin 2, rising edge
 4d0:	80 e3       	ldi	r24, 0x30	; 48
 4d2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		
		// read timer1 into time_dist
		timer_dist = TCNT1;
 4d6:	8c b5       	in	r24, 0x2c	; 44
 4d8:	9d b5       	in	r25, 0x2d	; 45
 4da:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <timer_dist+0x1>
 4de:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <timer_dist>
		
		//EVENT
		value_set_event(timer_dist);
 4e2:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <value_set_event>
 4e6:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <value_set_event+0x1>
 4ea:	09 95       	icall
		
		// set interrupt status
		int_stat = INTERRUPT_RISING;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <int_stat>
 4f2:	08 95       	ret

000004f4 <set_value_trigger_event>:
	}
}

void set_value_trigger_event(void (*value_set_event_p)(uint16_t)){
	// event that is triggered when a value is set.
	value_set_event = value_set_event_p;
 4f4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <value_set_event+0x1>
 4f8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <value_set_event>
 4fc:	08 95       	ret

000004fe <ultrasonic_get_timer_dist>:
}

uint16_t ultrasonic_get_timer_dist()
{
	return timer_dist * (340 / 2);
 4fe:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <timer_dist>
 502:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <timer_dist+0x1>
}
 506:	2a ea       	ldi	r18, 0xAA	; 170
 508:	ac 01       	movw	r20, r24
 50a:	24 9f       	mul	r18, r20
 50c:	c0 01       	movw	r24, r0
 50e:	25 9f       	mul	r18, r21
 510:	90 0d       	add	r25, r0
 512:	11 24       	eor	r1, r1
 514:	08 95       	ret

00000516 <snprintf>:
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	2e 97       	sbiw	r28, 0x0e	; 14
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	0d 89       	ldd	r16, Y+21	; 0x15
 530:	1e 89       	ldd	r17, Y+22	; 0x16
 532:	8f 89       	ldd	r24, Y+23	; 0x17
 534:	98 8d       	ldd	r25, Y+24	; 0x18
 536:	26 e0       	ldi	r18, 0x06	; 6
 538:	2c 83       	std	Y+4, r18	; 0x04
 53a:	1a 83       	std	Y+2, r17	; 0x02
 53c:	09 83       	std	Y+1, r16	; 0x01
 53e:	97 ff       	sbrs	r25, 7
 540:	02 c0       	rjmp	.+4      	; 0x546 <snprintf+0x30>
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e8       	ldi	r25, 0x80	; 128
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	9e 83       	std	Y+6, r25	; 0x06
 54a:	8d 83       	std	Y+5, r24	; 0x05
 54c:	ae 01       	movw	r20, r28
 54e:	45 5e       	subi	r20, 0xE5	; 229
 550:	5f 4f       	sbci	r21, 0xFF	; 255
 552:	69 8d       	ldd	r22, Y+25	; 0x19
 554:	7a 8d       	ldd	r23, Y+26	; 0x1a
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	19 d0       	rcall	.+50     	; 0x58e <vfprintf>
 55c:	4d 81       	ldd	r20, Y+5	; 0x05
 55e:	5e 81       	ldd	r21, Y+6	; 0x06
 560:	57 fd       	sbrc	r21, 7
 562:	0a c0       	rjmp	.+20     	; 0x578 <snprintf+0x62>
 564:	2f 81       	ldd	r18, Y+7	; 0x07
 566:	38 85       	ldd	r19, Y+8	; 0x08
 568:	42 17       	cp	r20, r18
 56a:	53 07       	cpc	r21, r19
 56c:	0c f4       	brge	.+2      	; 0x570 <snprintf+0x5a>
 56e:	9a 01       	movw	r18, r20
 570:	f8 01       	movw	r30, r16
 572:	e2 0f       	add	r30, r18
 574:	f3 1f       	adc	r31, r19
 576:	10 82       	st	Z, r1
 578:	2e 96       	adiw	r28, 0x0e	; 14
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	08 95       	ret

0000058e <vfprintf>:
 58e:	2f 92       	push	r2
 590:	3f 92       	push	r3
 592:	4f 92       	push	r4
 594:	5f 92       	push	r5
 596:	6f 92       	push	r6
 598:	7f 92       	push	r7
 59a:	8f 92       	push	r8
 59c:	9f 92       	push	r9
 59e:	af 92       	push	r10
 5a0:	bf 92       	push	r11
 5a2:	cf 92       	push	r12
 5a4:	df 92       	push	r13
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	2b 97       	sbiw	r28, 0x0b	; 11
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	6c 01       	movw	r12, r24
 5c4:	7b 01       	movw	r14, r22
 5c6:	8a 01       	movw	r16, r20
 5c8:	fc 01       	movw	r30, r24
 5ca:	17 82       	std	Z+7, r1	; 0x07
 5cc:	16 82       	std	Z+6, r1	; 0x06
 5ce:	83 81       	ldd	r24, Z+3	; 0x03
 5d0:	81 ff       	sbrs	r24, 1
 5d2:	bf c1       	rjmp	.+894    	; 0x952 <vfprintf+0x3c4>
 5d4:	ce 01       	movw	r24, r28
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	3c 01       	movw	r6, r24
 5da:	f6 01       	movw	r30, r12
 5dc:	93 81       	ldd	r25, Z+3	; 0x03
 5de:	f7 01       	movw	r30, r14
 5e0:	93 fd       	sbrc	r25, 3
 5e2:	85 91       	lpm	r24, Z+
 5e4:	93 ff       	sbrs	r25, 3
 5e6:	81 91       	ld	r24, Z+
 5e8:	7f 01       	movw	r14, r30
 5ea:	88 23       	and	r24, r24
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <vfprintf+0x62>
 5ee:	ad c1       	rjmp	.+858    	; 0x94a <vfprintf+0x3bc>
 5f0:	85 32       	cpi	r24, 0x25	; 37
 5f2:	39 f4       	brne	.+14     	; 0x602 <vfprintf+0x74>
 5f4:	93 fd       	sbrc	r25, 3
 5f6:	85 91       	lpm	r24, Z+
 5f8:	93 ff       	sbrs	r25, 3
 5fa:	81 91       	ld	r24, Z+
 5fc:	7f 01       	movw	r14, r30
 5fe:	85 32       	cpi	r24, 0x25	; 37
 600:	21 f4       	brne	.+8      	; 0x60a <vfprintf+0x7c>
 602:	b6 01       	movw	r22, r12
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	d6 d1       	rcall	.+940    	; 0x9b4 <fputc>
 608:	e8 cf       	rjmp	.-48     	; 0x5da <vfprintf+0x4c>
 60a:	91 2c       	mov	r9, r1
 60c:	21 2c       	mov	r2, r1
 60e:	31 2c       	mov	r3, r1
 610:	ff e1       	ldi	r31, 0x1F	; 31
 612:	f3 15       	cp	r31, r3
 614:	d8 f0       	brcs	.+54     	; 0x64c <vfprintf+0xbe>
 616:	8b 32       	cpi	r24, 0x2B	; 43
 618:	79 f0       	breq	.+30     	; 0x638 <vfprintf+0xaa>
 61a:	38 f4       	brcc	.+14     	; 0x62a <vfprintf+0x9c>
 61c:	80 32       	cpi	r24, 0x20	; 32
 61e:	79 f0       	breq	.+30     	; 0x63e <vfprintf+0xb0>
 620:	83 32       	cpi	r24, 0x23	; 35
 622:	a1 f4       	brne	.+40     	; 0x64c <vfprintf+0xbe>
 624:	23 2d       	mov	r18, r3
 626:	20 61       	ori	r18, 0x10	; 16
 628:	1d c0       	rjmp	.+58     	; 0x664 <vfprintf+0xd6>
 62a:	8d 32       	cpi	r24, 0x2D	; 45
 62c:	61 f0       	breq	.+24     	; 0x646 <vfprintf+0xb8>
 62e:	80 33       	cpi	r24, 0x30	; 48
 630:	69 f4       	brne	.+26     	; 0x64c <vfprintf+0xbe>
 632:	23 2d       	mov	r18, r3
 634:	21 60       	ori	r18, 0x01	; 1
 636:	16 c0       	rjmp	.+44     	; 0x664 <vfprintf+0xd6>
 638:	83 2d       	mov	r24, r3
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	38 2e       	mov	r3, r24
 63e:	e3 2d       	mov	r30, r3
 640:	e4 60       	ori	r30, 0x04	; 4
 642:	3e 2e       	mov	r3, r30
 644:	2a c0       	rjmp	.+84     	; 0x69a <vfprintf+0x10c>
 646:	f3 2d       	mov	r31, r3
 648:	f8 60       	ori	r31, 0x08	; 8
 64a:	1d c0       	rjmp	.+58     	; 0x686 <vfprintf+0xf8>
 64c:	37 fc       	sbrc	r3, 7
 64e:	2d c0       	rjmp	.+90     	; 0x6aa <vfprintf+0x11c>
 650:	20 ed       	ldi	r18, 0xD0	; 208
 652:	28 0f       	add	r18, r24
 654:	2a 30       	cpi	r18, 0x0A	; 10
 656:	40 f0       	brcs	.+16     	; 0x668 <vfprintf+0xda>
 658:	8e 32       	cpi	r24, 0x2E	; 46
 65a:	b9 f4       	brne	.+46     	; 0x68a <vfprintf+0xfc>
 65c:	36 fc       	sbrc	r3, 6
 65e:	75 c1       	rjmp	.+746    	; 0x94a <vfprintf+0x3bc>
 660:	23 2d       	mov	r18, r3
 662:	20 64       	ori	r18, 0x40	; 64
 664:	32 2e       	mov	r3, r18
 666:	19 c0       	rjmp	.+50     	; 0x69a <vfprintf+0x10c>
 668:	36 fe       	sbrs	r3, 6
 66a:	06 c0       	rjmp	.+12     	; 0x678 <vfprintf+0xea>
 66c:	8a e0       	ldi	r24, 0x0A	; 10
 66e:	98 9e       	mul	r9, r24
 670:	20 0d       	add	r18, r0
 672:	11 24       	eor	r1, r1
 674:	92 2e       	mov	r9, r18
 676:	11 c0       	rjmp	.+34     	; 0x69a <vfprintf+0x10c>
 678:	ea e0       	ldi	r30, 0x0A	; 10
 67a:	2e 9e       	mul	r2, r30
 67c:	20 0d       	add	r18, r0
 67e:	11 24       	eor	r1, r1
 680:	22 2e       	mov	r2, r18
 682:	f3 2d       	mov	r31, r3
 684:	f0 62       	ori	r31, 0x20	; 32
 686:	3f 2e       	mov	r3, r31
 688:	08 c0       	rjmp	.+16     	; 0x69a <vfprintf+0x10c>
 68a:	8c 36       	cpi	r24, 0x6C	; 108
 68c:	21 f4       	brne	.+8      	; 0x696 <vfprintf+0x108>
 68e:	83 2d       	mov	r24, r3
 690:	80 68       	ori	r24, 0x80	; 128
 692:	38 2e       	mov	r3, r24
 694:	02 c0       	rjmp	.+4      	; 0x69a <vfprintf+0x10c>
 696:	88 36       	cpi	r24, 0x68	; 104
 698:	41 f4       	brne	.+16     	; 0x6aa <vfprintf+0x11c>
 69a:	f7 01       	movw	r30, r14
 69c:	93 fd       	sbrc	r25, 3
 69e:	85 91       	lpm	r24, Z+
 6a0:	93 ff       	sbrs	r25, 3
 6a2:	81 91       	ld	r24, Z+
 6a4:	7f 01       	movw	r14, r30
 6a6:	81 11       	cpse	r24, r1
 6a8:	b3 cf       	rjmp	.-154    	; 0x610 <vfprintf+0x82>
 6aa:	98 2f       	mov	r25, r24
 6ac:	9f 7d       	andi	r25, 0xDF	; 223
 6ae:	95 54       	subi	r25, 0x45	; 69
 6b0:	93 30       	cpi	r25, 0x03	; 3
 6b2:	28 f4       	brcc	.+10     	; 0x6be <vfprintf+0x130>
 6b4:	0c 5f       	subi	r16, 0xFC	; 252
 6b6:	1f 4f       	sbci	r17, 0xFF	; 255
 6b8:	9f e3       	ldi	r25, 0x3F	; 63
 6ba:	99 83       	std	Y+1, r25	; 0x01
 6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <vfprintf+0x14a>
 6be:	83 36       	cpi	r24, 0x63	; 99
 6c0:	31 f0       	breq	.+12     	; 0x6ce <vfprintf+0x140>
 6c2:	83 37       	cpi	r24, 0x73	; 115
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <vfprintf+0x154>
 6c6:	83 35       	cpi	r24, 0x53	; 83
 6c8:	09 f0       	breq	.+2      	; 0x6cc <vfprintf+0x13e>
 6ca:	55 c0       	rjmp	.+170    	; 0x776 <vfprintf+0x1e8>
 6cc:	20 c0       	rjmp	.+64     	; 0x70e <vfprintf+0x180>
 6ce:	f8 01       	movw	r30, r16
 6d0:	80 81       	ld	r24, Z
 6d2:	89 83       	std	Y+1, r24	; 0x01
 6d4:	0e 5f       	subi	r16, 0xFE	; 254
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	88 24       	eor	r8, r8
 6da:	83 94       	inc	r8
 6dc:	91 2c       	mov	r9, r1
 6de:	53 01       	movw	r10, r6
 6e0:	12 c0       	rjmp	.+36     	; 0x706 <vfprintf+0x178>
 6e2:	28 01       	movw	r4, r16
 6e4:	f2 e0       	ldi	r31, 0x02	; 2
 6e6:	4f 0e       	add	r4, r31
 6e8:	51 1c       	adc	r5, r1
 6ea:	f8 01       	movw	r30, r16
 6ec:	a0 80       	ld	r10, Z
 6ee:	b1 80       	ldd	r11, Z+1	; 0x01
 6f0:	36 fe       	sbrs	r3, 6
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <vfprintf+0x16c>
 6f4:	69 2d       	mov	r22, r9
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <vfprintf+0x170>
 6fa:	6f ef       	ldi	r22, 0xFF	; 255
 6fc:	7f ef       	ldi	r23, 0xFF	; 255
 6fe:	c5 01       	movw	r24, r10
 700:	4e d1       	rcall	.+668    	; 0x99e <strnlen>
 702:	4c 01       	movw	r8, r24
 704:	82 01       	movw	r16, r4
 706:	f3 2d       	mov	r31, r3
 708:	ff 77       	andi	r31, 0x7F	; 127
 70a:	3f 2e       	mov	r3, r31
 70c:	15 c0       	rjmp	.+42     	; 0x738 <vfprintf+0x1aa>
 70e:	28 01       	movw	r4, r16
 710:	22 e0       	ldi	r18, 0x02	; 2
 712:	42 0e       	add	r4, r18
 714:	51 1c       	adc	r5, r1
 716:	f8 01       	movw	r30, r16
 718:	a0 80       	ld	r10, Z
 71a:	b1 80       	ldd	r11, Z+1	; 0x01
 71c:	36 fe       	sbrs	r3, 6
 71e:	03 c0       	rjmp	.+6      	; 0x726 <vfprintf+0x198>
 720:	69 2d       	mov	r22, r9
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <vfprintf+0x19c>
 726:	6f ef       	ldi	r22, 0xFF	; 255
 728:	7f ef       	ldi	r23, 0xFF	; 255
 72a:	c5 01       	movw	r24, r10
 72c:	2d d1       	rcall	.+602    	; 0x988 <strnlen_P>
 72e:	4c 01       	movw	r8, r24
 730:	f3 2d       	mov	r31, r3
 732:	f0 68       	ori	r31, 0x80	; 128
 734:	3f 2e       	mov	r3, r31
 736:	82 01       	movw	r16, r4
 738:	33 fc       	sbrc	r3, 3
 73a:	19 c0       	rjmp	.+50     	; 0x76e <vfprintf+0x1e0>
 73c:	82 2d       	mov	r24, r2
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	88 16       	cp	r8, r24
 742:	99 06       	cpc	r9, r25
 744:	a0 f4       	brcc	.+40     	; 0x76e <vfprintf+0x1e0>
 746:	b6 01       	movw	r22, r12
 748:	80 e2       	ldi	r24, 0x20	; 32
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	33 d1       	rcall	.+614    	; 0x9b4 <fputc>
 74e:	2a 94       	dec	r2
 750:	f5 cf       	rjmp	.-22     	; 0x73c <vfprintf+0x1ae>
 752:	f5 01       	movw	r30, r10
 754:	37 fc       	sbrc	r3, 7
 756:	85 91       	lpm	r24, Z+
 758:	37 fe       	sbrs	r3, 7
 75a:	81 91       	ld	r24, Z+
 75c:	5f 01       	movw	r10, r30
 75e:	b6 01       	movw	r22, r12
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	28 d1       	rcall	.+592    	; 0x9b4 <fputc>
 764:	21 10       	cpse	r2, r1
 766:	2a 94       	dec	r2
 768:	21 e0       	ldi	r18, 0x01	; 1
 76a:	82 1a       	sub	r8, r18
 76c:	91 08       	sbc	r9, r1
 76e:	81 14       	cp	r8, r1
 770:	91 04       	cpc	r9, r1
 772:	79 f7       	brne	.-34     	; 0x752 <vfprintf+0x1c4>
 774:	e1 c0       	rjmp	.+450    	; 0x938 <vfprintf+0x3aa>
 776:	84 36       	cpi	r24, 0x64	; 100
 778:	11 f0       	breq	.+4      	; 0x77e <vfprintf+0x1f0>
 77a:	89 36       	cpi	r24, 0x69	; 105
 77c:	39 f5       	brne	.+78     	; 0x7cc <vfprintf+0x23e>
 77e:	f8 01       	movw	r30, r16
 780:	37 fe       	sbrs	r3, 7
 782:	07 c0       	rjmp	.+14     	; 0x792 <vfprintf+0x204>
 784:	60 81       	ld	r22, Z
 786:	71 81       	ldd	r23, Z+1	; 0x01
 788:	82 81       	ldd	r24, Z+2	; 0x02
 78a:	93 81       	ldd	r25, Z+3	; 0x03
 78c:	0c 5f       	subi	r16, 0xFC	; 252
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <vfprintf+0x214>
 792:	60 81       	ld	r22, Z
 794:	71 81       	ldd	r23, Z+1	; 0x01
 796:	07 2e       	mov	r0, r23
 798:	00 0c       	add	r0, r0
 79a:	88 0b       	sbc	r24, r24
 79c:	99 0b       	sbc	r25, r25
 79e:	0e 5f       	subi	r16, 0xFE	; 254
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	f3 2d       	mov	r31, r3
 7a4:	ff 76       	andi	r31, 0x6F	; 111
 7a6:	3f 2e       	mov	r3, r31
 7a8:	97 ff       	sbrs	r25, 7
 7aa:	09 c0       	rjmp	.+18     	; 0x7be <vfprintf+0x230>
 7ac:	90 95       	com	r25
 7ae:	80 95       	com	r24
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	f0 68       	ori	r31, 0x80	; 128
 7bc:	3f 2e       	mov	r3, r31
 7be:	2a e0       	ldi	r18, 0x0A	; 10
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	a3 01       	movw	r20, r6
 7c4:	33 d1       	rcall	.+614    	; 0xa2c <__ultoa_invert>
 7c6:	88 2e       	mov	r8, r24
 7c8:	86 18       	sub	r8, r6
 7ca:	44 c0       	rjmp	.+136    	; 0x854 <vfprintf+0x2c6>
 7cc:	85 37       	cpi	r24, 0x75	; 117
 7ce:	31 f4       	brne	.+12     	; 0x7dc <vfprintf+0x24e>
 7d0:	23 2d       	mov	r18, r3
 7d2:	2f 7e       	andi	r18, 0xEF	; 239
 7d4:	b2 2e       	mov	r11, r18
 7d6:	2a e0       	ldi	r18, 0x0A	; 10
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	25 c0       	rjmp	.+74     	; 0x826 <vfprintf+0x298>
 7dc:	93 2d       	mov	r25, r3
 7de:	99 7f       	andi	r25, 0xF9	; 249
 7e0:	b9 2e       	mov	r11, r25
 7e2:	8f 36       	cpi	r24, 0x6F	; 111
 7e4:	c1 f0       	breq	.+48     	; 0x816 <vfprintf+0x288>
 7e6:	18 f4       	brcc	.+6      	; 0x7ee <vfprintf+0x260>
 7e8:	88 35       	cpi	r24, 0x58	; 88
 7ea:	79 f0       	breq	.+30     	; 0x80a <vfprintf+0x27c>
 7ec:	ae c0       	rjmp	.+348    	; 0x94a <vfprintf+0x3bc>
 7ee:	80 37       	cpi	r24, 0x70	; 112
 7f0:	19 f0       	breq	.+6      	; 0x7f8 <vfprintf+0x26a>
 7f2:	88 37       	cpi	r24, 0x78	; 120
 7f4:	21 f0       	breq	.+8      	; 0x7fe <vfprintf+0x270>
 7f6:	a9 c0       	rjmp	.+338    	; 0x94a <vfprintf+0x3bc>
 7f8:	e9 2f       	mov	r30, r25
 7fa:	e0 61       	ori	r30, 0x10	; 16
 7fc:	be 2e       	mov	r11, r30
 7fe:	b4 fe       	sbrs	r11, 4
 800:	0d c0       	rjmp	.+26     	; 0x81c <vfprintf+0x28e>
 802:	fb 2d       	mov	r31, r11
 804:	f4 60       	ori	r31, 0x04	; 4
 806:	bf 2e       	mov	r11, r31
 808:	09 c0       	rjmp	.+18     	; 0x81c <vfprintf+0x28e>
 80a:	34 fe       	sbrs	r3, 4
 80c:	0a c0       	rjmp	.+20     	; 0x822 <vfprintf+0x294>
 80e:	29 2f       	mov	r18, r25
 810:	26 60       	ori	r18, 0x06	; 6
 812:	b2 2e       	mov	r11, r18
 814:	06 c0       	rjmp	.+12     	; 0x822 <vfprintf+0x294>
 816:	28 e0       	ldi	r18, 0x08	; 8
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	05 c0       	rjmp	.+10     	; 0x826 <vfprintf+0x298>
 81c:	20 e1       	ldi	r18, 0x10	; 16
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <vfprintf+0x298>
 822:	20 e1       	ldi	r18, 0x10	; 16
 824:	32 e0       	ldi	r19, 0x02	; 2
 826:	f8 01       	movw	r30, r16
 828:	b7 fe       	sbrs	r11, 7
 82a:	07 c0       	rjmp	.+14     	; 0x83a <vfprintf+0x2ac>
 82c:	60 81       	ld	r22, Z
 82e:	71 81       	ldd	r23, Z+1	; 0x01
 830:	82 81       	ldd	r24, Z+2	; 0x02
 832:	93 81       	ldd	r25, Z+3	; 0x03
 834:	0c 5f       	subi	r16, 0xFC	; 252
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	06 c0       	rjmp	.+12     	; 0x846 <vfprintf+0x2b8>
 83a:	60 81       	ld	r22, Z
 83c:	71 81       	ldd	r23, Z+1	; 0x01
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 5f       	subi	r16, 0xFE	; 254
 844:	1f 4f       	sbci	r17, 0xFF	; 255
 846:	a3 01       	movw	r20, r6
 848:	f1 d0       	rcall	.+482    	; 0xa2c <__ultoa_invert>
 84a:	88 2e       	mov	r8, r24
 84c:	86 18       	sub	r8, r6
 84e:	fb 2d       	mov	r31, r11
 850:	ff 77       	andi	r31, 0x7F	; 127
 852:	3f 2e       	mov	r3, r31
 854:	36 fe       	sbrs	r3, 6
 856:	0d c0       	rjmp	.+26     	; 0x872 <vfprintf+0x2e4>
 858:	23 2d       	mov	r18, r3
 85a:	2e 7f       	andi	r18, 0xFE	; 254
 85c:	a2 2e       	mov	r10, r18
 85e:	89 14       	cp	r8, r9
 860:	58 f4       	brcc	.+22     	; 0x878 <vfprintf+0x2ea>
 862:	34 fe       	sbrs	r3, 4
 864:	0b c0       	rjmp	.+22     	; 0x87c <vfprintf+0x2ee>
 866:	32 fc       	sbrc	r3, 2
 868:	09 c0       	rjmp	.+18     	; 0x87c <vfprintf+0x2ee>
 86a:	83 2d       	mov	r24, r3
 86c:	8e 7e       	andi	r24, 0xEE	; 238
 86e:	a8 2e       	mov	r10, r24
 870:	05 c0       	rjmp	.+10     	; 0x87c <vfprintf+0x2ee>
 872:	b8 2c       	mov	r11, r8
 874:	a3 2c       	mov	r10, r3
 876:	03 c0       	rjmp	.+6      	; 0x87e <vfprintf+0x2f0>
 878:	b8 2c       	mov	r11, r8
 87a:	01 c0       	rjmp	.+2      	; 0x87e <vfprintf+0x2f0>
 87c:	b9 2c       	mov	r11, r9
 87e:	a4 fe       	sbrs	r10, 4
 880:	0f c0       	rjmp	.+30     	; 0x8a0 <vfprintf+0x312>
 882:	fe 01       	movw	r30, r28
 884:	e8 0d       	add	r30, r8
 886:	f1 1d       	adc	r31, r1
 888:	80 81       	ld	r24, Z
 88a:	80 33       	cpi	r24, 0x30	; 48
 88c:	21 f4       	brne	.+8      	; 0x896 <vfprintf+0x308>
 88e:	9a 2d       	mov	r25, r10
 890:	99 7e       	andi	r25, 0xE9	; 233
 892:	a9 2e       	mov	r10, r25
 894:	09 c0       	rjmp	.+18     	; 0x8a8 <vfprintf+0x31a>
 896:	a2 fe       	sbrs	r10, 2
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0x318>
 89a:	b3 94       	inc	r11
 89c:	b3 94       	inc	r11
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <vfprintf+0x31a>
 8a0:	8a 2d       	mov	r24, r10
 8a2:	86 78       	andi	r24, 0x86	; 134
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <vfprintf+0x31a>
 8a6:	b3 94       	inc	r11
 8a8:	a3 fc       	sbrc	r10, 3
 8aa:	10 c0       	rjmp	.+32     	; 0x8cc <vfprintf+0x33e>
 8ac:	a0 fe       	sbrs	r10, 0
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <vfprintf+0x32e>
 8b0:	b2 14       	cp	r11, r2
 8b2:	80 f4       	brcc	.+32     	; 0x8d4 <vfprintf+0x346>
 8b4:	28 0c       	add	r2, r8
 8b6:	92 2c       	mov	r9, r2
 8b8:	9b 18       	sub	r9, r11
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <vfprintf+0x348>
 8bc:	b2 14       	cp	r11, r2
 8be:	58 f4       	brcc	.+22     	; 0x8d6 <vfprintf+0x348>
 8c0:	b6 01       	movw	r22, r12
 8c2:	80 e2       	ldi	r24, 0x20	; 32
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	76 d0       	rcall	.+236    	; 0x9b4 <fputc>
 8c8:	b3 94       	inc	r11
 8ca:	f8 cf       	rjmp	.-16     	; 0x8bc <vfprintf+0x32e>
 8cc:	b2 14       	cp	r11, r2
 8ce:	18 f4       	brcc	.+6      	; 0x8d6 <vfprintf+0x348>
 8d0:	2b 18       	sub	r2, r11
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x34a>
 8d4:	98 2c       	mov	r9, r8
 8d6:	21 2c       	mov	r2, r1
 8d8:	a4 fe       	sbrs	r10, 4
 8da:	0f c0       	rjmp	.+30     	; 0x8fa <vfprintf+0x36c>
 8dc:	b6 01       	movw	r22, r12
 8de:	80 e3       	ldi	r24, 0x30	; 48
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	68 d0       	rcall	.+208    	; 0x9b4 <fputc>
 8e4:	a2 fe       	sbrs	r10, 2
 8e6:	16 c0       	rjmp	.+44     	; 0x914 <vfprintf+0x386>
 8e8:	a1 fc       	sbrc	r10, 1
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <vfprintf+0x364>
 8ec:	88 e7       	ldi	r24, 0x78	; 120
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0x368>
 8f2:	88 e5       	ldi	r24, 0x58	; 88
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	b6 01       	movw	r22, r12
 8f8:	0c c0       	rjmp	.+24     	; 0x912 <vfprintf+0x384>
 8fa:	8a 2d       	mov	r24, r10
 8fc:	86 78       	andi	r24, 0x86	; 134
 8fe:	51 f0       	breq	.+20     	; 0x914 <vfprintf+0x386>
 900:	a1 fe       	sbrs	r10, 1
 902:	02 c0       	rjmp	.+4      	; 0x908 <vfprintf+0x37a>
 904:	8b e2       	ldi	r24, 0x2B	; 43
 906:	01 c0       	rjmp	.+2      	; 0x90a <vfprintf+0x37c>
 908:	80 e2       	ldi	r24, 0x20	; 32
 90a:	a7 fc       	sbrc	r10, 7
 90c:	8d e2       	ldi	r24, 0x2D	; 45
 90e:	b6 01       	movw	r22, r12
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	50 d0       	rcall	.+160    	; 0x9b4 <fputc>
 914:	89 14       	cp	r8, r9
 916:	30 f4       	brcc	.+12     	; 0x924 <vfprintf+0x396>
 918:	b6 01       	movw	r22, r12
 91a:	80 e3       	ldi	r24, 0x30	; 48
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	4a d0       	rcall	.+148    	; 0x9b4 <fputc>
 920:	9a 94       	dec	r9
 922:	f8 cf       	rjmp	.-16     	; 0x914 <vfprintf+0x386>
 924:	8a 94       	dec	r8
 926:	f3 01       	movw	r30, r6
 928:	e8 0d       	add	r30, r8
 92a:	f1 1d       	adc	r31, r1
 92c:	80 81       	ld	r24, Z
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	40 d0       	rcall	.+128    	; 0x9b4 <fputc>
 934:	81 10       	cpse	r8, r1
 936:	f6 cf       	rjmp	.-20     	; 0x924 <vfprintf+0x396>
 938:	22 20       	and	r2, r2
 93a:	09 f4       	brne	.+2      	; 0x93e <vfprintf+0x3b0>
 93c:	4e ce       	rjmp	.-868    	; 0x5da <vfprintf+0x4c>
 93e:	b6 01       	movw	r22, r12
 940:	80 e2       	ldi	r24, 0x20	; 32
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	37 d0       	rcall	.+110    	; 0x9b4 <fputc>
 946:	2a 94       	dec	r2
 948:	f7 cf       	rjmp	.-18     	; 0x938 <vfprintf+0x3aa>
 94a:	f6 01       	movw	r30, r12
 94c:	86 81       	ldd	r24, Z+6	; 0x06
 94e:	97 81       	ldd	r25, Z+7	; 0x07
 950:	02 c0       	rjmp	.+4      	; 0x956 <vfprintf+0x3c8>
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	2b 96       	adiw	r28, 0x0b	; 11
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	df 90       	pop	r13
 970:	cf 90       	pop	r12
 972:	bf 90       	pop	r11
 974:	af 90       	pop	r10
 976:	9f 90       	pop	r9
 978:	8f 90       	pop	r8
 97a:	7f 90       	pop	r7
 97c:	6f 90       	pop	r6
 97e:	5f 90       	pop	r5
 980:	4f 90       	pop	r4
 982:	3f 90       	pop	r3
 984:	2f 90       	pop	r2
 986:	08 95       	ret

00000988 <strnlen_P>:
 988:	fc 01       	movw	r30, r24
 98a:	05 90       	lpm	r0, Z+
 98c:	61 50       	subi	r22, 0x01	; 1
 98e:	70 40       	sbci	r23, 0x00	; 0
 990:	01 10       	cpse	r0, r1
 992:	d8 f7       	brcc	.-10     	; 0x98a <strnlen_P+0x2>
 994:	80 95       	com	r24
 996:	90 95       	com	r25
 998:	8e 0f       	add	r24, r30
 99a:	9f 1f       	adc	r25, r31
 99c:	08 95       	ret

0000099e <strnlen>:
 99e:	fc 01       	movw	r30, r24
 9a0:	61 50       	subi	r22, 0x01	; 1
 9a2:	70 40       	sbci	r23, 0x00	; 0
 9a4:	01 90       	ld	r0, Z+
 9a6:	01 10       	cpse	r0, r1
 9a8:	d8 f7       	brcc	.-10     	; 0x9a0 <strnlen+0x2>
 9aa:	80 95       	com	r24
 9ac:	90 95       	com	r25
 9ae:	8e 0f       	add	r24, r30
 9b0:	9f 1f       	adc	r25, r31
 9b2:	08 95       	ret

000009b4 <fputc>:
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	fb 01       	movw	r30, r22
 9be:	23 81       	ldd	r18, Z+3	; 0x03
 9c0:	21 fd       	sbrc	r18, 1
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <fputc+0x16>
 9c4:	8f ef       	ldi	r24, 0xFF	; 255
 9c6:	9f ef       	ldi	r25, 0xFF	; 255
 9c8:	2c c0       	rjmp	.+88     	; 0xa22 <fputc+0x6e>
 9ca:	22 ff       	sbrs	r18, 2
 9cc:	16 c0       	rjmp	.+44     	; 0x9fa <fputc+0x46>
 9ce:	46 81       	ldd	r20, Z+6	; 0x06
 9d0:	57 81       	ldd	r21, Z+7	; 0x07
 9d2:	24 81       	ldd	r18, Z+4	; 0x04
 9d4:	35 81       	ldd	r19, Z+5	; 0x05
 9d6:	42 17       	cp	r20, r18
 9d8:	53 07       	cpc	r21, r19
 9da:	44 f4       	brge	.+16     	; 0x9ec <fputc+0x38>
 9dc:	a0 81       	ld	r26, Z
 9de:	b1 81       	ldd	r27, Z+1	; 0x01
 9e0:	9d 01       	movw	r18, r26
 9e2:	2f 5f       	subi	r18, 0xFF	; 255
 9e4:	3f 4f       	sbci	r19, 0xFF	; 255
 9e6:	31 83       	std	Z+1, r19	; 0x01
 9e8:	20 83       	st	Z, r18
 9ea:	8c 93       	st	X, r24
 9ec:	26 81       	ldd	r18, Z+6	; 0x06
 9ee:	37 81       	ldd	r19, Z+7	; 0x07
 9f0:	2f 5f       	subi	r18, 0xFF	; 255
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	37 83       	std	Z+7, r19	; 0x07
 9f6:	26 83       	std	Z+6, r18	; 0x06
 9f8:	14 c0       	rjmp	.+40     	; 0xa22 <fputc+0x6e>
 9fa:	8b 01       	movw	r16, r22
 9fc:	ec 01       	movw	r28, r24
 9fe:	fb 01       	movw	r30, r22
 a00:	00 84       	ldd	r0, Z+8	; 0x08
 a02:	f1 85       	ldd	r31, Z+9	; 0x09
 a04:	e0 2d       	mov	r30, r0
 a06:	09 95       	icall
 a08:	89 2b       	or	r24, r25
 a0a:	e1 f6       	brne	.-72     	; 0x9c4 <fputc+0x10>
 a0c:	d8 01       	movw	r26, r16
 a0e:	16 96       	adiw	r26, 0x06	; 6
 a10:	8d 91       	ld	r24, X+
 a12:	9c 91       	ld	r25, X
 a14:	17 97       	sbiw	r26, 0x07	; 7
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	17 96       	adiw	r26, 0x07	; 7
 a1a:	9c 93       	st	X, r25
 a1c:	8e 93       	st	-X, r24
 a1e:	16 97       	sbiw	r26, 0x06	; 6
 a20:	ce 01       	movw	r24, r28
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	08 95       	ret

00000a2c <__ultoa_invert>:
 a2c:	fa 01       	movw	r30, r20
 a2e:	aa 27       	eor	r26, r26
 a30:	28 30       	cpi	r18, 0x08	; 8
 a32:	51 f1       	breq	.+84     	; 0xa88 <__ultoa_invert+0x5c>
 a34:	20 31       	cpi	r18, 0x10	; 16
 a36:	81 f1       	breq	.+96     	; 0xa98 <__ultoa_invert+0x6c>
 a38:	e8 94       	clt
 a3a:	6f 93       	push	r22
 a3c:	6e 7f       	andi	r22, 0xFE	; 254
 a3e:	6e 5f       	subi	r22, 0xFE	; 254
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	af 4f       	sbci	r26, 0xFF	; 255
 a48:	b1 e0       	ldi	r27, 0x01	; 1
 a4a:	3e d0       	rcall	.+124    	; 0xac8 <__ultoa_invert+0x9c>
 a4c:	b4 e0       	ldi	r27, 0x04	; 4
 a4e:	3c d0       	rcall	.+120    	; 0xac8 <__ultoa_invert+0x9c>
 a50:	67 0f       	add	r22, r23
 a52:	78 1f       	adc	r23, r24
 a54:	89 1f       	adc	r24, r25
 a56:	9a 1f       	adc	r25, r26
 a58:	a1 1d       	adc	r26, r1
 a5a:	68 0f       	add	r22, r24
 a5c:	79 1f       	adc	r23, r25
 a5e:	8a 1f       	adc	r24, r26
 a60:	91 1d       	adc	r25, r1
 a62:	a1 1d       	adc	r26, r1
 a64:	6a 0f       	add	r22, r26
 a66:	71 1d       	adc	r23, r1
 a68:	81 1d       	adc	r24, r1
 a6a:	91 1d       	adc	r25, r1
 a6c:	a1 1d       	adc	r26, r1
 a6e:	20 d0       	rcall	.+64     	; 0xab0 <__ultoa_invert+0x84>
 a70:	09 f4       	brne	.+2      	; 0xa74 <__ultoa_invert+0x48>
 a72:	68 94       	set
 a74:	3f 91       	pop	r19
 a76:	2a e0       	ldi	r18, 0x0A	; 10
 a78:	26 9f       	mul	r18, r22
 a7a:	11 24       	eor	r1, r1
 a7c:	30 19       	sub	r19, r0
 a7e:	30 5d       	subi	r19, 0xD0	; 208
 a80:	31 93       	st	Z+, r19
 a82:	de f6       	brtc	.-74     	; 0xa3a <__ultoa_invert+0xe>
 a84:	cf 01       	movw	r24, r30
 a86:	08 95       	ret
 a88:	46 2f       	mov	r20, r22
 a8a:	47 70       	andi	r20, 0x07	; 7
 a8c:	40 5d       	subi	r20, 0xD0	; 208
 a8e:	41 93       	st	Z+, r20
 a90:	b3 e0       	ldi	r27, 0x03	; 3
 a92:	0f d0       	rcall	.+30     	; 0xab2 <__ultoa_invert+0x86>
 a94:	c9 f7       	brne	.-14     	; 0xa88 <__ultoa_invert+0x5c>
 a96:	f6 cf       	rjmp	.-20     	; 0xa84 <__ultoa_invert+0x58>
 a98:	46 2f       	mov	r20, r22
 a9a:	4f 70       	andi	r20, 0x0F	; 15
 a9c:	40 5d       	subi	r20, 0xD0	; 208
 a9e:	4a 33       	cpi	r20, 0x3A	; 58
 aa0:	18 f0       	brcs	.+6      	; 0xaa8 <__ultoa_invert+0x7c>
 aa2:	49 5d       	subi	r20, 0xD9	; 217
 aa4:	31 fd       	sbrc	r19, 1
 aa6:	40 52       	subi	r20, 0x20	; 32
 aa8:	41 93       	st	Z+, r20
 aaa:	02 d0       	rcall	.+4      	; 0xab0 <__ultoa_invert+0x84>
 aac:	a9 f7       	brne	.-22     	; 0xa98 <__ultoa_invert+0x6c>
 aae:	ea cf       	rjmp	.-44     	; 0xa84 <__ultoa_invert+0x58>
 ab0:	b4 e0       	ldi	r27, 0x04	; 4
 ab2:	a6 95       	lsr	r26
 ab4:	97 95       	ror	r25
 ab6:	87 95       	ror	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	ba 95       	dec	r27
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__ultoa_invert+0x86>
 ac0:	00 97       	sbiw	r24, 0x00	; 0
 ac2:	61 05       	cpc	r22, r1
 ac4:	71 05       	cpc	r23, r1
 ac6:	08 95       	ret
 ac8:	9b 01       	movw	r18, r22
 aca:	ac 01       	movw	r20, r24
 acc:	0a 2e       	mov	r0, r26
 ace:	06 94       	lsr	r0
 ad0:	57 95       	ror	r21
 ad2:	47 95       	ror	r20
 ad4:	37 95       	ror	r19
 ad6:	27 95       	ror	r18
 ad8:	ba 95       	dec	r27
 ada:	c9 f7       	brne	.-14     	; 0xace <__ultoa_invert+0xa2>
 adc:	62 0f       	add	r22, r18
 ade:	73 1f       	adc	r23, r19
 ae0:	84 1f       	adc	r24, r20
 ae2:	95 1f       	adc	r25, r21
 ae4:	a0 1d       	adc	r26, r0
 ae6:	08 95       	ret

00000ae8 <_exit>:
 ae8:	f8 94       	cli

00000aea <__stop_program>:
 aea:	ff cf       	rjmp	.-2      	; 0xaea <__stop_program>
