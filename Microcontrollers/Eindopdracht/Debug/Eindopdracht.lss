
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000d18  00000dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080012a  0080012a  00000dd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015dc  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d50  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae5  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  00004150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000831  00000000  00000000  000048c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000050f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c1       	rjmp	.+710    	; 0x2d4 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	b6 c1       	rjmp	.+876    	; 0x392 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 33       	cpi	r26, 0x36	; 54
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2f d1       	rcall	.+606    	; 0x322 <main>
  c4:	27 c6       	rjmp	.+3150   	; 0xd14 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <sbi_porta>:
{
	int length = snprintf(NULL, 0, "%d", number);
	char str[length + 1];
	snprintf(str, length + 1, "%d", number);
	lcd_write_string(str);
}
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <sbi_porta+0xc>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <sbi_porta+0x8>
  d8:	29 2b       	or	r18, r25
  da:	2b bb       	out	0x1b, r18	; 27
  dc:	08 95       	ret

000000de <cbi_porta>:
  de:	9b b3       	in	r25, 0x1b	; 27
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <cbi_porta+0xc>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <cbi_porta+0x8>
  ee:	20 95       	com	r18
  f0:	29 23       	and	r18, r25
  f2:	2b bb       	out	0x1b, r18	; 27
  f4:	08 95       	ret

000000f6 <lcd_strobe_lcd_e>:
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	e6 df       	rcall	.-52     	; 0xc8 <sbi_porta>
  fc:	83 ec       	ldi	r24, 0xC3	; 195
  fe:	99 e0       	ldi	r25, 0x09	; 9
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_strobe_lcd_e+0xa>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_strobe_lcd_e+0x10>
 106:	00 00       	nop
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	e8 df       	rcall	.-48     	; 0xde <cbi_porta>
 10e:	87 e8       	ldi	r24, 0x87	; 135
 110:	93 e1       	ldi	r25, 0x13	; 19
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_strobe_lcd_e+0x1c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_strobe_lcd_e+0x22>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <lcd_write_character>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	85 bb       	out	0x15, r24	; 21
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	d0 df       	rcall	.-96     	; 0xc8 <sbi_porta>
 128:	e6 df       	rcall	.-52     	; 0xf6 <lcd_strobe_lcd_e>
 12a:	c2 95       	swap	r28
 12c:	c0 7f       	andi	r28, 0xF0	; 240
 12e:	c5 bb       	out	0x15, r28	; 21
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	c9 df       	rcall	.-110    	; 0xc8 <sbi_porta>
 136:	df df       	rcall	.-66     	; 0xf6 <lcd_strobe_lcd_e>
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <lcd_write_command>:
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
 140:	85 bb       	out	0x15, r24	; 21
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	cb df       	rcall	.-106    	; 0xde <cbi_porta>
 148:	d6 df       	rcall	.-84     	; 0xf6 <lcd_strobe_lcd_e>
 14a:	c2 95       	swap	r28
 14c:	c0 7f       	andi	r28, 0xF0	; 240
 14e:	c5 bb       	out	0x15, r28	; 21
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	c4 df       	rcall	.-120    	; 0xde <cbi_porta>
 156:	cf df       	rcall	.-98     	; 0xf6 <lcd_strobe_lcd_e>
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_clear>:
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	ee df       	rcall	.-36     	; 0x13c <lcd_write_command>
 160:	87 e8       	ldi	r24, 0x87	; 135
 162:	93 e1       	ldi	r25, 0x13	; 19
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_clear+0x8>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_clear+0xe>
 16a:	00 00       	nop
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	e6 cf       	rjmp	.-52     	; 0x13c <lcd_write_command>
 170:	08 95       	ret

00000172 <init_4bits_mode>:
 172:	cf 93       	push	r28
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	84 bb       	out	0x14, r24	; 20
 178:	85 bb       	out	0x15, r24	; 21
 17a:	8a bb       	out	0x1a, r24	; 26
 17c:	15 ba       	out	0x15, r1	; 21
 17e:	1b ba       	out	0x1b, r1	; 27
 180:	c0 e2       	ldi	r28, 0x20	; 32
 182:	c5 bb       	out	0x15, r28	; 21
 184:	b8 df       	rcall	.-144    	; 0xf6 <lcd_strobe_lcd_e>
 186:	c5 bb       	out	0x15, r28	; 21
 188:	b6 df       	rcall	.-148    	; 0xf6 <lcd_strobe_lcd_e>
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	b3 df       	rcall	.-154    	; 0xf6 <lcd_strobe_lcd_e>
 190:	15 ba       	out	0x15, r1	; 21
 192:	b1 df       	rcall	.-158    	; 0xf6 <lcd_strobe_lcd_e>
 194:	80 ef       	ldi	r24, 0xF0	; 240
 196:	85 bb       	out	0x15, r24	; 21
 198:	ae df       	rcall	.-164    	; 0xf6 <lcd_strobe_lcd_e>
 19a:	15 ba       	out	0x15, r1	; 21
 19c:	ac df       	rcall	.-168    	; 0xf6 <lcd_strobe_lcd_e>
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	a9 df       	rcall	.-174    	; 0xf6 <lcd_strobe_lcd_e>
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	ca df       	rcall	.-108    	; 0x13c <lcd_write_command>
 1a8:	a6 df       	rcall	.-180    	; 0xf6 <lcd_strobe_lcd_e>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_write_string>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd_write_string+0xc>
 1b6:	b2 df       	rcall	.-156    	; 0x11c <lcd_write_character>
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	88 81       	ld	r24, Y
 1bc:	81 11       	cpse	r24, r1
 1be:	fb cf       	rjmp	.-10     	; 0x1b6 <lcd_write_string+0x8>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_write_double>:

void lcd_write_double(char prefix[], double number, char suffix[])
{
 1c6:	4f 92       	push	r4
 1c8:	5f 92       	push	r5
 1ca:	6f 92       	push	r6
 1cc:	7f 92       	push	r7
 1ce:	8f 92       	push	r8
 1d0:	9f 92       	push	r9
 1d2:	af 92       	push	r10
 1d4:	bf 92       	push	r11
 1d6:	cf 92       	push	r12
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	d8 2e       	mov	r13, r24
 1ec:	c9 2e       	mov	r12, r25
 1ee:	94 2e       	mov	r9, r20
 1f0:	85 2e       	mov	r8, r21
 1f2:	76 2e       	mov	r7, r22
 1f4:	67 2e       	mov	r6, r23
 1f6:	52 2e       	mov	r5, r18
 1f8:	43 2e       	mov	r4, r19
	int length = snprintf(NULL, 0, "%s: %.3f %s", prefix, number, suffix);
	char str[length + 1];
	snprintf(str, length + 1, "%s: %.3f %s", prefix, number, suffix);
	lcd_write_string(str);
}
 1fa:	ad b6       	in	r10, 0x3d	; 61
 1fc:	be b6       	in	r11, 0x3e	; 62
	lcd_write_string(str);
}

void lcd_write_double(char prefix[], double number, char suffix[])
{
	int length = snprintf(NULL, 0, "%s: %.3f %s", prefix, number, suffix);
 1fe:	3f 93       	push	r19
 200:	2f 93       	push	r18
 202:	7f 93       	push	r23
 204:	6f 93       	push	r22
 206:	5f 93       	push	r21
 208:	4f 93       	push	r20
 20a:	9f 93       	push	r25
 20c:	8f 93       	push	r24
 20e:	0f 2e       	mov	r0, r31
 210:	f5 e1       	ldi	r31, 0x15	; 21
 212:	ef 2e       	mov	r14, r31
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	ff 2e       	mov	r15, r31
 218:	f0 2d       	mov	r31, r0
 21a:	ff 92       	push	r15
 21c:	ef 92       	push	r14
 21e:	1f 92       	push	r1
 220:	1f 92       	push	r1
 222:	1f 92       	push	r1
 224:	1f 92       	push	r1
 226:	8d d2       	rcall	.+1306   	; 0x742 <snprintf>
	char str[length + 1];
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	2d b7       	in	r18, 0x3d	; 61
 22c:	3e b7       	in	r19, 0x3e	; 62
 22e:	22 5f       	subi	r18, 0xF2	; 242
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	3e bf       	out	0x3e, r19	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	2d bf       	out	0x3d, r18	; 61
 23c:	28 1b       	sub	r18, r24
 23e:	39 0b       	sbc	r19, r25
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	3e bf       	out	0x3e, r19	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	2d bf       	out	0x3d, r18	; 61
 24a:	0d b7       	in	r16, 0x3d	; 61
 24c:	1e b7       	in	r17, 0x3e	; 62
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	1f 4f       	sbci	r17, 0xFF	; 255
	snprintf(str, length + 1, "%s: %.3f %s", prefix, number, suffix);
 252:	4f 92       	push	r4
 254:	5f 92       	push	r5
 256:	6f 92       	push	r6
 258:	7f 92       	push	r7
 25a:	8f 92       	push	r8
 25c:	9f 92       	push	r9
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ff 92       	push	r15
 264:	ef 92       	push	r14
 266:	9f 93       	push	r25
 268:	8f 93       	push	r24
 26a:	1f 93       	push	r17
 26c:	0f 93       	push	r16
 26e:	69 d2       	rcall	.+1234   	; 0x742 <snprintf>
	lcd_write_string(str);
 270:	80 2f       	mov	r24, r16
 272:	91 2f       	mov	r25, r17
 274:	9c df       	rcall	.-200    	; 0x1ae <lcd_write_string>
}
 276:	8d b7       	in	r24, 0x3d	; 61
 278:	9e b7       	in	r25, 0x3e	; 62
 27a:	0e 96       	adiw	r24, 0x0e	; 14
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	9e bf       	out	0x3e, r25	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	8d bf       	out	0x3d, r24	; 61
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	be be       	out	0x3e, r11	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	ad be       	out	0x3d, r10	; 61
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	bf 90       	pop	r11
 2a2:	af 90       	pop	r10
 2a4:	9f 90       	pop	r9
 2a6:	8f 90       	pop	r8
 2a8:	7f 90       	pop	r7
 2aa:	6f 90       	pop	r6
 2ac:	5f 90       	pop	r5
 2ae:	4f 90       	pop	r4
 2b0:	08 95       	ret

000002b2 <ultrasoon_value_set_event>:
	ultrasonic_send_pulse();
}

static void ultrasoon_value_set_event(uint16_t value){
	// if the SODAR is initialising, then look for close start object.
	if(initialising){
 2b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b6:	22 23       	and	r18, r18
 2b8:	51 f0       	breq	.+20     	; 0x2ce <ultrasoon_value_set_event+0x1c>
		if(value > 0  && value < MAX_DISTANCE_INIT){
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	43 97       	sbiw	r24, 0x13	; 19
 2be:	38 f4       	brcc	.+14     	; 0x2ce <ultrasoon_value_set_event+0x1c>
			stepper_rotate_stop();
 2c0:	d7 d0       	rcall	.+430    	; 0x470 <stepper_rotate_stop>
			initialising = false;
 2c2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			// when found, set the initial rotation.
			stepper_rotate_angle(ROTAITION_ANGLE, CounterClockWise);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	c4 c0       	rjmp	.+392    	; 0x456 <stepper_rotate_angle>
 2ce:	08 95       	ret

000002d0 <snap_event_trigger>:
	ultrasonic_handle_interrupt();
}

static void snap_event_trigger(uint8_t rotation){
	// when X amount of steps are taken, do pulse.
	ultrasonic_send_pulse();
 2d0:	0a c1       	rjmp	.+532    	; 0x4e6 <ultrasonic_send_pulse>
 2d2:	08 95       	ret

000002d4 <__vector_3>:

// if true: in init mode, looking for starting point.
bool initialising = true;

ISR(INT2_vect)
{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	0b b6       	in	r0, 0x3b	; 59
 2e0:	0f 92       	push	r0
 2e2:	2f 93       	push	r18
 2e4:	3f 93       	push	r19
 2e6:	4f 93       	push	r20
 2e8:	5f 93       	push	r21
 2ea:	6f 93       	push	r22
 2ec:	7f 93       	push	r23
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	ultrasonic_handle_interrupt();
 2fa:	02 d1       	rcall	.+516    	; 0x500 <ultrasonic_handle_interrupt>
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0b be       	out	0x3b, r0	; 59
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <main>:
}

int main(void)
{
	// initialize ultrasonic sensor driver.
	ultrasonic_init();
 322:	d2 d0       	rcall	.+420    	; 0x4c8 <ultrasonic_init>
	// initialize LCD display in 4 bit mode.
	init_4bits_mode();
 324:	26 df       	rcall	.-436    	; 0x172 <init_4bits_mode>
	// initialize stepper driver.
	init_stepper_driver();
 326:	a6 d0       	rcall	.+332    	; 0x474 <init_stepper_driver>
	// set the event when a pulse must be sent.
	set_snap_event(&snap_event_trigger);
 328:	88 e6       	ldi	r24, 0x68	; 104
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	2d d0       	rcall	.+90     	; 0x388 <set_snap_event>
	// set a event for when a value has been set from the ultrasonic sensor.
	set_value_trigger_event(&ultrasoon_value_set_event);
 32e:	89 e5       	ldi	r24, 0x59	; 89
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	04 d1       	rcall	.+520    	; 0x53c <set_value_trigger_event>
 334:	87 ea       	ldi	r24, 0xA7	; 167
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	91 e6       	ldi	r25, 0x61	; 97
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x16>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x1c>
 33e:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 340:	0d df       	rcall	.-486    	; 0x15c <lcd_clear>
	
	stepper_rotate_angle(INIT_ROTAITION_ANGLE, ClockWise);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	88 e5       	ldi	r24, 0x58	; 88
 346:	92 e0       	ldi	r25, 0x02	; 2
 348:	86 d0       	rcall	.+268    	; 0x456 <stepper_rotate_angle>
 34a:	08 df       	rcall	.-496    	; 0x15c <lcd_clear>
    while (1) 
    {
		lcd_clear();
 34c:	fc d0       	rcall	.+504    	; 0x546 <ultrasonic_get_timer_dist>
		// set the ultrasonic value to the lcd.
		lcd_write_double("dist" ,ultrasonic_get_timer_dist(), "cm");
 34e:	ab 01       	movw	r20, r22
 350:	bc 01       	movw	r22, r24
 352:	21 e2       	ldi	r18, 0x21	; 33
 354:	31 e0       	ldi	r19, 0x01	; 1
 356:	84 e2       	ldi	r24, 0x24	; 36
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	35 df       	rcall	.-406    	; 0x1c6 <lcd_write_double>
 35c:	84 e6       	ldi	r24, 0x64	; 100
 35e:	90 e0       	ldi	r25, 0x00	; 0
		
		wait_ms(LCD_SET_DELAY);
 360:	a4 d0       	rcall	.+328    	; 0x4aa <wait_ms>
 362:	f3 cf       	rjmp	.-26     	; 0x34a <main+0x28>

00000364 <set_stepper_state>:

void stepper_rotate_full_rotation_CW();
void stepper_rotate_full_rotation_CCW();

void set_stepper_state(uint8_t count){
	if(rotation == ClockWise){
 364:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <rotation>
 368:	91 11       	cpse	r25, r1
 36a:	07 c0       	rjmp	.+14     	; 0x37a <set_stepper_state+0x16>
		PORTE = CW[count];
 36c:	e8 2f       	mov	r30, r24
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	ef 5f       	subi	r30, 0xFF	; 255
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	80 81       	ld	r24, Z
 376:	83 b9       	out	0x03, r24	; 3
 378:	08 95       	ret
	} else {
		PORTE = CCW[count];
 37a:	e8 2f       	mov	r30, r24
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	e7 5f       	subi	r30, 0xF7	; 247
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	80 81       	ld	r24, Z
 384:	83 b9       	out	0x03, r24	; 3
 386:	08 95       	ret

00000388 <set_snap_event>:
}

void (*snap_event)(uint8_t);

void set_snap_event(void (*snap_event_p)(uint8_t)){
	snap_event = snap_event_p;
 388:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <snap_event+0x1>
 38c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <snap_event>
 390:	08 95       	ret

00000392 <__vector_9>:
}

ISR( TIMER2_COMP_vect ){
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	0b b6       	in	r0, 0x3b	; 59
 39e:	0f 92       	push	r0
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	
	TCNT2 = 0;
 3b8:	14 bc       	out	0x24, r1	; 36
	
	set_stepper_state(stepper_state);
 3ba:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 3be:	d2 df       	rcall	.-92     	; 0x364 <set_stepper_state>
		
	if(stepper_state < 7){
 3c0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 3c4:	87 30       	cpi	r24, 0x07	; 7
 3c6:	20 f4       	brcc	.+8      	; 0x3d0 <__vector_9+0x3e>
		stepper_state++;
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 3ce:	30 c0       	rjmp	.+96     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	} else {
		
		stepper_state = 0;
 3d0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
		
		if(steps_to_do == 0){
 3d4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <steps_to_do>
 3d8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <steps_to_do+0x1>
 3dc:	00 97       	sbiw	r24, 0x00	; 0
 3de:	99 f4       	brne	.+38     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			
			// change rotation if the steps todo is 0.
			if(rotation == ClockWise){
 3e0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <rotation>
 3e4:	81 11       	cpse	r24, r1
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <__vector_9+0x5e>
				rotation = CounterClockWise;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rotation>
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <__vector_9+0x62>
			} else {
				rotation = ClockWise;
 3f0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <rotation>
			}
			
			// set the steps to do again.
			steps_to_do = steps_each_turn;
 3f4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <steps_each_turn>
 3f8:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <steps_each_turn+0x1>
 3fc:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <steps_to_do+0x1>
 400:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <steps_to_do>
 404:	15 c0       	rjmp	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			
		} else {
			
			// if the stepper step value is at a multiplier of 32 then make snap event.
			if(steps_to_do % STEPS_EACH_PULSE == 0){
 406:	9c 01       	movw	r18, r24
 408:	2f 71       	andi	r18, 0x1F	; 31
 40a:	33 27       	eor	r19, r19
 40c:	23 2b       	or	r18, r19
 40e:	39 f4       	brne	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				
				if(snap_event != NULL)
 410:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <snap_event>
 414:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <snap_event+0x1>
 418:	30 97       	sbiw	r30, 0x00	; 0
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
					snap_event(steps_to_do);
 41c:	09 95       	icall
			}
			
			steps_to_do--;
 41e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <steps_to_do>
 422:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <steps_to_do+0x1>
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <steps_to_do+0x1>
 42c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <steps_to_do>
		}
	}
}
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0b be       	out	0x3b, r0	; 59
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <stepper_rotate_angle>:

void stepper_rotate_angle(uint16_t steps, enum rotation_wise rot){
	steps_to_do = steps;
 456:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <steps_to_do+0x1>
 45a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <steps_to_do>
	steps_each_turn = steps;
 45e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <steps_each_turn+0x1>
 462:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <steps_each_turn>
	rotation = rot;
 466:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <rotation>
	TCCR2 = 0b00001100;
 46a:	8c e0       	ldi	r24, 0x0C	; 12
 46c:	85 bd       	out	0x25, r24	; 37
 46e:	08 95       	ret

00000470 <stepper_rotate_stop>:
}

void stepper_rotate_stop(){
	TCCR2 = 0b00000000;
 470:	15 bc       	out	0x25, r1	; 37
 472:	08 95       	ret

00000474 <init_stepper_driver>:
}

void init_stepper_driver(){
	DDRE = 0xff;
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	82 b9       	out	0x02, r24	; 2
	DDRG = 0xff;
 478:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTG = 0x01;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	PORTE = 0x00;
 482:	13 b8       	out	0x03, r1	; 3
	OCR2 = 150;
 484:	86 e9       	ldi	r24, 0x96	; 150
 486:	83 bd       	out	0x23, r24	; 35
	TIMSK = BIT(7);
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	87 bf       	out	0x37, r24	; 55
	sei();
 48c:	78 94       	sei
 48e:	08 95       	ret

00000490 <wait_us>:

void (*value_set_event)(uint16_t);

void wait_us(unsigned int us)
{
	for(int i = 0; i < us; i++)
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <wait_us+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 496:	43 e0       	ldi	r20, 0x03	; 3
 498:	4a 95       	dec	r20
 49a:	f1 f7       	brne	.-4      	; 0x498 <wait_us+0x8>
 49c:	00 00       	nop
 49e:	2f 5f       	subi	r18, 0xFF	; 255
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	28 17       	cp	r18, r24
 4a4:	39 07       	cpc	r19, r25
 4a6:	b8 f3       	brcs	.-18     	; 0x496 <wait_us+0x6>
	{
		_delay_us(1);
	}
}
 4a8:	08 95       	ret

000004aa <wait_ms>:

void wait_ms(unsigned int ms)
{
	
	for(int i = 0; i < ms; i++)
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <wait_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b0:	e3 ec       	ldi	r30, 0xC3	; 195
 4b2:	f9 e0       	ldi	r31, 0x09	; 9
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <wait_ms+0xa>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <wait_ms+0x10>
 4ba:	00 00       	nop
 4bc:	2f 5f       	subi	r18, 0xFF	; 255
 4be:	3f 4f       	sbci	r19, 0xFF	; 255
 4c0:	28 17       	cp	r18, r24
 4c2:	39 07       	cpc	r19, r25
 4c4:	a8 f3       	brcs	.-22     	; 0x4b0 <wait_ms+0x6>
	{
		_delay_ms(1);
	}
}
 4c6:	08 95       	ret

000004c8 <ultrasonic_init>:
void ultrasonic_init()
{
	DDRG = 0xFF; // port g all output. pin 0 is trig, the rest is for debug
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0x00; // port D pin 0 on input. 0 is echo and also interrupt
 4ce:	11 ba       	out	0x11, r1	; 17
	
	EICRA = 0x30; // interrupt PORTD on pin 2, rising edge
 4d0:	80 e3       	ldi	r24, 0x30	; 48
 4d2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	
	EIMSK |= 0x04; // enable interrupt on pin 2 (INT2)
 4d6:	89 b7       	in	r24, 0x39	; 57
 4d8:	84 60       	ori	r24, 0x04	; 4
 4da:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = 0b00000000; // initialize timer1, prescaler=256
 4dc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // CTC compare A, RUN
 4de:	8c e0       	ldi	r24, 0x0C	; 12
 4e0:	8e bd       	out	0x2e, r24	; 46
	
	sei(); // turn on interrupt system
 4e2:	78 94       	sei
 4e4:	08 95       	ret

000004e6 <ultrasonic_send_pulse>:
}

void ultrasonic_send_pulse()
{
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
	PORTG = 0x00; // 10 us low pulse
 4ea:	c5 e6       	ldi	r28, 0x65	; 101
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
 4ee:	18 82       	st	Y, r1
	wait_us(10);
 4f0:	8a e0       	ldi	r24, 0x0A	; 10
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	cd df       	rcall	.-102    	; 0x490 <wait_us>
	PORTG = 0x01;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	88 83       	st	Y, r24
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <ultrasonic_handle_interrupt>:

void ultrasonic_handle_interrupt()
{
	// if the interrupt was generated on a rising edge (start sending echo)
	if (int_stat == INTERRUPT_RISING)
 500:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <int_stat>
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	41 f4       	brne	.+16     	; 0x518 <ultrasonic_handle_interrupt+0x18>
	{
		// set interrupt pin 2 on PORTD to falling edge
		EICRA = 0x20;
 508:	80 e2       	ldi	r24, 0x20	; 32
 50a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		
		// reset the time in timer1
		TCNT1 = 0x00;
 50e:	1d bc       	out	0x2d, r1	; 45
 510:	1c bc       	out	0x2c, r1	; 44
		
		// set interrupt status
		int_stat = INTERRUPT_FALLING;
 512:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <int_stat>
 516:	08 95       	ret
	} else
	// else if it was generated on a falling edge (end sending echo)
	{
		// set interrupt pin 0 on PORTD to rising edge
		EICRA = 0x30; // interrupt PORTD on pin 2, rising edge
 518:	80 e3       	ldi	r24, 0x30	; 48
 51a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
		
		// read timer1 into time_dist
		timer_dist = TCNT1;
 51e:	8c b5       	in	r24, 0x2c	; 44
 520:	9d b5       	in	r25, 0x2d	; 45
 522:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <timer_dist+0x1>
 526:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <timer_dist>
		
		//EVENT
		value_set_event(timer_dist);
 52a:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <value_set_event>
 52e:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <value_set_event+0x1>
 532:	09 95       	icall
		
		// set interrupt status
		int_stat = INTERRUPT_RISING;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <int_stat>
 53a:	08 95       	ret

0000053c <set_value_trigger_event>:
	}
}

void set_value_trigger_event(void (*value_set_event_p)(uint16_t)){
	// event that is triggered when a value is set.
	value_set_event = value_set_event_p;
 53c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <value_set_event+0x1>
 540:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <value_set_event>
 544:	08 95       	ret

00000546 <ultrasonic_get_timer_dist>:
}

float ultrasonic_get_timer_dist()
{
	return timer_dist * (float)(340 / 2.0);
 546:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <timer_dist>
 54a:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <timer_dist+0x1>
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	06 d0       	rcall	.+12     	; 0x560 <__floatunsisf>
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	4a e2       	ldi	r20, 0x2A	; 42
 55a:	53 e4       	ldi	r21, 0x43	; 67
 55c:	3e c0       	rjmp	.+124    	; 0x5da <__mulsf3>
}
 55e:	08 95       	ret

00000560 <__floatunsisf>:
 560:	e8 94       	clt
 562:	09 c0       	rjmp	.+18     	; 0x576 <__floatsisf+0x12>

00000564 <__floatsisf>:
 564:	97 fb       	bst	r25, 7
 566:	3e f4       	brtc	.+14     	; 0x576 <__floatsisf+0x12>
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	99 23       	and	r25, r25
 578:	a9 f0       	breq	.+42     	; 0x5a4 <__floatsisf+0x40>
 57a:	f9 2f       	mov	r31, r25
 57c:	96 e9       	ldi	r25, 0x96	; 150
 57e:	bb 27       	eor	r27, r27
 580:	93 95       	inc	r25
 582:	f6 95       	lsr	r31
 584:	87 95       	ror	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b7 95       	ror	r27
 58c:	f1 11       	cpse	r31, r1
 58e:	f8 cf       	rjmp	.-16     	; 0x580 <__floatsisf+0x1c>
 590:	fa f4       	brpl	.+62     	; 0x5d0 <__floatsisf+0x6c>
 592:	bb 0f       	add	r27, r27
 594:	11 f4       	brne	.+4      	; 0x59a <__floatsisf+0x36>
 596:	60 ff       	sbrs	r22, 0
 598:	1b c0       	rjmp	.+54     	; 0x5d0 <__floatsisf+0x6c>
 59a:	6f 5f       	subi	r22, 0xFF	; 255
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	16 c0       	rjmp	.+44     	; 0x5d0 <__floatsisf+0x6c>
 5a4:	88 23       	and	r24, r24
 5a6:	11 f0       	breq	.+4      	; 0x5ac <__floatsisf+0x48>
 5a8:	96 e9       	ldi	r25, 0x96	; 150
 5aa:	11 c0       	rjmp	.+34     	; 0x5ce <__floatsisf+0x6a>
 5ac:	77 23       	and	r23, r23
 5ae:	21 f0       	breq	.+8      	; 0x5b8 <__floatsisf+0x54>
 5b0:	9e e8       	ldi	r25, 0x8E	; 142
 5b2:	87 2f       	mov	r24, r23
 5b4:	76 2f       	mov	r23, r22
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <__floatsisf+0x5e>
 5b8:	66 23       	and	r22, r22
 5ba:	71 f0       	breq	.+28     	; 0x5d8 <__floatsisf+0x74>
 5bc:	96 e8       	ldi	r25, 0x86	; 134
 5be:	86 2f       	mov	r24, r22
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	2a f0       	brmi	.+10     	; 0x5d0 <__floatsisf+0x6c>
 5c6:	9a 95       	dec	r25
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	da f7       	brpl	.-10     	; 0x5c6 <__floatsisf+0x62>
 5d0:	88 0f       	add	r24, r24
 5d2:	96 95       	lsr	r25
 5d4:	87 95       	ror	r24
 5d6:	97 f9       	bld	r25, 7
 5d8:	08 95       	ret

000005da <__mulsf3>:
 5da:	0b d0       	rcall	.+22     	; 0x5f2 <__mulsf3x>
 5dc:	78 c0       	rjmp	.+240    	; 0x6ce <__fp_round>
 5de:	69 d0       	rcall	.+210    	; 0x6b2 <__fp_pscA>
 5e0:	28 f0       	brcs	.+10     	; 0x5ec <__mulsf3+0x12>
 5e2:	6e d0       	rcall	.+220    	; 0x6c0 <__fp_pscB>
 5e4:	18 f0       	brcs	.+6      	; 0x5ec <__mulsf3+0x12>
 5e6:	95 23       	and	r25, r21
 5e8:	09 f0       	breq	.+2      	; 0x5ec <__mulsf3+0x12>
 5ea:	5a c0       	rjmp	.+180    	; 0x6a0 <__fp_inf>
 5ec:	5f c0       	rjmp	.+190    	; 0x6ac <__fp_nan>
 5ee:	11 24       	eor	r1, r1
 5f0:	a2 c0       	rjmp	.+324    	; 0x736 <__fp_szero>

000005f2 <__mulsf3x>:
 5f2:	7e d0       	rcall	.+252    	; 0x6f0 <__fp_split3>
 5f4:	a0 f3       	brcs	.-24     	; 0x5de <__mulsf3+0x4>

000005f6 <__mulsf3_pse>:
 5f6:	95 9f       	mul	r25, r21
 5f8:	d1 f3       	breq	.-12     	; 0x5ee <__mulsf3+0x14>
 5fa:	95 0f       	add	r25, r21
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	55 1f       	adc	r21, r21
 600:	62 9f       	mul	r22, r18
 602:	f0 01       	movw	r30, r0
 604:	72 9f       	mul	r23, r18
 606:	bb 27       	eor	r27, r27
 608:	f0 0d       	add	r31, r0
 60a:	b1 1d       	adc	r27, r1
 60c:	63 9f       	mul	r22, r19
 60e:	aa 27       	eor	r26, r26
 610:	f0 0d       	add	r31, r0
 612:	b1 1d       	adc	r27, r1
 614:	aa 1f       	adc	r26, r26
 616:	64 9f       	mul	r22, r20
 618:	66 27       	eor	r22, r22
 61a:	b0 0d       	add	r27, r0
 61c:	a1 1d       	adc	r26, r1
 61e:	66 1f       	adc	r22, r22
 620:	82 9f       	mul	r24, r18
 622:	22 27       	eor	r18, r18
 624:	b0 0d       	add	r27, r0
 626:	a1 1d       	adc	r26, r1
 628:	62 1f       	adc	r22, r18
 62a:	73 9f       	mul	r23, r19
 62c:	b0 0d       	add	r27, r0
 62e:	a1 1d       	adc	r26, r1
 630:	62 1f       	adc	r22, r18
 632:	83 9f       	mul	r24, r19
 634:	a0 0d       	add	r26, r0
 636:	61 1d       	adc	r22, r1
 638:	22 1f       	adc	r18, r18
 63a:	74 9f       	mul	r23, r20
 63c:	33 27       	eor	r19, r19
 63e:	a0 0d       	add	r26, r0
 640:	61 1d       	adc	r22, r1
 642:	23 1f       	adc	r18, r19
 644:	84 9f       	mul	r24, r20
 646:	60 0d       	add	r22, r0
 648:	21 1d       	adc	r18, r1
 64a:	82 2f       	mov	r24, r18
 64c:	76 2f       	mov	r23, r22
 64e:	6a 2f       	mov	r22, r26
 650:	11 24       	eor	r1, r1
 652:	9f 57       	subi	r25, 0x7F	; 127
 654:	50 40       	sbci	r21, 0x00	; 0
 656:	8a f0       	brmi	.+34     	; 0x67a <__mulsf3_pse+0x84>
 658:	e1 f0       	breq	.+56     	; 0x692 <__mulsf3_pse+0x9c>
 65a:	88 23       	and	r24, r24
 65c:	4a f0       	brmi	.+18     	; 0x670 <__mulsf3_pse+0x7a>
 65e:	ee 0f       	add	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	bb 1f       	adc	r27, r27
 664:	66 1f       	adc	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	91 50       	subi	r25, 0x01	; 1
 66c:	50 40       	sbci	r21, 0x00	; 0
 66e:	a9 f7       	brne	.-22     	; 0x65a <__mulsf3_pse+0x64>
 670:	9e 3f       	cpi	r25, 0xFE	; 254
 672:	51 05       	cpc	r21, r1
 674:	70 f0       	brcs	.+28     	; 0x692 <__mulsf3_pse+0x9c>
 676:	14 c0       	rjmp	.+40     	; 0x6a0 <__fp_inf>
 678:	5e c0       	rjmp	.+188    	; 0x736 <__fp_szero>
 67a:	5f 3f       	cpi	r21, 0xFF	; 255
 67c:	ec f3       	brlt	.-6      	; 0x678 <__mulsf3_pse+0x82>
 67e:	98 3e       	cpi	r25, 0xE8	; 232
 680:	dc f3       	brlt	.-10     	; 0x678 <__mulsf3_pse+0x82>
 682:	86 95       	lsr	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b7 95       	ror	r27
 68a:	f7 95       	ror	r31
 68c:	e7 95       	ror	r30
 68e:	9f 5f       	subi	r25, 0xFF	; 255
 690:	c1 f7       	brne	.-16     	; 0x682 <__mulsf3_pse+0x8c>
 692:	fe 2b       	or	r31, r30
 694:	88 0f       	add	r24, r24
 696:	91 1d       	adc	r25, r1
 698:	96 95       	lsr	r25
 69a:	87 95       	ror	r24
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret

000006a0 <__fp_inf>:
 6a0:	97 f9       	bld	r25, 7
 6a2:	9f 67       	ori	r25, 0x7F	; 127
 6a4:	80 e8       	ldi	r24, 0x80	; 128
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	08 95       	ret

000006ac <__fp_nan>:
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	80 ec       	ldi	r24, 0xC0	; 192
 6b0:	08 95       	ret

000006b2 <__fp_pscA>:
 6b2:	00 24       	eor	r0, r0
 6b4:	0a 94       	dec	r0
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	18 06       	cpc	r1, r24
 6bc:	09 06       	cpc	r0, r25
 6be:	08 95       	ret

000006c0 <__fp_pscB>:
 6c0:	00 24       	eor	r0, r0
 6c2:	0a 94       	dec	r0
 6c4:	12 16       	cp	r1, r18
 6c6:	13 06       	cpc	r1, r19
 6c8:	14 06       	cpc	r1, r20
 6ca:	05 06       	cpc	r0, r21
 6cc:	08 95       	ret

000006ce <__fp_round>:
 6ce:	09 2e       	mov	r0, r25
 6d0:	03 94       	inc	r0
 6d2:	00 0c       	add	r0, r0
 6d4:	11 f4       	brne	.+4      	; 0x6da <__fp_round+0xc>
 6d6:	88 23       	and	r24, r24
 6d8:	52 f0       	brmi	.+20     	; 0x6ee <__fp_round+0x20>
 6da:	bb 0f       	add	r27, r27
 6dc:	40 f4       	brcc	.+16     	; 0x6ee <__fp_round+0x20>
 6de:	bf 2b       	or	r27, r31
 6e0:	11 f4       	brne	.+4      	; 0x6e6 <__fp_round+0x18>
 6e2:	60 ff       	sbrs	r22, 0
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <__fp_round+0x20>
 6e6:	6f 5f       	subi	r22, 0xFF	; 255
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__fp_split3>:
 6f0:	57 fd       	sbrc	r21, 7
 6f2:	90 58       	subi	r25, 0x80	; 128
 6f4:	44 0f       	add	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	59 f0       	breq	.+22     	; 0x710 <__fp_splitA+0x10>
 6fa:	5f 3f       	cpi	r21, 0xFF	; 255
 6fc:	71 f0       	breq	.+28     	; 0x71a <__fp_splitA+0x1a>
 6fe:	47 95       	ror	r20

00000700 <__fp_splitA>:
 700:	88 0f       	add	r24, r24
 702:	97 fb       	bst	r25, 7
 704:	99 1f       	adc	r25, r25
 706:	61 f0       	breq	.+24     	; 0x720 <__fp_splitA+0x20>
 708:	9f 3f       	cpi	r25, 0xFF	; 255
 70a:	79 f0       	breq	.+30     	; 0x72a <__fp_splitA+0x2a>
 70c:	87 95       	ror	r24
 70e:	08 95       	ret
 710:	12 16       	cp	r1, r18
 712:	13 06       	cpc	r1, r19
 714:	14 06       	cpc	r1, r20
 716:	55 1f       	adc	r21, r21
 718:	f2 cf       	rjmp	.-28     	; 0x6fe <__fp_split3+0xe>
 71a:	46 95       	lsr	r20
 71c:	f1 df       	rcall	.-30     	; 0x700 <__fp_splitA>
 71e:	08 c0       	rjmp	.+16     	; 0x730 <__fp_splitA+0x30>
 720:	16 16       	cp	r1, r22
 722:	17 06       	cpc	r1, r23
 724:	18 06       	cpc	r1, r24
 726:	99 1f       	adc	r25, r25
 728:	f1 cf       	rjmp	.-30     	; 0x70c <__fp_splitA+0xc>
 72a:	86 95       	lsr	r24
 72c:	71 05       	cpc	r23, r1
 72e:	61 05       	cpc	r22, r1
 730:	08 94       	sec
 732:	08 95       	ret

00000734 <__fp_zero>:
 734:	e8 94       	clt

00000736 <__fp_szero>:
 736:	bb 27       	eor	r27, r27
 738:	66 27       	eor	r22, r22
 73a:	77 27       	eor	r23, r23
 73c:	cb 01       	movw	r24, r22
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <snprintf>:
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	2e 97       	sbiw	r28, 0x0e	; 14
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	de bf       	out	0x3e, r29	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	cd bf       	out	0x3d, r28	; 61
 75a:	0d 89       	ldd	r16, Y+21	; 0x15
 75c:	1e 89       	ldd	r17, Y+22	; 0x16
 75e:	8f 89       	ldd	r24, Y+23	; 0x17
 760:	98 8d       	ldd	r25, Y+24	; 0x18
 762:	26 e0       	ldi	r18, 0x06	; 6
 764:	2c 83       	std	Y+4, r18	; 0x04
 766:	1a 83       	std	Y+2, r17	; 0x02
 768:	09 83       	std	Y+1, r16	; 0x01
 76a:	97 ff       	sbrs	r25, 7
 76c:	02 c0       	rjmp	.+4      	; 0x772 <snprintf+0x30>
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e8       	ldi	r25, 0x80	; 128
 772:	01 97       	sbiw	r24, 0x01	; 1
 774:	9e 83       	std	Y+6, r25	; 0x06
 776:	8d 83       	std	Y+5, r24	; 0x05
 778:	ae 01       	movw	r20, r28
 77a:	45 5e       	subi	r20, 0xE5	; 229
 77c:	5f 4f       	sbci	r21, 0xFF	; 255
 77e:	69 8d       	ldd	r22, Y+25	; 0x19
 780:	7a 8d       	ldd	r23, Y+26	; 0x1a
 782:	ce 01       	movw	r24, r28
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	19 d0       	rcall	.+50     	; 0x7ba <vfprintf>
 788:	4d 81       	ldd	r20, Y+5	; 0x05
 78a:	5e 81       	ldd	r21, Y+6	; 0x06
 78c:	57 fd       	sbrc	r21, 7
 78e:	0a c0       	rjmp	.+20     	; 0x7a4 <snprintf+0x62>
 790:	2f 81       	ldd	r18, Y+7	; 0x07
 792:	38 85       	ldd	r19, Y+8	; 0x08
 794:	42 17       	cp	r20, r18
 796:	53 07       	cpc	r21, r19
 798:	0c f4       	brge	.+2      	; 0x79c <snprintf+0x5a>
 79a:	9a 01       	movw	r18, r20
 79c:	f8 01       	movw	r30, r16
 79e:	e2 0f       	add	r30, r18
 7a0:	f3 1f       	adc	r31, r19
 7a2:	10 82       	st	Z, r1
 7a4:	2e 96       	adiw	r28, 0x0e	; 14
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	f8 94       	cli
 7aa:	de bf       	out	0x3e, r29	; 62
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	cd bf       	out	0x3d, r28	; 61
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	08 95       	ret

000007ba <vfprintf>:
 7ba:	2f 92       	push	r2
 7bc:	3f 92       	push	r3
 7be:	4f 92       	push	r4
 7c0:	5f 92       	push	r5
 7c2:	6f 92       	push	r6
 7c4:	7f 92       	push	r7
 7c6:	8f 92       	push	r8
 7c8:	9f 92       	push	r9
 7ca:	af 92       	push	r10
 7cc:	bf 92       	push	r11
 7ce:	cf 92       	push	r12
 7d0:	df 92       	push	r13
 7d2:	ef 92       	push	r14
 7d4:	ff 92       	push	r15
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
 7e2:	2b 97       	sbiw	r28, 0x0b	; 11
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	f8 94       	cli
 7e8:	de bf       	out	0x3e, r29	; 62
 7ea:	0f be       	out	0x3f, r0	; 63
 7ec:	cd bf       	out	0x3d, r28	; 61
 7ee:	6c 01       	movw	r12, r24
 7f0:	7b 01       	movw	r14, r22
 7f2:	8a 01       	movw	r16, r20
 7f4:	fc 01       	movw	r30, r24
 7f6:	17 82       	std	Z+7, r1	; 0x07
 7f8:	16 82       	std	Z+6, r1	; 0x06
 7fa:	83 81       	ldd	r24, Z+3	; 0x03
 7fc:	81 ff       	sbrs	r24, 1
 7fe:	bf c1       	rjmp	.+894    	; 0xb7e <vfprintf+0x3c4>
 800:	ce 01       	movw	r24, r28
 802:	01 96       	adiw	r24, 0x01	; 1
 804:	3c 01       	movw	r6, r24
 806:	f6 01       	movw	r30, r12
 808:	93 81       	ldd	r25, Z+3	; 0x03
 80a:	f7 01       	movw	r30, r14
 80c:	93 fd       	sbrc	r25, 3
 80e:	85 91       	lpm	r24, Z+
 810:	93 ff       	sbrs	r25, 3
 812:	81 91       	ld	r24, Z+
 814:	7f 01       	movw	r14, r30
 816:	88 23       	and	r24, r24
 818:	09 f4       	brne	.+2      	; 0x81c <vfprintf+0x62>
 81a:	ad c1       	rjmp	.+858    	; 0xb76 <vfprintf+0x3bc>
 81c:	85 32       	cpi	r24, 0x25	; 37
 81e:	39 f4       	brne	.+14     	; 0x82e <vfprintf+0x74>
 820:	93 fd       	sbrc	r25, 3
 822:	85 91       	lpm	r24, Z+
 824:	93 ff       	sbrs	r25, 3
 826:	81 91       	ld	r24, Z+
 828:	7f 01       	movw	r14, r30
 82a:	85 32       	cpi	r24, 0x25	; 37
 82c:	21 f4       	brne	.+8      	; 0x836 <vfprintf+0x7c>
 82e:	b6 01       	movw	r22, r12
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	d6 d1       	rcall	.+940    	; 0xbe0 <fputc>
 834:	e8 cf       	rjmp	.-48     	; 0x806 <vfprintf+0x4c>
 836:	91 2c       	mov	r9, r1
 838:	21 2c       	mov	r2, r1
 83a:	31 2c       	mov	r3, r1
 83c:	ff e1       	ldi	r31, 0x1F	; 31
 83e:	f3 15       	cp	r31, r3
 840:	d8 f0       	brcs	.+54     	; 0x878 <vfprintf+0xbe>
 842:	8b 32       	cpi	r24, 0x2B	; 43
 844:	79 f0       	breq	.+30     	; 0x864 <vfprintf+0xaa>
 846:	38 f4       	brcc	.+14     	; 0x856 <vfprintf+0x9c>
 848:	80 32       	cpi	r24, 0x20	; 32
 84a:	79 f0       	breq	.+30     	; 0x86a <vfprintf+0xb0>
 84c:	83 32       	cpi	r24, 0x23	; 35
 84e:	a1 f4       	brne	.+40     	; 0x878 <vfprintf+0xbe>
 850:	23 2d       	mov	r18, r3
 852:	20 61       	ori	r18, 0x10	; 16
 854:	1d c0       	rjmp	.+58     	; 0x890 <vfprintf+0xd6>
 856:	8d 32       	cpi	r24, 0x2D	; 45
 858:	61 f0       	breq	.+24     	; 0x872 <vfprintf+0xb8>
 85a:	80 33       	cpi	r24, 0x30	; 48
 85c:	69 f4       	brne	.+26     	; 0x878 <vfprintf+0xbe>
 85e:	23 2d       	mov	r18, r3
 860:	21 60       	ori	r18, 0x01	; 1
 862:	16 c0       	rjmp	.+44     	; 0x890 <vfprintf+0xd6>
 864:	83 2d       	mov	r24, r3
 866:	82 60       	ori	r24, 0x02	; 2
 868:	38 2e       	mov	r3, r24
 86a:	e3 2d       	mov	r30, r3
 86c:	e4 60       	ori	r30, 0x04	; 4
 86e:	3e 2e       	mov	r3, r30
 870:	2a c0       	rjmp	.+84     	; 0x8c6 <vfprintf+0x10c>
 872:	f3 2d       	mov	r31, r3
 874:	f8 60       	ori	r31, 0x08	; 8
 876:	1d c0       	rjmp	.+58     	; 0x8b2 <vfprintf+0xf8>
 878:	37 fc       	sbrc	r3, 7
 87a:	2d c0       	rjmp	.+90     	; 0x8d6 <vfprintf+0x11c>
 87c:	20 ed       	ldi	r18, 0xD0	; 208
 87e:	28 0f       	add	r18, r24
 880:	2a 30       	cpi	r18, 0x0A	; 10
 882:	40 f0       	brcs	.+16     	; 0x894 <vfprintf+0xda>
 884:	8e 32       	cpi	r24, 0x2E	; 46
 886:	b9 f4       	brne	.+46     	; 0x8b6 <vfprintf+0xfc>
 888:	36 fc       	sbrc	r3, 6
 88a:	75 c1       	rjmp	.+746    	; 0xb76 <vfprintf+0x3bc>
 88c:	23 2d       	mov	r18, r3
 88e:	20 64       	ori	r18, 0x40	; 64
 890:	32 2e       	mov	r3, r18
 892:	19 c0       	rjmp	.+50     	; 0x8c6 <vfprintf+0x10c>
 894:	36 fe       	sbrs	r3, 6
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <vfprintf+0xea>
 898:	8a e0       	ldi	r24, 0x0A	; 10
 89a:	98 9e       	mul	r9, r24
 89c:	20 0d       	add	r18, r0
 89e:	11 24       	eor	r1, r1
 8a0:	92 2e       	mov	r9, r18
 8a2:	11 c0       	rjmp	.+34     	; 0x8c6 <vfprintf+0x10c>
 8a4:	ea e0       	ldi	r30, 0x0A	; 10
 8a6:	2e 9e       	mul	r2, r30
 8a8:	20 0d       	add	r18, r0
 8aa:	11 24       	eor	r1, r1
 8ac:	22 2e       	mov	r2, r18
 8ae:	f3 2d       	mov	r31, r3
 8b0:	f0 62       	ori	r31, 0x20	; 32
 8b2:	3f 2e       	mov	r3, r31
 8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <vfprintf+0x10c>
 8b6:	8c 36       	cpi	r24, 0x6C	; 108
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <vfprintf+0x108>
 8ba:	83 2d       	mov	r24, r3
 8bc:	80 68       	ori	r24, 0x80	; 128
 8be:	38 2e       	mov	r3, r24
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <vfprintf+0x10c>
 8c2:	88 36       	cpi	r24, 0x68	; 104
 8c4:	41 f4       	brne	.+16     	; 0x8d6 <vfprintf+0x11c>
 8c6:	f7 01       	movw	r30, r14
 8c8:	93 fd       	sbrc	r25, 3
 8ca:	85 91       	lpm	r24, Z+
 8cc:	93 ff       	sbrs	r25, 3
 8ce:	81 91       	ld	r24, Z+
 8d0:	7f 01       	movw	r14, r30
 8d2:	81 11       	cpse	r24, r1
 8d4:	b3 cf       	rjmp	.-154    	; 0x83c <vfprintf+0x82>
 8d6:	98 2f       	mov	r25, r24
 8d8:	9f 7d       	andi	r25, 0xDF	; 223
 8da:	95 54       	subi	r25, 0x45	; 69
 8dc:	93 30       	cpi	r25, 0x03	; 3
 8de:	28 f4       	brcc	.+10     	; 0x8ea <vfprintf+0x130>
 8e0:	0c 5f       	subi	r16, 0xFC	; 252
 8e2:	1f 4f       	sbci	r17, 0xFF	; 255
 8e4:	9f e3       	ldi	r25, 0x3F	; 63
 8e6:	99 83       	std	Y+1, r25	; 0x01
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <vfprintf+0x14a>
 8ea:	83 36       	cpi	r24, 0x63	; 99
 8ec:	31 f0       	breq	.+12     	; 0x8fa <vfprintf+0x140>
 8ee:	83 37       	cpi	r24, 0x73	; 115
 8f0:	71 f0       	breq	.+28     	; 0x90e <vfprintf+0x154>
 8f2:	83 35       	cpi	r24, 0x53	; 83
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <vfprintf+0x13e>
 8f6:	55 c0       	rjmp	.+170    	; 0x9a2 <vfprintf+0x1e8>
 8f8:	20 c0       	rjmp	.+64     	; 0x93a <vfprintf+0x180>
 8fa:	f8 01       	movw	r30, r16
 8fc:	80 81       	ld	r24, Z
 8fe:	89 83       	std	Y+1, r24	; 0x01
 900:	0e 5f       	subi	r16, 0xFE	; 254
 902:	1f 4f       	sbci	r17, 0xFF	; 255
 904:	88 24       	eor	r8, r8
 906:	83 94       	inc	r8
 908:	91 2c       	mov	r9, r1
 90a:	53 01       	movw	r10, r6
 90c:	12 c0       	rjmp	.+36     	; 0x932 <vfprintf+0x178>
 90e:	28 01       	movw	r4, r16
 910:	f2 e0       	ldi	r31, 0x02	; 2
 912:	4f 0e       	add	r4, r31
 914:	51 1c       	adc	r5, r1
 916:	f8 01       	movw	r30, r16
 918:	a0 80       	ld	r10, Z
 91a:	b1 80       	ldd	r11, Z+1	; 0x01
 91c:	36 fe       	sbrs	r3, 6
 91e:	03 c0       	rjmp	.+6      	; 0x926 <vfprintf+0x16c>
 920:	69 2d       	mov	r22, r9
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <vfprintf+0x170>
 926:	6f ef       	ldi	r22, 0xFF	; 255
 928:	7f ef       	ldi	r23, 0xFF	; 255
 92a:	c5 01       	movw	r24, r10
 92c:	4e d1       	rcall	.+668    	; 0xbca <strnlen>
 92e:	4c 01       	movw	r8, r24
 930:	82 01       	movw	r16, r4
 932:	f3 2d       	mov	r31, r3
 934:	ff 77       	andi	r31, 0x7F	; 127
 936:	3f 2e       	mov	r3, r31
 938:	15 c0       	rjmp	.+42     	; 0x964 <vfprintf+0x1aa>
 93a:	28 01       	movw	r4, r16
 93c:	22 e0       	ldi	r18, 0x02	; 2
 93e:	42 0e       	add	r4, r18
 940:	51 1c       	adc	r5, r1
 942:	f8 01       	movw	r30, r16
 944:	a0 80       	ld	r10, Z
 946:	b1 80       	ldd	r11, Z+1	; 0x01
 948:	36 fe       	sbrs	r3, 6
 94a:	03 c0       	rjmp	.+6      	; 0x952 <vfprintf+0x198>
 94c:	69 2d       	mov	r22, r9
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	02 c0       	rjmp	.+4      	; 0x956 <vfprintf+0x19c>
 952:	6f ef       	ldi	r22, 0xFF	; 255
 954:	7f ef       	ldi	r23, 0xFF	; 255
 956:	c5 01       	movw	r24, r10
 958:	2d d1       	rcall	.+602    	; 0xbb4 <strnlen_P>
 95a:	4c 01       	movw	r8, r24
 95c:	f3 2d       	mov	r31, r3
 95e:	f0 68       	ori	r31, 0x80	; 128
 960:	3f 2e       	mov	r3, r31
 962:	82 01       	movw	r16, r4
 964:	33 fc       	sbrc	r3, 3
 966:	19 c0       	rjmp	.+50     	; 0x99a <vfprintf+0x1e0>
 968:	82 2d       	mov	r24, r2
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	88 16       	cp	r8, r24
 96e:	99 06       	cpc	r9, r25
 970:	a0 f4       	brcc	.+40     	; 0x99a <vfprintf+0x1e0>
 972:	b6 01       	movw	r22, r12
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	33 d1       	rcall	.+614    	; 0xbe0 <fputc>
 97a:	2a 94       	dec	r2
 97c:	f5 cf       	rjmp	.-22     	; 0x968 <vfprintf+0x1ae>
 97e:	f5 01       	movw	r30, r10
 980:	37 fc       	sbrc	r3, 7
 982:	85 91       	lpm	r24, Z+
 984:	37 fe       	sbrs	r3, 7
 986:	81 91       	ld	r24, Z+
 988:	5f 01       	movw	r10, r30
 98a:	b6 01       	movw	r22, r12
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	28 d1       	rcall	.+592    	; 0xbe0 <fputc>
 990:	21 10       	cpse	r2, r1
 992:	2a 94       	dec	r2
 994:	21 e0       	ldi	r18, 0x01	; 1
 996:	82 1a       	sub	r8, r18
 998:	91 08       	sbc	r9, r1
 99a:	81 14       	cp	r8, r1
 99c:	91 04       	cpc	r9, r1
 99e:	79 f7       	brne	.-34     	; 0x97e <vfprintf+0x1c4>
 9a0:	e1 c0       	rjmp	.+450    	; 0xb64 <vfprintf+0x3aa>
 9a2:	84 36       	cpi	r24, 0x64	; 100
 9a4:	11 f0       	breq	.+4      	; 0x9aa <vfprintf+0x1f0>
 9a6:	89 36       	cpi	r24, 0x69	; 105
 9a8:	39 f5       	brne	.+78     	; 0x9f8 <vfprintf+0x23e>
 9aa:	f8 01       	movw	r30, r16
 9ac:	37 fe       	sbrs	r3, 7
 9ae:	07 c0       	rjmp	.+14     	; 0x9be <vfprintf+0x204>
 9b0:	60 81       	ld	r22, Z
 9b2:	71 81       	ldd	r23, Z+1	; 0x01
 9b4:	82 81       	ldd	r24, Z+2	; 0x02
 9b6:	93 81       	ldd	r25, Z+3	; 0x03
 9b8:	0c 5f       	subi	r16, 0xFC	; 252
 9ba:	1f 4f       	sbci	r17, 0xFF	; 255
 9bc:	08 c0       	rjmp	.+16     	; 0x9ce <vfprintf+0x214>
 9be:	60 81       	ld	r22, Z
 9c0:	71 81       	ldd	r23, Z+1	; 0x01
 9c2:	07 2e       	mov	r0, r23
 9c4:	00 0c       	add	r0, r0
 9c6:	88 0b       	sbc	r24, r24
 9c8:	99 0b       	sbc	r25, r25
 9ca:	0e 5f       	subi	r16, 0xFE	; 254
 9cc:	1f 4f       	sbci	r17, 0xFF	; 255
 9ce:	f3 2d       	mov	r31, r3
 9d0:	ff 76       	andi	r31, 0x6F	; 111
 9d2:	3f 2e       	mov	r3, r31
 9d4:	97 ff       	sbrs	r25, 7
 9d6:	09 c0       	rjmp	.+18     	; 0x9ea <vfprintf+0x230>
 9d8:	90 95       	com	r25
 9da:	80 95       	com	r24
 9dc:	70 95       	com	r23
 9de:	61 95       	neg	r22
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	f0 68       	ori	r31, 0x80	; 128
 9e8:	3f 2e       	mov	r3, r31
 9ea:	2a e0       	ldi	r18, 0x0A	; 10
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	a3 01       	movw	r20, r6
 9f0:	33 d1       	rcall	.+614    	; 0xc58 <__ultoa_invert>
 9f2:	88 2e       	mov	r8, r24
 9f4:	86 18       	sub	r8, r6
 9f6:	44 c0       	rjmp	.+136    	; 0xa80 <vfprintf+0x2c6>
 9f8:	85 37       	cpi	r24, 0x75	; 117
 9fa:	31 f4       	brne	.+12     	; 0xa08 <vfprintf+0x24e>
 9fc:	23 2d       	mov	r18, r3
 9fe:	2f 7e       	andi	r18, 0xEF	; 239
 a00:	b2 2e       	mov	r11, r18
 a02:	2a e0       	ldi	r18, 0x0A	; 10
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	25 c0       	rjmp	.+74     	; 0xa52 <vfprintf+0x298>
 a08:	93 2d       	mov	r25, r3
 a0a:	99 7f       	andi	r25, 0xF9	; 249
 a0c:	b9 2e       	mov	r11, r25
 a0e:	8f 36       	cpi	r24, 0x6F	; 111
 a10:	c1 f0       	breq	.+48     	; 0xa42 <vfprintf+0x288>
 a12:	18 f4       	brcc	.+6      	; 0xa1a <vfprintf+0x260>
 a14:	88 35       	cpi	r24, 0x58	; 88
 a16:	79 f0       	breq	.+30     	; 0xa36 <vfprintf+0x27c>
 a18:	ae c0       	rjmp	.+348    	; 0xb76 <vfprintf+0x3bc>
 a1a:	80 37       	cpi	r24, 0x70	; 112
 a1c:	19 f0       	breq	.+6      	; 0xa24 <vfprintf+0x26a>
 a1e:	88 37       	cpi	r24, 0x78	; 120
 a20:	21 f0       	breq	.+8      	; 0xa2a <vfprintf+0x270>
 a22:	a9 c0       	rjmp	.+338    	; 0xb76 <vfprintf+0x3bc>
 a24:	e9 2f       	mov	r30, r25
 a26:	e0 61       	ori	r30, 0x10	; 16
 a28:	be 2e       	mov	r11, r30
 a2a:	b4 fe       	sbrs	r11, 4
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <vfprintf+0x28e>
 a2e:	fb 2d       	mov	r31, r11
 a30:	f4 60       	ori	r31, 0x04	; 4
 a32:	bf 2e       	mov	r11, r31
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <vfprintf+0x28e>
 a36:	34 fe       	sbrs	r3, 4
 a38:	0a c0       	rjmp	.+20     	; 0xa4e <vfprintf+0x294>
 a3a:	29 2f       	mov	r18, r25
 a3c:	26 60       	ori	r18, 0x06	; 6
 a3e:	b2 2e       	mov	r11, r18
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <vfprintf+0x294>
 a42:	28 e0       	ldi	r18, 0x08	; 8
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <vfprintf+0x298>
 a48:	20 e1       	ldi	r18, 0x10	; 16
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <vfprintf+0x298>
 a4e:	20 e1       	ldi	r18, 0x10	; 16
 a50:	32 e0       	ldi	r19, 0x02	; 2
 a52:	f8 01       	movw	r30, r16
 a54:	b7 fe       	sbrs	r11, 7
 a56:	07 c0       	rjmp	.+14     	; 0xa66 <vfprintf+0x2ac>
 a58:	60 81       	ld	r22, Z
 a5a:	71 81       	ldd	r23, Z+1	; 0x01
 a5c:	82 81       	ldd	r24, Z+2	; 0x02
 a5e:	93 81       	ldd	r25, Z+3	; 0x03
 a60:	0c 5f       	subi	r16, 0xFC	; 252
 a62:	1f 4f       	sbci	r17, 0xFF	; 255
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <vfprintf+0x2b8>
 a66:	60 81       	ld	r22, Z
 a68:	71 81       	ldd	r23, Z+1	; 0x01
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 5f       	subi	r16, 0xFE	; 254
 a70:	1f 4f       	sbci	r17, 0xFF	; 255
 a72:	a3 01       	movw	r20, r6
 a74:	f1 d0       	rcall	.+482    	; 0xc58 <__ultoa_invert>
 a76:	88 2e       	mov	r8, r24
 a78:	86 18       	sub	r8, r6
 a7a:	fb 2d       	mov	r31, r11
 a7c:	ff 77       	andi	r31, 0x7F	; 127
 a7e:	3f 2e       	mov	r3, r31
 a80:	36 fe       	sbrs	r3, 6
 a82:	0d c0       	rjmp	.+26     	; 0xa9e <vfprintf+0x2e4>
 a84:	23 2d       	mov	r18, r3
 a86:	2e 7f       	andi	r18, 0xFE	; 254
 a88:	a2 2e       	mov	r10, r18
 a8a:	89 14       	cp	r8, r9
 a8c:	58 f4       	brcc	.+22     	; 0xaa4 <vfprintf+0x2ea>
 a8e:	34 fe       	sbrs	r3, 4
 a90:	0b c0       	rjmp	.+22     	; 0xaa8 <vfprintf+0x2ee>
 a92:	32 fc       	sbrc	r3, 2
 a94:	09 c0       	rjmp	.+18     	; 0xaa8 <vfprintf+0x2ee>
 a96:	83 2d       	mov	r24, r3
 a98:	8e 7e       	andi	r24, 0xEE	; 238
 a9a:	a8 2e       	mov	r10, r24
 a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <vfprintf+0x2ee>
 a9e:	b8 2c       	mov	r11, r8
 aa0:	a3 2c       	mov	r10, r3
 aa2:	03 c0       	rjmp	.+6      	; 0xaaa <vfprintf+0x2f0>
 aa4:	b8 2c       	mov	r11, r8
 aa6:	01 c0       	rjmp	.+2      	; 0xaaa <vfprintf+0x2f0>
 aa8:	b9 2c       	mov	r11, r9
 aaa:	a4 fe       	sbrs	r10, 4
 aac:	0f c0       	rjmp	.+30     	; 0xacc <vfprintf+0x312>
 aae:	fe 01       	movw	r30, r28
 ab0:	e8 0d       	add	r30, r8
 ab2:	f1 1d       	adc	r31, r1
 ab4:	80 81       	ld	r24, Z
 ab6:	80 33       	cpi	r24, 0x30	; 48
 ab8:	21 f4       	brne	.+8      	; 0xac2 <vfprintf+0x308>
 aba:	9a 2d       	mov	r25, r10
 abc:	99 7e       	andi	r25, 0xE9	; 233
 abe:	a9 2e       	mov	r10, r25
 ac0:	09 c0       	rjmp	.+18     	; 0xad4 <vfprintf+0x31a>
 ac2:	a2 fe       	sbrs	r10, 2
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <vfprintf+0x318>
 ac6:	b3 94       	inc	r11
 ac8:	b3 94       	inc	r11
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <vfprintf+0x31a>
 acc:	8a 2d       	mov	r24, r10
 ace:	86 78       	andi	r24, 0x86	; 134
 ad0:	09 f0       	breq	.+2      	; 0xad4 <vfprintf+0x31a>
 ad2:	b3 94       	inc	r11
 ad4:	a3 fc       	sbrc	r10, 3
 ad6:	10 c0       	rjmp	.+32     	; 0xaf8 <vfprintf+0x33e>
 ad8:	a0 fe       	sbrs	r10, 0
 ada:	06 c0       	rjmp	.+12     	; 0xae8 <vfprintf+0x32e>
 adc:	b2 14       	cp	r11, r2
 ade:	80 f4       	brcc	.+32     	; 0xb00 <vfprintf+0x346>
 ae0:	28 0c       	add	r2, r8
 ae2:	92 2c       	mov	r9, r2
 ae4:	9b 18       	sub	r9, r11
 ae6:	0d c0       	rjmp	.+26     	; 0xb02 <vfprintf+0x348>
 ae8:	b2 14       	cp	r11, r2
 aea:	58 f4       	brcc	.+22     	; 0xb02 <vfprintf+0x348>
 aec:	b6 01       	movw	r22, r12
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	76 d0       	rcall	.+236    	; 0xbe0 <fputc>
 af4:	b3 94       	inc	r11
 af6:	f8 cf       	rjmp	.-16     	; 0xae8 <vfprintf+0x32e>
 af8:	b2 14       	cp	r11, r2
 afa:	18 f4       	brcc	.+6      	; 0xb02 <vfprintf+0x348>
 afc:	2b 18       	sub	r2, r11
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <vfprintf+0x34a>
 b00:	98 2c       	mov	r9, r8
 b02:	21 2c       	mov	r2, r1
 b04:	a4 fe       	sbrs	r10, 4
 b06:	0f c0       	rjmp	.+30     	; 0xb26 <vfprintf+0x36c>
 b08:	b6 01       	movw	r22, r12
 b0a:	80 e3       	ldi	r24, 0x30	; 48
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	68 d0       	rcall	.+208    	; 0xbe0 <fputc>
 b10:	a2 fe       	sbrs	r10, 2
 b12:	16 c0       	rjmp	.+44     	; 0xb40 <vfprintf+0x386>
 b14:	a1 fc       	sbrc	r10, 1
 b16:	03 c0       	rjmp	.+6      	; 0xb1e <vfprintf+0x364>
 b18:	88 e7       	ldi	r24, 0x78	; 120
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <vfprintf+0x368>
 b1e:	88 e5       	ldi	r24, 0x58	; 88
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	b6 01       	movw	r22, r12
 b24:	0c c0       	rjmp	.+24     	; 0xb3e <vfprintf+0x384>
 b26:	8a 2d       	mov	r24, r10
 b28:	86 78       	andi	r24, 0x86	; 134
 b2a:	51 f0       	breq	.+20     	; 0xb40 <vfprintf+0x386>
 b2c:	a1 fe       	sbrs	r10, 1
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <vfprintf+0x37a>
 b30:	8b e2       	ldi	r24, 0x2B	; 43
 b32:	01 c0       	rjmp	.+2      	; 0xb36 <vfprintf+0x37c>
 b34:	80 e2       	ldi	r24, 0x20	; 32
 b36:	a7 fc       	sbrc	r10, 7
 b38:	8d e2       	ldi	r24, 0x2D	; 45
 b3a:	b6 01       	movw	r22, r12
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	50 d0       	rcall	.+160    	; 0xbe0 <fputc>
 b40:	89 14       	cp	r8, r9
 b42:	30 f4       	brcc	.+12     	; 0xb50 <vfprintf+0x396>
 b44:	b6 01       	movw	r22, r12
 b46:	80 e3       	ldi	r24, 0x30	; 48
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	4a d0       	rcall	.+148    	; 0xbe0 <fputc>
 b4c:	9a 94       	dec	r9
 b4e:	f8 cf       	rjmp	.-16     	; 0xb40 <vfprintf+0x386>
 b50:	8a 94       	dec	r8
 b52:	f3 01       	movw	r30, r6
 b54:	e8 0d       	add	r30, r8
 b56:	f1 1d       	adc	r31, r1
 b58:	80 81       	ld	r24, Z
 b5a:	b6 01       	movw	r22, r12
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	40 d0       	rcall	.+128    	; 0xbe0 <fputc>
 b60:	81 10       	cpse	r8, r1
 b62:	f6 cf       	rjmp	.-20     	; 0xb50 <vfprintf+0x396>
 b64:	22 20       	and	r2, r2
 b66:	09 f4       	brne	.+2      	; 0xb6a <vfprintf+0x3b0>
 b68:	4e ce       	rjmp	.-868    	; 0x806 <vfprintf+0x4c>
 b6a:	b6 01       	movw	r22, r12
 b6c:	80 e2       	ldi	r24, 0x20	; 32
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	37 d0       	rcall	.+110    	; 0xbe0 <fputc>
 b72:	2a 94       	dec	r2
 b74:	f7 cf       	rjmp	.-18     	; 0xb64 <vfprintf+0x3aa>
 b76:	f6 01       	movw	r30, r12
 b78:	86 81       	ldd	r24, Z+6	; 0x06
 b7a:	97 81       	ldd	r25, Z+7	; 0x07
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <vfprintf+0x3c8>
 b7e:	8f ef       	ldi	r24, 0xFF	; 255
 b80:	9f ef       	ldi	r25, 0xFF	; 255
 b82:	2b 96       	adiw	r28, 0x0b	; 11
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	de bf       	out	0x3e, r29	; 62
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	cd bf       	out	0x3d, r28	; 61
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	1f 91       	pop	r17
 b94:	0f 91       	pop	r16
 b96:	ff 90       	pop	r15
 b98:	ef 90       	pop	r14
 b9a:	df 90       	pop	r13
 b9c:	cf 90       	pop	r12
 b9e:	bf 90       	pop	r11
 ba0:	af 90       	pop	r10
 ba2:	9f 90       	pop	r9
 ba4:	8f 90       	pop	r8
 ba6:	7f 90       	pop	r7
 ba8:	6f 90       	pop	r6
 baa:	5f 90       	pop	r5
 bac:	4f 90       	pop	r4
 bae:	3f 90       	pop	r3
 bb0:	2f 90       	pop	r2
 bb2:	08 95       	ret

00000bb4 <strnlen_P>:
 bb4:	fc 01       	movw	r30, r24
 bb6:	05 90       	lpm	r0, Z+
 bb8:	61 50       	subi	r22, 0x01	; 1
 bba:	70 40       	sbci	r23, 0x00	; 0
 bbc:	01 10       	cpse	r0, r1
 bbe:	d8 f7       	brcc	.-10     	; 0xbb6 <strnlen_P+0x2>
 bc0:	80 95       	com	r24
 bc2:	90 95       	com	r25
 bc4:	8e 0f       	add	r24, r30
 bc6:	9f 1f       	adc	r25, r31
 bc8:	08 95       	ret

00000bca <strnlen>:
 bca:	fc 01       	movw	r30, r24
 bcc:	61 50       	subi	r22, 0x01	; 1
 bce:	70 40       	sbci	r23, 0x00	; 0
 bd0:	01 90       	ld	r0, Z+
 bd2:	01 10       	cpse	r0, r1
 bd4:	d8 f7       	brcc	.-10     	; 0xbcc <strnlen+0x2>
 bd6:	80 95       	com	r24
 bd8:	90 95       	com	r25
 bda:	8e 0f       	add	r24, r30
 bdc:	9f 1f       	adc	r25, r31
 bde:	08 95       	ret

00000be0 <fputc>:
 be0:	0f 93       	push	r16
 be2:	1f 93       	push	r17
 be4:	cf 93       	push	r28
 be6:	df 93       	push	r29
 be8:	fb 01       	movw	r30, r22
 bea:	23 81       	ldd	r18, Z+3	; 0x03
 bec:	21 fd       	sbrc	r18, 1
 bee:	03 c0       	rjmp	.+6      	; 0xbf6 <fputc+0x16>
 bf0:	8f ef       	ldi	r24, 0xFF	; 255
 bf2:	9f ef       	ldi	r25, 0xFF	; 255
 bf4:	2c c0       	rjmp	.+88     	; 0xc4e <fputc+0x6e>
 bf6:	22 ff       	sbrs	r18, 2
 bf8:	16 c0       	rjmp	.+44     	; 0xc26 <fputc+0x46>
 bfa:	46 81       	ldd	r20, Z+6	; 0x06
 bfc:	57 81       	ldd	r21, Z+7	; 0x07
 bfe:	24 81       	ldd	r18, Z+4	; 0x04
 c00:	35 81       	ldd	r19, Z+5	; 0x05
 c02:	42 17       	cp	r20, r18
 c04:	53 07       	cpc	r21, r19
 c06:	44 f4       	brge	.+16     	; 0xc18 <fputc+0x38>
 c08:	a0 81       	ld	r26, Z
 c0a:	b1 81       	ldd	r27, Z+1	; 0x01
 c0c:	9d 01       	movw	r18, r26
 c0e:	2f 5f       	subi	r18, 0xFF	; 255
 c10:	3f 4f       	sbci	r19, 0xFF	; 255
 c12:	31 83       	std	Z+1, r19	; 0x01
 c14:	20 83       	st	Z, r18
 c16:	8c 93       	st	X, r24
 c18:	26 81       	ldd	r18, Z+6	; 0x06
 c1a:	37 81       	ldd	r19, Z+7	; 0x07
 c1c:	2f 5f       	subi	r18, 0xFF	; 255
 c1e:	3f 4f       	sbci	r19, 0xFF	; 255
 c20:	37 83       	std	Z+7, r19	; 0x07
 c22:	26 83       	std	Z+6, r18	; 0x06
 c24:	14 c0       	rjmp	.+40     	; 0xc4e <fputc+0x6e>
 c26:	8b 01       	movw	r16, r22
 c28:	ec 01       	movw	r28, r24
 c2a:	fb 01       	movw	r30, r22
 c2c:	00 84       	ldd	r0, Z+8	; 0x08
 c2e:	f1 85       	ldd	r31, Z+9	; 0x09
 c30:	e0 2d       	mov	r30, r0
 c32:	09 95       	icall
 c34:	89 2b       	or	r24, r25
 c36:	e1 f6       	brne	.-72     	; 0xbf0 <fputc+0x10>
 c38:	d8 01       	movw	r26, r16
 c3a:	16 96       	adiw	r26, 0x06	; 6
 c3c:	8d 91       	ld	r24, X+
 c3e:	9c 91       	ld	r25, X
 c40:	17 97       	sbiw	r26, 0x07	; 7
 c42:	01 96       	adiw	r24, 0x01	; 1
 c44:	17 96       	adiw	r26, 0x07	; 7
 c46:	9c 93       	st	X, r25
 c48:	8e 93       	st	-X, r24
 c4a:	16 97       	sbiw	r26, 0x06	; 6
 c4c:	ce 01       	movw	r24, r28
 c4e:	df 91       	pop	r29
 c50:	cf 91       	pop	r28
 c52:	1f 91       	pop	r17
 c54:	0f 91       	pop	r16
 c56:	08 95       	ret

00000c58 <__ultoa_invert>:
 c58:	fa 01       	movw	r30, r20
 c5a:	aa 27       	eor	r26, r26
 c5c:	28 30       	cpi	r18, 0x08	; 8
 c5e:	51 f1       	breq	.+84     	; 0xcb4 <__ultoa_invert+0x5c>
 c60:	20 31       	cpi	r18, 0x10	; 16
 c62:	81 f1       	breq	.+96     	; 0xcc4 <__ultoa_invert+0x6c>
 c64:	e8 94       	clt
 c66:	6f 93       	push	r22
 c68:	6e 7f       	andi	r22, 0xFE	; 254
 c6a:	6e 5f       	subi	r22, 0xFE	; 254
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255
 c6e:	8f 4f       	sbci	r24, 0xFF	; 255
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	af 4f       	sbci	r26, 0xFF	; 255
 c74:	b1 e0       	ldi	r27, 0x01	; 1
 c76:	3e d0       	rcall	.+124    	; 0xcf4 <__ultoa_invert+0x9c>
 c78:	b4 e0       	ldi	r27, 0x04	; 4
 c7a:	3c d0       	rcall	.+120    	; 0xcf4 <__ultoa_invert+0x9c>
 c7c:	67 0f       	add	r22, r23
 c7e:	78 1f       	adc	r23, r24
 c80:	89 1f       	adc	r24, r25
 c82:	9a 1f       	adc	r25, r26
 c84:	a1 1d       	adc	r26, r1
 c86:	68 0f       	add	r22, r24
 c88:	79 1f       	adc	r23, r25
 c8a:	8a 1f       	adc	r24, r26
 c8c:	91 1d       	adc	r25, r1
 c8e:	a1 1d       	adc	r26, r1
 c90:	6a 0f       	add	r22, r26
 c92:	71 1d       	adc	r23, r1
 c94:	81 1d       	adc	r24, r1
 c96:	91 1d       	adc	r25, r1
 c98:	a1 1d       	adc	r26, r1
 c9a:	20 d0       	rcall	.+64     	; 0xcdc <__ultoa_invert+0x84>
 c9c:	09 f4       	brne	.+2      	; 0xca0 <__ultoa_invert+0x48>
 c9e:	68 94       	set
 ca0:	3f 91       	pop	r19
 ca2:	2a e0       	ldi	r18, 0x0A	; 10
 ca4:	26 9f       	mul	r18, r22
 ca6:	11 24       	eor	r1, r1
 ca8:	30 19       	sub	r19, r0
 caa:	30 5d       	subi	r19, 0xD0	; 208
 cac:	31 93       	st	Z+, r19
 cae:	de f6       	brtc	.-74     	; 0xc66 <__ultoa_invert+0xe>
 cb0:	cf 01       	movw	r24, r30
 cb2:	08 95       	ret
 cb4:	46 2f       	mov	r20, r22
 cb6:	47 70       	andi	r20, 0x07	; 7
 cb8:	40 5d       	subi	r20, 0xD0	; 208
 cba:	41 93       	st	Z+, r20
 cbc:	b3 e0       	ldi	r27, 0x03	; 3
 cbe:	0f d0       	rcall	.+30     	; 0xcde <__ultoa_invert+0x86>
 cc0:	c9 f7       	brne	.-14     	; 0xcb4 <__ultoa_invert+0x5c>
 cc2:	f6 cf       	rjmp	.-20     	; 0xcb0 <__ultoa_invert+0x58>
 cc4:	46 2f       	mov	r20, r22
 cc6:	4f 70       	andi	r20, 0x0F	; 15
 cc8:	40 5d       	subi	r20, 0xD0	; 208
 cca:	4a 33       	cpi	r20, 0x3A	; 58
 ccc:	18 f0       	brcs	.+6      	; 0xcd4 <__ultoa_invert+0x7c>
 cce:	49 5d       	subi	r20, 0xD9	; 217
 cd0:	31 fd       	sbrc	r19, 1
 cd2:	40 52       	subi	r20, 0x20	; 32
 cd4:	41 93       	st	Z+, r20
 cd6:	02 d0       	rcall	.+4      	; 0xcdc <__ultoa_invert+0x84>
 cd8:	a9 f7       	brne	.-22     	; 0xcc4 <__ultoa_invert+0x6c>
 cda:	ea cf       	rjmp	.-44     	; 0xcb0 <__ultoa_invert+0x58>
 cdc:	b4 e0       	ldi	r27, 0x04	; 4
 cde:	a6 95       	lsr	r26
 ce0:	97 95       	ror	r25
 ce2:	87 95       	ror	r24
 ce4:	77 95       	ror	r23
 ce6:	67 95       	ror	r22
 ce8:	ba 95       	dec	r27
 cea:	c9 f7       	brne	.-14     	; 0xcde <__ultoa_invert+0x86>
 cec:	00 97       	sbiw	r24, 0x00	; 0
 cee:	61 05       	cpc	r22, r1
 cf0:	71 05       	cpc	r23, r1
 cf2:	08 95       	ret
 cf4:	9b 01       	movw	r18, r22
 cf6:	ac 01       	movw	r20, r24
 cf8:	0a 2e       	mov	r0, r26
 cfa:	06 94       	lsr	r0
 cfc:	57 95       	ror	r21
 cfe:	47 95       	ror	r20
 d00:	37 95       	ror	r19
 d02:	27 95       	ror	r18
 d04:	ba 95       	dec	r27
 d06:	c9 f7       	brne	.-14     	; 0xcfa <__ultoa_invert+0xa2>
 d08:	62 0f       	add	r22, r18
 d0a:	73 1f       	adc	r23, r19
 d0c:	84 1f       	adc	r24, r20
 d0e:	95 1f       	adc	r25, r21
 d10:	a0 1d       	adc	r26, r0
 d12:	08 95       	ret

00000d14 <_exit>:
 d14:	f8 94       	cli

00000d16 <__stop_program>:
 d16:	ff cf       	rjmp	.-2      	; 0xd16 <__stop_program>
