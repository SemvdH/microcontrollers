
LCDMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af1  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000862  00000000  00000000  00000d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040a  00000000  00000000  000015b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000097  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2d d0       	rcall	.+90     	; 0xf4 <main>
  9a:	5c c0       	rjmp	.+184    	; 0x154 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <twi_init>:
outputs:	
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
	TWSR = 0;
  9e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  a8:	08 95       	ret

000000aa <twi_start>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
  aa:	84 ea       	ldi	r24, 0xA4	; 164
  ac:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
  b0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  b4:	88 23       	and	r24, r24
  b6:	e4 f7       	brge	.-8      	; 0xb0 <twi_start+0x6>
}
  b8:	08 95       	ret

000000ba <twi_stop>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  ba:	84 e9       	ldi	r24, 0x94	; 148
  bc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  c0:	08 95       	ret

000000c2 <twi_tx>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
  c2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
  cc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  d0:	88 23       	and	r24, r24
  d2:	e4 f7       	brge	.-8      	; 0xcc <twi_tx+0xa>
}
  d4:	08 95       	ret

000000d6 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	08 c0       	rjmp	.+16     	; 0xec <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	e9 ef       	ldi	r30, 0xF9	; 249
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <wait+0xa>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <wait+0x10>
  e6:	00 00       	nop
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	28 17       	cp	r18, r24
  ee:	39 07       	cpc	r19, r25
  f0:	ac f3       	brlt	.-22     	; 0xdc <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  f2:	08 95       	ret

000000f4 <main>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	
	twi_init();		// Init TWI interface
  f4:	d4 df       	rcall	.-88     	; 0x9e <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
  f6:	d9 df       	rcall	.-78     	; 0xaa <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
  f8:	80 ee       	ldi	r24, 0xE0	; 224
  fa:	e3 df       	rcall	.-58     	; 0xc2 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
  fc:	81 e2       	ldi	r24, 0x21	; 33
  fe:	e1 df       	rcall	.-62     	; 0xc2 <twi_tx>
	twi_stop();
 100:	dc df       	rcall	.-72     	; 0xba <twi_stop>

	twi_start();
 102:	d3 df       	rcall	.-90     	; 0xaa <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 104:	80 ee       	ldi	r24, 0xE0	; 224
 106:	dd df       	rcall	.-70     	; 0xc2 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 108:	80 ea       	ldi	r24, 0xA0	; 160
	twi_stop();
 10a:	db df       	rcall	.-74     	; 0xc2 <twi_tx>

	twi_start();
 10c:	d6 df       	rcall	.-84     	; 0xba <twi_stop>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 10e:	cd df       	rcall	.-102    	; 0xaa <twi_start>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 110:	80 ee       	ldi	r24, 0xE0	; 224
 112:	d7 df       	rcall	.-82     	; 0xc2 <twi_tx>
	twi_stop();
 114:	83 ee       	ldi	r24, 0xE3	; 227

	twi_start();
 116:	d5 df       	rcall	.-86     	; 0xc2 <twi_tx>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 118:	d0 df       	rcall	.-96     	; 0xba <twi_stop>
 11a:	c7 df       	rcall	.-114    	; 0xaa <twi_start>
	twi_tx(0x81);	// Display OFF - Blink On
 11c:	80 ee       	ldi	r24, 0xE0	; 224
 11e:	d1 df       	rcall	.-94     	; 0xc2 <twi_tx>
	twi_stop();
 120:	81 e8       	ldi	r24, 0x81	; 129

	while (1)
	{
		twi_start();
 122:	cf df       	rcall	.-98     	; 0xc2 <twi_tx>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 124:	ca df       	rcall	.-108    	; 0xba <twi_stop>
 126:	c1 df       	rcall	.-126    	; 0xaa <twi_start>
		twi_tx(0x00);	// Address
 128:	80 ee       	ldi	r24, 0xE0	; 224
 12a:	cb df       	rcall	.-106    	; 0xc2 <twi_tx>
 12c:	80 e0       	ldi	r24, 0x00	; 0
		twi_tx(0x00);	// data
 12e:	c9 df       	rcall	.-110    	; 0xc2 <twi_tx>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	c7 df       	rcall	.-114    	; 0xc2 <twi_tx>
		twi_stop();
 134:	c2 df       	rcall	.-124    	; 0xba <twi_stop>
 136:	84 ef       	ldi	r24, 0xF4	; 244

		wait(500);	
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	cd df       	rcall	.-102    	; 0xd6 <wait>
 13c:	b6 df       	rcall	.-148    	; 0xaa <twi_start>
 13e:	80 ee       	ldi	r24, 0xE0	; 224

		twi_start();
 140:	c0 df       	rcall	.-128    	; 0xc2 <twi_tx>
 142:	80 e0       	ldi	r24, 0x00	; 0
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 144:	be df       	rcall	.-132    	; 0xc2 <twi_tx>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	bc df       	rcall	.-136    	; 0xc2 <twi_tx>
		twi_tx(0x00);	// Address
 14a:	b7 df       	rcall	.-146    	; 0xba <twi_stop>
 14c:	84 ef       	ldi	r24, 0xF4	; 244
 14e:	91 e0       	ldi	r25, 0x01	; 1
		twi_tx(0x01);	// data
 150:	c2 df       	rcall	.-124    	; 0xd6 <wait>
 152:	e9 cf       	rjmp	.-46     	; 0x126 <main+0x32>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
		twi_stop();	
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
